
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005334  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08005448  08005448  00015448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080056d8  080056d8  000156d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080056dc  080056dc  000156dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  080056e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f8  200001dc  080058bc  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200003d4  080058bc  000203d4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   000108a1  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002257  00000000  00000000  00030aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009e8a  00000000  00000000  00032cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b18  00000000  00000000  0003cb88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001138  00000000  00000000  0003d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00016eb0  00000000  00000000  0003e7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a38d  00000000  00000000  00055688  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00088b7c  00000000  00000000  0005fa15  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000f7  00000000  00000000  000e8591  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002de8  00000000  00000000  000e8688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800542c 	.word	0x0800542c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800542c 	.word	0x0800542c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2uiz>:
 8000d44:	0042      	lsls	r2, r0, #1
 8000d46:	d20e      	bcs.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d4c:	d30b      	bcc.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d409      	bmi.n	8000d6c <__aeabi_f2uiz+0x28>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	4770      	bx	lr
 8000d66:	f04f 0000 	mov.w	r0, #0
 8000d6a:	4770      	bx	lr
 8000d6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d70:	d101      	bne.n	8000d76 <__aeabi_f2uiz+0x32>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d102      	bne.n	8000d7c <__aeabi_f2uiz+0x38>
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7a:	4770      	bx	lr
 8000d7c:	f04f 0000 	mov.w	r0, #0
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_InitTick+0x3c>)
{
 8000d88:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8a:	7818      	ldrb	r0, [r3, #0]
 8000d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d90:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <HAL_InitTick+0x40>)
 8000d96:	6810      	ldr	r0, [r2, #0]
 8000d98:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d9c:	f000 f88e 	bl	8000ebc <HAL_SYSTICK_Config>
 8000da0:	4604      	mov	r4, r0
 8000da2:	b958      	cbnz	r0, 8000dbc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da4:	2d0f      	cmp	r5, #15
 8000da6:	d809      	bhi.n	8000dbc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	4602      	mov	r2, r0
 8000daa:	4629      	mov	r1, r5
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f842 	bl	8000e38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4620      	mov	r0, r4
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <HAL_InitTick+0x44>)
 8000db8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000dba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	e7fc      	b.n	8000dba <HAL_InitTick+0x36>
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x20>)
{
 8000dce:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dda:	f000 f81b 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff ffd0 	bl	8000d84 <HAL_InitTick>
  HAL_MspInit();
 8000de4:	f002 f946 	bl	8003074 <HAL_MspInit>
}
 8000de8:	2000      	movs	r0, #0
 8000dea:	bd08      	pop	{r3, pc}
 8000dec:	40022000 	.word	0x40022000

08000df0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_IncTick+0x10>)
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <HAL_IncTick+0x14>)
 8000df4:	6811      	ldr	r1, [r2, #0]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	440b      	add	r3, r1
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	2000020c 	.word	0x2000020c
 8000e04:	20000000 	.word	0x20000000

08000e08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e08:	4b01      	ldr	r3, [pc, #4]	; (8000e10 <HAL_GetTick+0x8>)
 8000e0a:	6818      	ldr	r0, [r3, #0]
}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2000020c 	.word	0x2000020c

08000e14 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e16:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e1a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e22:	041b      	lsls	r3, r3, #16
 8000e24:	0c1b      	lsrs	r3, r3, #16
 8000e26:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000e2e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e30:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b570      	push	{r4, r5, r6, lr}
 8000e3c:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3e:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e42:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e46:	f1c4 0507 	rsb	r5, r4, #7
 8000e4a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	bf28      	it	cs
 8000e52:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e54:	2b06      	cmp	r3, #6
 8000e56:	bf98      	it	ls
 8000e58:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	bf88      	it	hi
 8000e60:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e62:	ea21 0303 	bic.w	r3, r1, r3
 8000e66:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	fa06 f404 	lsl.w	r4, r6, r4
 8000e6c:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000e70:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e72:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	bfa8      	it	ge
 8000e78:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000e7c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	bfb8      	it	lt
 8000e82:	4a06      	ldrlt	r2, [pc, #24]	; (8000e9c <HAL_NVIC_SetPriority+0x64>)
 8000e84:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	bfab      	itete	ge
 8000e88:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e96:	bd70      	pop	{r4, r5, r6, pc}
 8000e98:	e000ed00 	.word	0xe000ed00
 8000e9c:	e000ed14 	.word	0xe000ed14

08000ea0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	db08      	blt.n	8000eb6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	0942      	lsrs	r2, r0, #5
 8000ea8:	f000 001f 	and.w	r0, r0, #31
 8000eac:	fa03 f000 	lsl.w	r0, r3, r0
 8000eb0:	4b01      	ldr	r3, [pc, #4]	; (8000eb8 <HAL_NVIC_EnableIRQ+0x18>)
 8000eb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ec2:	d20a      	bcs.n	8000eda <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eec:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000eee:	4626      	mov	r6, r4
 8000ef0:	4b65      	ldr	r3, [pc, #404]	; (8001088 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ef2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001098 <HAL_GPIO_Init+0x1b0>
 8000ef6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800109c <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efa:	680a      	ldr	r2, [r1, #0]
 8000efc:	fa32 f506 	lsrs.w	r5, r2, r6
 8000f00:	d102      	bne.n	8000f08 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000f02:	b003      	add	sp, #12
 8000f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000f08:	f04f 0801 	mov.w	r8, #1
 8000f0c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f10:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000f14:	4590      	cmp	r8, r2
 8000f16:	d17e      	bne.n	8001016 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8000f18:	684d      	ldr	r5, [r1, #4]
 8000f1a:	2d12      	cmp	r5, #18
 8000f1c:	f000 80a9 	beq.w	8001072 <HAL_GPIO_Init+0x18a>
 8000f20:	f200 8082 	bhi.w	8001028 <HAL_GPIO_Init+0x140>
 8000f24:	2d02      	cmp	r5, #2
 8000f26:	f000 80a1 	beq.w	800106c <HAL_GPIO_Init+0x184>
 8000f2a:	d876      	bhi.n	800101a <HAL_GPIO_Init+0x132>
 8000f2c:	2d00      	cmp	r5, #0
 8000f2e:	f000 8088 	beq.w	8001042 <HAL_GPIO_Init+0x15a>
 8000f32:	2d01      	cmp	r5, #1
 8000f34:	f000 8098 	beq.w	8001068 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f38:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f3c:	2aff      	cmp	r2, #255	; 0xff
 8000f3e:	bf93      	iteet	ls
 8000f40:	4682      	movls	sl, r0
 8000f42:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000f46:	3d08      	subhi	r5, #8
 8000f48:	f8d0 b000 	ldrls.w	fp, [r0]
 8000f4c:	bf92      	itee	ls
 8000f4e:	00b5      	lslls	r5, r6, #2
 8000f50:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000f54:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f56:	fa09 f805 	lsl.w	r8, r9, r5
 8000f5a:	ea2b 0808 	bic.w	r8, fp, r8
 8000f5e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f62:	bf88      	it	hi
 8000f64:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f68:	ea48 0505 	orr.w	r5, r8, r5
 8000f6c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f70:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000f74:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000f78:	d04d      	beq.n	8001016 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7a:	4f44      	ldr	r7, [pc, #272]	; (800108c <HAL_GPIO_Init+0x1a4>)
 8000f7c:	f026 0803 	bic.w	r8, r6, #3
 8000f80:	69bd      	ldr	r5, [r7, #24]
 8000f82:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000f86:	f045 0501 	orr.w	r5, r5, #1
 8000f8a:	61bd      	str	r5, [r7, #24]
 8000f8c:	69bd      	ldr	r5, [r7, #24]
 8000f8e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000f92:	f005 0501 	and.w	r5, r5, #1
 8000f96:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f98:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9c:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f9e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000fa2:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fa6:	fa09 f90b 	lsl.w	r9, r9, fp
 8000faa:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fae:	4d38      	ldr	r5, [pc, #224]	; (8001090 <HAL_GPIO_Init+0x1a8>)
 8000fb0:	42a8      	cmp	r0, r5
 8000fb2:	d063      	beq.n	800107c <HAL_GPIO_Init+0x194>
 8000fb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fb8:	42a8      	cmp	r0, r5
 8000fba:	d061      	beq.n	8001080 <HAL_GPIO_Init+0x198>
 8000fbc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fc0:	42a8      	cmp	r0, r5
 8000fc2:	d05f      	beq.n	8001084 <HAL_GPIO_Init+0x19c>
 8000fc4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fc8:	42a8      	cmp	r0, r5
 8000fca:	bf0c      	ite	eq
 8000fcc:	2503      	moveq	r5, #3
 8000fce:	2504      	movne	r5, #4
 8000fd0:	fa05 f50b 	lsl.w	r5, r5, fp
 8000fd4:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000fd8:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000fdc:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fde:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000fe2:	bf14      	ite	ne
 8000fe4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fe6:	4395      	biceq	r5, r2
 8000fe8:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000fea:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fec:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000ff0:	bf14      	ite	ne
 8000ff2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ff4:	4395      	biceq	r5, r2
 8000ff6:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ff8:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ffa:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ffe:	bf14      	ite	ne
 8001000:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001002:	4395      	biceq	r5, r2
 8001004:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001006:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001008:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800100c:	bf14      	ite	ne
 800100e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001010:	ea25 0202 	biceq.w	r2, r5, r2
 8001014:	60da      	str	r2, [r3, #12]
	position++;
 8001016:	3601      	adds	r6, #1
 8001018:	e76f      	b.n	8000efa <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800101a:	2d03      	cmp	r5, #3
 800101c:	d022      	beq.n	8001064 <HAL_GPIO_Init+0x17c>
 800101e:	2d11      	cmp	r5, #17
 8001020:	d18a      	bne.n	8000f38 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001022:	68cc      	ldr	r4, [r1, #12]
 8001024:	3404      	adds	r4, #4
          break;
 8001026:	e787      	b.n	8000f38 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001028:	4f1a      	ldr	r7, [pc, #104]	; (8001094 <HAL_GPIO_Init+0x1ac>)
 800102a:	42bd      	cmp	r5, r7
 800102c:	d009      	beq.n	8001042 <HAL_GPIO_Init+0x15a>
 800102e:	d812      	bhi.n	8001056 <HAL_GPIO_Init+0x16e>
 8001030:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80010a0 <HAL_GPIO_Init+0x1b8>
 8001034:	454d      	cmp	r5, r9
 8001036:	d004      	beq.n	8001042 <HAL_GPIO_Init+0x15a>
 8001038:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800103c:	454d      	cmp	r5, r9
 800103e:	f47f af7b 	bne.w	8000f38 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001042:	688c      	ldr	r4, [r1, #8]
 8001044:	b1c4      	cbz	r4, 8001078 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001046:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001048:	bf0c      	ite	eq
 800104a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800104e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001052:	2408      	movs	r4, #8
 8001054:	e770      	b.n	8000f38 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001056:	4565      	cmp	r5, ip
 8001058:	d0f3      	beq.n	8001042 <HAL_GPIO_Init+0x15a>
 800105a:	4575      	cmp	r5, lr
 800105c:	d0f1      	beq.n	8001042 <HAL_GPIO_Init+0x15a>
 800105e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80010a4 <HAL_GPIO_Init+0x1bc>
 8001062:	e7eb      	b.n	800103c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001064:	2400      	movs	r4, #0
 8001066:	e767      	b.n	8000f38 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001068:	68cc      	ldr	r4, [r1, #12]
          break;
 800106a:	e765      	b.n	8000f38 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800106c:	68cc      	ldr	r4, [r1, #12]
 800106e:	3408      	adds	r4, #8
          break;
 8001070:	e762      	b.n	8000f38 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001072:	68cc      	ldr	r4, [r1, #12]
 8001074:	340c      	adds	r4, #12
          break;
 8001076:	e75f      	b.n	8000f38 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001078:	2404      	movs	r4, #4
 800107a:	e75d      	b.n	8000f38 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800107c:	2500      	movs	r5, #0
 800107e:	e7a7      	b.n	8000fd0 <HAL_GPIO_Init+0xe8>
 8001080:	2501      	movs	r5, #1
 8001082:	e7a5      	b.n	8000fd0 <HAL_GPIO_Init+0xe8>
 8001084:	2502      	movs	r5, #2
 8001086:	e7a3      	b.n	8000fd0 <HAL_GPIO_Init+0xe8>
 8001088:	40010400 	.word	0x40010400
 800108c:	40021000 	.word	0x40021000
 8001090:	40010800 	.word	0x40010800
 8001094:	10210000 	.word	0x10210000
 8001098:	10310000 	.word	0x10310000
 800109c:	10320000 	.word	0x10320000
 80010a0:	10110000 	.word	0x10110000
 80010a4:	10220000 	.word	0x10220000

080010a8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010a8:	6801      	ldr	r1, [r0, #0]
 80010aa:	2200      	movs	r2, #0
 80010ac:	694b      	ldr	r3, [r1, #20]
 80010ae:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80010b2:	d010      	beq.n	80010d6 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010b4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80010b8:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80010ba:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80010bc:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80010be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010c2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010c6:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80010d2:	2001      	movs	r0, #1
 80010d4:	4770      	bx	lr
  }
  return HAL_OK;
 80010d6:	4618      	mov	r0, r3
}
 80010d8:	4770      	bx	lr

080010da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80010da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010de:	4604      	mov	r4, r0
 80010e0:	4616      	mov	r6, r2
 80010e2:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80010e4:	b28f      	uxth	r7, r1
 80010e6:	6825      	ldr	r5, [r4, #0]
 80010e8:	6968      	ldr	r0, [r5, #20]
 80010ea:	ea37 0000 	bics.w	r0, r7, r0
 80010ee:	d017      	beq.n	8001120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010f0:	696b      	ldr	r3, [r5, #20]
 80010f2:	055a      	lsls	r2, r3, #21
 80010f4:	d516      	bpl.n	8001124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010f6:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80010f8:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fe:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001100:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001104:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001106:	2300      	movs	r3, #0
 8001108:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800110a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800110e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001112:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001114:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8001118:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800111a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800111c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001124:	1c73      	adds	r3, r6, #1
 8001126:	d0df      	beq.n	80010e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001128:	f7ff fe6e 	bl	8000e08 <HAL_GetTick>
 800112c:	eba0 0008 	sub.w	r0, r0, r8
 8001130:	42b0      	cmp	r0, r6
 8001132:	d801      	bhi.n	8001138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8001134:	2e00      	cmp	r6, #0
 8001136:	d1d6      	bne.n	80010e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001138:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800113a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800113c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800113e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001142:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001146:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001148:	f042 0220 	orr.w	r2, r2, #32
 800114c:	e7e4      	b.n	8001118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

0800114e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800114e:	b570      	push	{r4, r5, r6, lr}
 8001150:	4604      	mov	r4, r0
 8001152:	460d      	mov	r5, r1
 8001154:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	075b      	lsls	r3, r3, #29
 800115c:	d501      	bpl.n	8001162 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800115e:	2000      	movs	r0, #0
}
 8001160:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001162:	4620      	mov	r0, r4
 8001164:	f7ff ffa0 	bl	80010a8 <I2C_IsAcknowledgeFailed>
 8001168:	b9a8      	cbnz	r0, 8001196 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800116a:	1c6a      	adds	r2, r5, #1
 800116c:	d0f3      	beq.n	8001156 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800116e:	f7ff fe4b 	bl	8000e08 <HAL_GetTick>
 8001172:	1b80      	subs	r0, r0, r6
 8001174:	42a8      	cmp	r0, r5
 8001176:	d801      	bhi.n	800117c <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001178:	2d00      	cmp	r5, #0
 800117a:	d1ec      	bne.n	8001156 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800117c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800117e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001180:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001182:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001186:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800118a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800118c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001190:	f042 0220 	orr.w	r2, r2, #32
 8001194:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001196:	2001      	movs	r0, #1
 8001198:	e7e2      	b.n	8001160 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800119a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800119a:	b570      	push	{r4, r5, r6, lr}
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80011a2:	6820      	ldr	r0, [r4, #0]
 80011a4:	6943      	ldr	r3, [r0, #20]
 80011a6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80011aa:	d001      	beq.n	80011b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80011ac:	2000      	movs	r0, #0
 80011ae:	e010      	b.n	80011d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80011b0:	6942      	ldr	r2, [r0, #20]
 80011b2:	06d2      	lsls	r2, r2, #27
 80011b4:	d50e      	bpl.n	80011d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011b6:	f06f 0210 	mvn.w	r2, #16
 80011ba:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80011bc:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80011be:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80011c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80011c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80011ca:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011cc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80011ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80011d2:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011d4:	f7ff fe18 	bl	8000e08 <HAL_GetTick>
 80011d8:	1b80      	subs	r0, r0, r6
 80011da:	42a8      	cmp	r0, r5
 80011dc:	d801      	bhi.n	80011e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80011de:	2d00      	cmp	r5, #0
 80011e0:	d1df      	bne.n	80011a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011e2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80011e4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011e6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80011e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80011ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011f2:	f042 0220 	orr.w	r2, r2, #32
 80011f6:	e7e8      	b.n	80011ca <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080011f8 <I2C_WaitOnFlagUntilTimeout>:
{
 80011f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011fc:	4604      	mov	r4, r0
 80011fe:	4690      	mov	r8, r2
 8001200:	461f      	mov	r7, r3
 8001202:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001204:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8001208:	b28d      	uxth	r5, r1
 800120a:	6821      	ldr	r1, [r4, #0]
 800120c:	f1b9 0f01 	cmp.w	r9, #1
 8001210:	bf0c      	ite	eq
 8001212:	694b      	ldreq	r3, [r1, #20]
 8001214:	698b      	ldrne	r3, [r1, #24]
 8001216:	ea35 0303 	bics.w	r3, r5, r3
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	4598      	cmp	r8, r3
 8001222:	d001      	beq.n	8001228 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001224:	2000      	movs	r0, #0
 8001226:	e016      	b.n	8001256 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001228:	1c7b      	adds	r3, r7, #1
 800122a:	d0ef      	beq.n	800120c <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800122c:	f7ff fdec 	bl	8000e08 <HAL_GetTick>
 8001230:	1b80      	subs	r0, r0, r6
 8001232:	42b8      	cmp	r0, r7
 8001234:	d801      	bhi.n	800123a <I2C_WaitOnFlagUntilTimeout+0x42>
 8001236:	2f00      	cmp	r7, #0
 8001238:	d1e7      	bne.n	800120a <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800123a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800123c:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 800123e:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001240:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001242:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001246:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800124a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800124c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001250:	f042 0220 	orr.w	r2, r2, #32
 8001254:	6422      	str	r2, [r4, #64]	; 0x40
}
 8001256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800125a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800125a:	b570      	push	{r4, r5, r6, lr}
 800125c:	4604      	mov	r4, r0
 800125e:	460d      	mov	r5, r1
 8001260:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	061b      	lsls	r3, r3, #24
 8001268:	d501      	bpl.n	800126e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800126a:	2000      	movs	r0, #0
}
 800126c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff ff1a 	bl	80010a8 <I2C_IsAcknowledgeFailed>
 8001274:	b9a8      	cbnz	r0, 80012a2 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001276:	1c6a      	adds	r2, r5, #1
 8001278:	d0f3      	beq.n	8001262 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800127a:	f7ff fdc5 	bl	8000e08 <HAL_GetTick>
 800127e:	1b80      	subs	r0, r0, r6
 8001280:	42a8      	cmp	r0, r5
 8001282:	d801      	bhi.n	8001288 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001284:	2d00      	cmp	r5, #0
 8001286:	d1ec      	bne.n	8001262 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001288:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800128a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800128c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800128e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001292:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001296:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001298:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800129c:	f042 0220 	orr.w	r2, r2, #32
 80012a0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80012a2:	2001      	movs	r0, #1
 80012a4:	e7e2      	b.n	800126c <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

080012a8 <I2C_RequestMemoryWrite>:
{
 80012a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80012ac:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012ae:	6802      	ldr	r2, [r0, #0]
{
 80012b0:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012b2:	6813      	ldr	r3, [r2, #0]
{
 80012b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ba:	6013      	str	r3, [r2, #0]
{
 80012bc:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80012c0:	9600      	str	r6, [sp, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80012c8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012ca:	f7ff ff95 	bl	80011f8 <I2C_WaitOnFlagUntilTimeout>
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	b138      	cbz	r0, 80012e2 <I2C_RequestMemoryWrite+0x3a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	d502      	bpl.n	80012de <I2C_RequestMemoryWrite+0x36>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80012d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012dc:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80012de:	2003      	movs	r0, #3
 80012e0:	e00a      	b.n	80012f8 <I2C_RequestMemoryWrite+0x50>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80012e2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80012e6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80012ea:	4633      	mov	r3, r6
 80012ec:	4918      	ldr	r1, [pc, #96]	; (8001350 <I2C_RequestMemoryWrite+0xa8>)
 80012ee:	4620      	mov	r0, r4
 80012f0:	f7ff fef3 	bl	80010da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012f4:	b118      	cbz	r0, 80012fe <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 80012f6:	2001      	movs	r0, #1
}
 80012f8:	b004      	add	sp, #16
 80012fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	9003      	str	r0, [sp, #12]
 8001302:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001304:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001306:	9203      	str	r2, [sp, #12]
 8001308:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800130a:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800130c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800130e:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001310:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001312:	f7ff ffa2 	bl	800125a <I2C_WaitOnTXEFlagUntilTimeout>
 8001316:	b140      	cbz	r0, 800132a <I2C_RequestMemoryWrite+0x82>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001318:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800131a:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800131c:	bf01      	itttt	eq
 800131e:	6822      	ldreq	r2, [r4, #0]
 8001320:	6813      	ldreq	r3, [r2, #0]
 8001322:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001326:	6013      	streq	r3, [r2, #0]
 8001328:	e7e5      	b.n	80012f6 <I2C_RequestMemoryWrite+0x4e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800132a:	f1b8 0f01 	cmp.w	r8, #1
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	d102      	bne.n	8001338 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001332:	b2ed      	uxtb	r5, r5
 8001334:	611d      	str	r5, [r3, #16]
 8001336:	e7df      	b.n	80012f8 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001338:	0a2a      	lsrs	r2, r5, #8
 800133a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800133c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800133e:	4632      	mov	r2, r6
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff ff8a 	bl	800125a <I2C_WaitOnTXEFlagUntilTimeout>
 8001346:	2800      	cmp	r0, #0
 8001348:	d1e6      	bne.n	8001318 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	e7f1      	b.n	8001332 <I2C_RequestMemoryWrite+0x8a>
 800134e:	bf00      	nop
 8001350:	00010002 	.word	0x00010002

08001354 <I2C_RequestMemoryRead>:
{
 8001354:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001358:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800135a:	6803      	ldr	r3, [r0, #0]
{
 800135c:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800135e:	681a      	ldr	r2, [r3, #0]
{
 8001360:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001362:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001366:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001368:	681a      	ldr	r2, [r3, #0]
{
 800136a:	460f      	mov	r7, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800136c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001370:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001372:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001378:	9500      	str	r5, [sp, #0]
 800137a:	2200      	movs	r2, #0
{
 800137c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800137e:	f7ff ff3b 	bl	80011f8 <I2C_WaitOnFlagUntilTimeout>
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	b148      	cbz	r0, 800139a <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	05db      	lsls	r3, r3, #23
 800138a:	d502      	bpl.n	8001392 <I2C_RequestMemoryRead+0x3e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800138c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001390:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001392:	2003      	movs	r0, #3
}
 8001394:	b004      	add	sp, #16
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800139a:	b2ff      	uxtb	r7, r7
 800139c:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80013a0:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013a2:	492a      	ldr	r1, [pc, #168]	; (800144c <I2C_RequestMemoryRead+0xf8>)
 80013a4:	462b      	mov	r3, r5
 80013a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80013a8:	4620      	mov	r0, r4
 80013aa:	f7ff fe96 	bl	80010da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013ae:	b108      	cbz	r0, 80013b4 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 80013b0:	2001      	movs	r0, #1
 80013b2:	e7ef      	b.n	8001394 <I2C_RequestMemoryRead+0x40>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	9003      	str	r0, [sp, #12]
 80013b8:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013ba:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013bc:	9203      	str	r2, [sp, #12]
 80013be:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013c0:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013c4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013c8:	f7ff ff47 	bl	800125a <I2C_WaitOnTXEFlagUntilTimeout>
 80013cc:	b140      	cbz	r0, 80013e0 <I2C_RequestMemoryRead+0x8c>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013d0:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d2:	bf01      	itttt	eq
 80013d4:	6822      	ldreq	r2, [r4, #0]
 80013d6:	6813      	ldreq	r3, [r2, #0]
 80013d8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80013dc:	6013      	streq	r3, [r2, #0]
 80013de:	e7e7      	b.n	80013b0 <I2C_RequestMemoryRead+0x5c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013e0:	f1b8 0f01 	cmp.w	r8, #1
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	d125      	bne.n	8001434 <I2C_RequestMemoryRead+0xe0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013e8:	b2f6      	uxtb	r6, r6
 80013ea:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013ec:	462a      	mov	r2, r5
 80013ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff ff32 	bl	800125a <I2C_WaitOnTXEFlagUntilTimeout>
 80013f6:	4602      	mov	r2, r0
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d1e8      	bne.n	80013ce <I2C_RequestMemoryRead+0x7a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80013fc:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013fe:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001400:	680b      	ldr	r3, [r1, #0]
 8001402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001406:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800140a:	9500      	str	r5, [sp, #0]
 800140c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001410:	f7ff fef2 	bl	80011f8 <I2C_WaitOnFlagUntilTimeout>
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	2800      	cmp	r0, #0
 8001418:	d1b5      	bne.n	8001386 <I2C_RequestMemoryRead+0x32>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800141a:	f047 0701 	orr.w	r7, r7, #1
 800141e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001422:	462b      	mov	r3, r5
 8001424:	4909      	ldr	r1, [pc, #36]	; (800144c <I2C_RequestMemoryRead+0xf8>)
 8001426:	4620      	mov	r0, r4
 8001428:	f7ff fe57 	bl	80010da <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 800142c:	3000      	adds	r0, #0
 800142e:	bf18      	it	ne
 8001430:	2001      	movne	r0, #1
 8001432:	e7af      	b.n	8001394 <I2C_RequestMemoryRead+0x40>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001434:	0a32      	lsrs	r2, r6, #8
 8001436:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001438:	990a      	ldr	r1, [sp, #40]	; 0x28
 800143a:	462a      	mov	r2, r5
 800143c:	4620      	mov	r0, r4
 800143e:	f7ff ff0c 	bl	800125a <I2C_WaitOnTXEFlagUntilTimeout>
 8001442:	2800      	cmp	r0, #0
 8001444:	d1c3      	bne.n	80013ce <I2C_RequestMemoryRead+0x7a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001446:	6823      	ldr	r3, [r4, #0]
 8001448:	e7ce      	b.n	80013e8 <I2C_RequestMemoryRead+0x94>
 800144a:	bf00      	nop
 800144c:	00010002 	.word	0x00010002

08001450 <HAL_I2C_Init>:
{
 8001450:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001452:	4604      	mov	r4, r0
 8001454:	b908      	cbnz	r0, 800145a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001456:	2001      	movs	r0, #1
}
 8001458:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800145a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800145e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001462:	b91b      	cbnz	r3, 800146c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001464:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001468:	f001 fe26 	bl	80030b8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800146c:	2324      	movs	r3, #36	; 0x24
 800146e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001482:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800148a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800148c:	f000 fcce 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001490:	6863      	ldr	r3, [r4, #4]
 8001492:	4a41      	ldr	r2, [pc, #260]	; (8001598 <HAL_I2C_Init+0x148>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d84d      	bhi.n	8001534 <HAL_I2C_Init+0xe4>
 8001498:	4a40      	ldr	r2, [pc, #256]	; (800159c <HAL_I2C_Init+0x14c>)
 800149a:	4290      	cmp	r0, r2
 800149c:	d9db      	bls.n	8001456 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800149e:	4940      	ldr	r1, [pc, #256]	; (80015a0 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014a0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80014a2:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014a6:	6855      	ldr	r5, [r2, #4]
 80014a8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80014ac:	430d      	orrs	r5, r1
 80014ae:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014b0:	6a15      	ldr	r5, [r2, #32]
 80014b2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80014b6:	3101      	adds	r1, #1
 80014b8:	4329      	orrs	r1, r5
 80014ba:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014bc:	69d1      	ldr	r1, [r2, #28]
 80014be:	4d36      	ldr	r5, [pc, #216]	; (8001598 <HAL_I2C_Init+0x148>)
 80014c0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80014c4:	42ab      	cmp	r3, r5
 80014c6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80014ca:	f100 30ff 	add.w	r0, r0, #4294967295
 80014ce:	d848      	bhi.n	8001562 <HAL_I2C_Init+0x112>
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80014d6:	1c43      	adds	r3, r0, #1
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	2b04      	cmp	r3, #4
 80014de:	bf38      	it	cc
 80014e0:	2304      	movcc	r3, #4
 80014e2:	430b      	orrs	r3, r1
 80014e4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014e6:	6811      	ldr	r1, [r2, #0]
 80014e8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80014ec:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80014f0:	4303      	orrs	r3, r0
 80014f2:	430b      	orrs	r3, r1
 80014f4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014f6:	6891      	ldr	r1, [r2, #8]
 80014f8:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80014fc:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001500:	4303      	orrs	r3, r0
 8001502:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001506:	430b      	orrs	r3, r1
 8001508:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800150a:	68d1      	ldr	r1, [r2, #12]
 800150c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001510:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001514:	4303      	orrs	r3, r0
 8001516:	430b      	orrs	r3, r1
 8001518:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800151a:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800151c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001524:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001526:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001528:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800152c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800152e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001532:	e791      	b.n	8001458 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_I2C_Init+0x154>)
 8001536:	4290      	cmp	r0, r2
 8001538:	d98d      	bls.n	8001456 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800153a:	4e19      	ldr	r6, [pc, #100]	; (80015a0 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800153c:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001540:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001544:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001546:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001548:	6855      	ldr	r5, [r2, #4]
 800154a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800154e:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001550:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001554:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001556:	6a15      	ldr	r5, [r2, #32]
 8001558:	fbb1 f1f6 	udiv	r1, r1, r6
 800155c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001560:	e7a9      	b.n	80014b6 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001562:	68a5      	ldr	r5, [r4, #8]
 8001564:	b955      	cbnz	r5, 800157c <HAL_I2C_Init+0x12c>
 8001566:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800156a:	fbb0 f0f3 	udiv	r0, r0, r3
 800156e:	1c43      	adds	r3, r0, #1
 8001570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001574:	b16b      	cbz	r3, 8001592 <HAL_I2C_Init+0x142>
 8001576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157a:	e7b2      	b.n	80014e2 <HAL_I2C_Init+0x92>
 800157c:	2519      	movs	r5, #25
 800157e:	436b      	muls	r3, r5
 8001580:	fbb0 f0f3 	udiv	r0, r0, r3
 8001584:	1c43      	adds	r3, r0, #1
 8001586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158a:	b113      	cbz	r3, 8001592 <HAL_I2C_Init+0x142>
 800158c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001590:	e7a7      	b.n	80014e2 <HAL_I2C_Init+0x92>
 8001592:	2301      	movs	r3, #1
 8001594:	e7a5      	b.n	80014e2 <HAL_I2C_Init+0x92>
 8001596:	bf00      	nop
 8001598:	000186a0 	.word	0x000186a0
 800159c:	001e847f 	.word	0x001e847f
 80015a0:	000f4240 	.word	0x000f4240
 80015a4:	003d08ff 	.word	0x003d08ff

080015a8 <HAL_I2C_Mem_Write>:
{
 80015a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80015ac:	4604      	mov	r4, r0
 80015ae:	4699      	mov	r9, r3
 80015b0:	460f      	mov	r7, r1
 80015b2:	4690      	mov	r8, r2
 80015b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80015b6:	f7ff fc27 	bl	8000e08 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ba:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80015be:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c0:	2b20      	cmp	r3, #32
 80015c2:	d003      	beq.n	80015cc <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80015c4:	2002      	movs	r0, #2
}
 80015c6:	b003      	add	sp, #12
 80015c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015cc:	9000      	str	r0, [sp, #0]
 80015ce:	2319      	movs	r3, #25
 80015d0:	2201      	movs	r2, #1
 80015d2:	493b      	ldr	r1, [pc, #236]	; (80016c0 <HAL_I2C_Mem_Write+0x118>)
 80015d4:	4620      	mov	r0, r4
 80015d6:	f7ff fe0f 	bl	80011f8 <I2C_WaitOnFlagUntilTimeout>
 80015da:	2800      	cmp	r0, #0
 80015dc:	d1f2      	bne.n	80015c4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80015de:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d0ee      	beq.n	80015c4 <HAL_I2C_Mem_Write+0x1c>
 80015e6:	2301      	movs	r3, #1
 80015e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015ec:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015ee:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80015f4:	bf58      	it	pl
 80015f6:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015f8:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 80015fa:	bf5c      	itt	pl
 80015fc:	f042 0201 	orrpl.w	r2, r2, #1
 8001600:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001608:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800160a:	2321      	movs	r3, #33	; 0x21
 800160c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001610:	2340      	movs	r3, #64	; 0x40
 8001612:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800161a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800161c:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8001620:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001622:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001626:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8001628:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800162a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800162c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_I2C_Mem_Write+0x11c>)
 8001630:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001632:	464b      	mov	r3, r9
 8001634:	f7ff fe38 	bl	80012a8 <I2C_RequestMemoryWrite>
 8001638:	2800      	cmp	r0, #0
 800163a:	d02a      	beq.n	8001692 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 800163c:	2001      	movs	r0, #1
 800163e:	e7c2      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001640:	f7ff fe0b 	bl	800125a <I2C_WaitOnTXEFlagUntilTimeout>
 8001644:	b140      	cbz	r0, 8001658 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001646:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001648:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800164a:	bf01      	itttt	eq
 800164c:	6822      	ldreq	r2, [r4, #0]
 800164e:	6813      	ldreq	r3, [r2, #0]
 8001650:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001654:	6013      	streq	r3, [r2, #0]
 8001656:	e7f1      	b.n	800163c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800165a:	6827      	ldr	r7, [r4, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001662:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001664:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001666:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001668:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800166a:	3a01      	subs	r2, #1
 800166c:	b292      	uxth	r2, r2
 800166e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001670:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001672:	1e48      	subs	r0, r1, #1
 8001674:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001676:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001678:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800167a:	d50a      	bpl.n	8001692 <HAL_I2C_Mem_Write+0xea>
 800167c:	b148      	cbz	r0, 8001692 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800167e:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8001680:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001682:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001684:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001686:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001688:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800168a:	3b01      	subs	r3, #1
 800168c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800168e:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001690:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001692:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001694:	462a      	mov	r2, r5
 8001696:	4631      	mov	r1, r6
 8001698:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1d0      	bne.n	8001640 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169e:	f7ff fd56 	bl	800114e <I2C_WaitOnBTFFlagUntilTimeout>
 80016a2:	2800      	cmp	r0, #0
 80016a4:	d1cf      	bne.n	8001646 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a6:	6822      	ldr	r2, [r4, #0]
 80016a8:	6813      	ldr	r3, [r2, #0]
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80016b0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80016b2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80016b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ba:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80016be:	e782      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e>
 80016c0:	00100002 	.word	0x00100002
 80016c4:	ffff0000 	.word	0xffff0000

080016c8 <HAL_I2C_Mem_Read>:
{
 80016c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016cc:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 80016ce:	2300      	movs	r3, #0
{
 80016d0:	4604      	mov	r4, r0
 80016d2:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 80016d4:	9303      	str	r3, [sp, #12]
{
 80016d6:	460d      	mov	r5, r1
 80016d8:	4690      	mov	r8, r2
 80016da:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff fb94 	bl	8000e08 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80016e4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016e6:	2b20      	cmp	r3, #32
 80016e8:	d004      	beq.n	80016f4 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 80016ea:	2502      	movs	r5, #2
}
 80016ec:	4628      	mov	r0, r5
 80016ee:	b009      	add	sp, #36	; 0x24
 80016f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016f4:	9000      	str	r0, [sp, #0]
 80016f6:	2319      	movs	r3, #25
 80016f8:	2201      	movs	r2, #1
 80016fa:	498e      	ldr	r1, [pc, #568]	; (8001934 <HAL_I2C_Mem_Read+0x26c>)
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff fd7b 	bl	80011f8 <I2C_WaitOnFlagUntilTimeout>
 8001702:	2800      	cmp	r0, #0
 8001704:	d1f1      	bne.n	80016ea <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8001706:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800170a:	2b01      	cmp	r3, #1
 800170c:	d0ed      	beq.n	80016ea <HAL_I2C_Mem_Read+0x22>
 800170e:	2301      	movs	r3, #1
 8001710:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001714:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001716:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001718:	681a      	ldr	r2, [r3, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800171a:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800171c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800171e:	bf5e      	ittt	pl
 8001720:	681a      	ldrpl	r2, [r3, #0]
 8001722:	f042 0201 	orrpl.w	r2, r2, #1
 8001726:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800172e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001730:	2322      	movs	r3, #34	; 0x22
 8001732:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001736:	2340      	movs	r3, #64	; 0x40
 8001738:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800173c:	2300      	movs	r3, #0
 800173e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001740:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001742:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->pBuffPtr    = pData;
 8001746:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001748:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800174c:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 800174e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001750:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001752:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001754:	4b78      	ldr	r3, [pc, #480]	; (8001938 <HAL_I2C_Mem_Read+0x270>)
 8001756:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001758:	464b      	mov	r3, r9
 800175a:	f7ff fdfb 	bl	8001354 <I2C_RequestMemoryRead>
 800175e:	4605      	mov	r5, r0
 8001760:	b108      	cbz	r0, 8001766 <HAL_I2C_Mem_Read+0x9e>
              return HAL_ERROR;
 8001762:	2501      	movs	r5, #1
 8001764:	e7c2      	b.n	80016ec <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8001766:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	b992      	cbnz	r2, 8001792 <HAL_I2C_Mem_Read+0xca>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800176c:	9004      	str	r0, [sp, #16]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	9204      	str	r2, [sp, #16]
 8001772:	699a      	ldr	r2, [r3, #24]
 8001774:	9204      	str	r2, [sp, #16]
 8001776:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800177e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001780:	2320      	movs	r3, #32
 8001782:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001786:	2300      	movs	r3, #0
 8001788:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800178c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001790:	e7ac      	b.n	80016ec <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8001792:	2a01      	cmp	r2, #1
 8001794:	d132      	bne.n	80017fc <HAL_I2C_Mem_Read+0x134>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	9005      	str	r0, [sp, #20]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	9205      	str	r2, [sp, #20]
 80017a8:	699a      	ldr	r2, [r3, #24]
 80017aa:	9205      	str	r2, [sp, #20]
 80017ac:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80017b6:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017b8:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800193c <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017bc:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8001940 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 80017c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0dc      	beq.n	8001780 <HAL_I2C_Mem_Read+0xb8>
      if (hi2c->XferSize <= 3U)
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	f200 8095 	bhi.w	80018f6 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d131      	bne.n	8001834 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d0:	4632      	mov	r2, r6
 80017d2:	4639      	mov	r1, r7
 80017d4:	4620      	mov	r0, r4
 80017d6:	f7ff fce0 	bl	800119a <I2C_WaitOnRXNEFlagUntilTimeout>
 80017da:	2800      	cmp	r0, #0
 80017dc:	d1c1      	bne.n	8001762 <HAL_I2C_Mem_Read+0x9a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017e4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80017e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017e8:	3301      	adds	r3, #1
 80017ea:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80017ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017ee:	3b01      	subs	r3, #1
 80017f0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80017f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80017fa:	e7e1      	b.n	80017c0 <HAL_I2C_Mem_Read+0xf8>
    else if (hi2c->XferSize == 2U)
 80017fc:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017fe:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8001800:	d10e      	bne.n	8001820 <HAL_I2C_Mem_Read+0x158>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001806:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	9006      	str	r0, [sp, #24]
 800180e:	695a      	ldr	r2, [r3, #20]
 8001810:	9206      	str	r2, [sp, #24]
 8001812:	699a      	ldr	r2, [r3, #24]
 8001814:	9206      	str	r2, [sp, #24]
 8001816:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181e:	e7c9      	b.n	80017b4 <HAL_I2C_Mem_Read+0xec>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001824:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001826:	9007      	str	r0, [sp, #28]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	9207      	str	r2, [sp, #28]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	9307      	str	r3, [sp, #28]
 8001830:	9b07      	ldr	r3, [sp, #28]
 8001832:	e7c1      	b.n	80017b8 <HAL_I2C_Mem_Read+0xf0>
        else if (hi2c->XferSize == 2U)
 8001834:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001836:	9600      	str	r6, [sp, #0]
 8001838:	463b      	mov	r3, r7
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4641      	mov	r1, r8
 8001840:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001842:	d118      	bne.n	8001876 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001844:	f7ff fcd8 	bl	80011f8 <I2C_WaitOnFlagUntilTimeout>
 8001848:	2800      	cmp	r0, #0
 800184a:	d18a      	bne.n	8001762 <HAL_I2C_Mem_Read+0x9a>
 800184c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001856:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001858:	691a      	ldr	r2, [r3, #16]
 800185a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800185c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800185e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001860:	3301      	adds	r3, #1
 8001862:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001864:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001866:	3b01      	subs	r3, #1
 8001868:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800186a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800186c:	3b01      	subs	r3, #1
 800186e:	b29b      	uxth	r3, r3
 8001870:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001872:	b662      	cpsie	i
 8001874:	e7b3      	b.n	80017de <HAL_I2C_Mem_Read+0x116>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001876:	f7ff fcbf 	bl	80011f8 <I2C_WaitOnFlagUntilTimeout>
 800187a:	2800      	cmp	r0, #0
 800187c:	f47f af71 	bne.w	8001762 <HAL_I2C_Mem_Read+0x9a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001880:	6822      	ldr	r2, [r4, #0]
 8001882:	6813      	ldr	r3, [r2, #0]
 8001884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001888:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800188a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001892:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001894:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8001898:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800189a:	1c4b      	adds	r3, r1, #1
 800189c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800189e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018a0:	3b01      	subs	r3, #1
 80018a2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80018a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80018ac:	f8d9 3000 	ldr.w	r3, [r9]
 80018b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80018b4:	2323      	movs	r3, #35	; 0x23
 80018b6:	4353      	muls	r3, r2
 80018b8:	9303      	str	r3, [sp, #12]
            count--;
 80018ba:	9b03      	ldr	r3, [sp, #12]
 80018bc:	3b01      	subs	r3, #1
 80018be:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 80018c0:	9b03      	ldr	r3, [sp, #12]
 80018c2:	b96b      	cbnz	r3, 80018e0 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 80018c4:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80018c6:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80018c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018d2:	f042 0220 	orr.w	r2, r2, #32
 80018d6:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80018d8:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80018da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80018de:	e740      	b.n	8001762 <HAL_I2C_Mem_Read+0x9a>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	0750      	lsls	r0, r2, #29
 80018e6:	d5e8      	bpl.n	80018ba <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ee:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	704b      	strb	r3, [r1, #1]
 80018f4:	e7b3      	b.n	800185e <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f6:	4632      	mov	r2, r6
 80018f8:	4639      	mov	r1, r7
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff fc4d 	bl	800119a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001900:	2800      	cmp	r0, #0
 8001902:	f47f af2e 	bne.w	8001762 <HAL_I2C_Mem_Read+0x9a>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800190c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800190e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001910:	1c53      	adds	r3, r2, #1
 8001912:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001914:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001916:	3b01      	subs	r3, #1
 8001918:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800191a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800191c:	3b01      	subs	r3, #1
 800191e:	b29b      	uxth	r3, r3
 8001920:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	6959      	ldr	r1, [r3, #20]
 8001926:	0749      	lsls	r1, r1, #29
 8001928:	f57f af4a 	bpl.w	80017c0 <HAL_I2C_Mem_Read+0xf8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	7053      	strb	r3, [r2, #1]
 8001930:	e759      	b.n	80017e6 <HAL_I2C_Mem_Read+0x11e>
 8001932:	bf00      	nop
 8001934:	00100002 	.word	0x00100002
 8001938:	ffff0000 	.word	0xffff0000
 800193c:	00010004 	.word	0x00010004
 8001940:	20000008 	.word	0x20000008

08001944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001948:	4605      	mov	r5, r0
 800194a:	b908      	cbnz	r0, 8001950 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800194c:	2001      	movs	r0, #1
 800194e:	e03c      	b.n	80019ca <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001950:	6803      	ldr	r3, [r0, #0]
 8001952:	07db      	lsls	r3, r3, #31
 8001954:	d410      	bmi.n	8001978 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	079f      	lsls	r7, r3, #30
 800195a:	d45d      	bmi.n	8001a18 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195c:	682b      	ldr	r3, [r5, #0]
 800195e:	0719      	lsls	r1, r3, #28
 8001960:	f100 8094 	bmi.w	8001a8c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	682b      	ldr	r3, [r5, #0]
 8001966:	075a      	lsls	r2, r3, #29
 8001968:	f100 80be 	bmi.w	8001ae8 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196c:	69e8      	ldr	r0, [r5, #28]
 800196e:	2800      	cmp	r0, #0
 8001970:	f040 812c 	bne.w	8001bcc <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001974:	2000      	movs	r0, #0
 8001976:	e028      	b.n	80019ca <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001978:	4c8f      	ldr	r4, [pc, #572]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 800197a:	6863      	ldr	r3, [r4, #4]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b04      	cmp	r3, #4
 8001982:	d007      	beq.n	8001994 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001984:	6863      	ldr	r3, [r4, #4]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b08      	cmp	r3, #8
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_OscConfig+0x5e>
 800198e:	6863      	ldr	r3, [r4, #4]
 8001990:	03de      	lsls	r6, r3, #15
 8001992:	d506      	bpl.n	80019a2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	039c      	lsls	r4, r3, #14
 8001998:	d5dd      	bpl.n	8001956 <HAL_RCC_OscConfig+0x12>
 800199a:	686b      	ldr	r3, [r5, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1da      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
 80019a0:	e7d4      	b.n	800194c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a2:	686b      	ldr	r3, [r5, #4]
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a8:	d112      	bne.n	80019d0 <HAL_RCC_OscConfig+0x8c>
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019b2:	f7ff fa29 	bl	8000e08 <HAL_GetTick>
 80019b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	0398      	lsls	r0, r3, #14
 80019bc:	d4cb      	bmi.n	8001956 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019be:	f7ff fa23 	bl	8000e08 <HAL_GetTick>
 80019c2:	1b80      	subs	r0, r0, r6
 80019c4:	2864      	cmp	r0, #100	; 0x64
 80019c6:	d9f7      	bls.n	80019b8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80019c8:	2003      	movs	r0, #3
}
 80019ca:	b002      	add	sp, #8
 80019cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	b99b      	cbnz	r3, 80019fa <HAL_RCC_OscConfig+0xb6>
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d8:	6023      	str	r3, [r4, #0]
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019e2:	f7ff fa11 	bl	8000e08 <HAL_GetTick>
 80019e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	0399      	lsls	r1, r3, #14
 80019ec:	d5b3      	bpl.n	8001956 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ee:	f7ff fa0b 	bl	8000e08 <HAL_GetTick>
 80019f2:	1b80      	subs	r0, r0, r6
 80019f4:	2864      	cmp	r0, #100	; 0x64
 80019f6:	d9f7      	bls.n	80019e8 <HAL_RCC_OscConfig+0xa4>
 80019f8:	e7e6      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	d103      	bne.n	8001a0a <HAL_RCC_OscConfig+0xc6>
 8001a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a06:	6023      	str	r3, [r4, #0]
 8001a08:	e7cf      	b.n	80019aa <HAL_RCC_OscConfig+0x66>
 8001a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0e:	6023      	str	r3, [r4, #0]
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	e7cb      	b.n	80019b0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a18:	4c67      	ldr	r4, [pc, #412]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	6863      	ldr	r3, [r4, #4]
 8001a1c:	f013 0f0c 	tst.w	r3, #12
 8001a20:	d007      	beq.n	8001a32 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a22:	6863      	ldr	r3, [r4, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d110      	bne.n	8001a4e <HAL_RCC_OscConfig+0x10a>
 8001a2c:	6863      	ldr	r3, [r4, #4]
 8001a2e:	03da      	lsls	r2, r3, #15
 8001a30:	d40d      	bmi.n	8001a4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	079b      	lsls	r3, r3, #30
 8001a36:	d502      	bpl.n	8001a3e <HAL_RCC_OscConfig+0xfa>
 8001a38:	692b      	ldr	r3, [r5, #16]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d186      	bne.n	800194c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	696a      	ldr	r2, [r5, #20]
 8001a42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a4a:	6023      	str	r3, [r4, #0]
 8001a4c:	e786      	b.n	800195c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a4e:	692a      	ldr	r2, [r5, #16]
 8001a50:	4b5a      	ldr	r3, [pc, #360]	; (8001bbc <HAL_RCC_OscConfig+0x278>)
 8001a52:	b16a      	cbz	r2, 8001a70 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a58:	f7ff f9d6 	bl	8000e08 <HAL_GetTick>
 8001a5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	079f      	lsls	r7, r3, #30
 8001a62:	d4ec      	bmi.n	8001a3e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a64:	f7ff f9d0 	bl	8000e08 <HAL_GetTick>
 8001a68:	1b80      	subs	r0, r0, r6
 8001a6a:	2802      	cmp	r0, #2
 8001a6c:	d9f7      	bls.n	8001a5e <HAL_RCC_OscConfig+0x11a>
 8001a6e:	e7ab      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001a70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a72:	f7ff f9c9 	bl	8000e08 <HAL_GetTick>
 8001a76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	0798      	lsls	r0, r3, #30
 8001a7c:	f57f af6e 	bpl.w	800195c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a80:	f7ff f9c2 	bl	8000e08 <HAL_GetTick>
 8001a84:	1b80      	subs	r0, r0, r6
 8001a86:	2802      	cmp	r0, #2
 8001a88:	d9f6      	bls.n	8001a78 <HAL_RCC_OscConfig+0x134>
 8001a8a:	e79d      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8c:	69aa      	ldr	r2, [r5, #24]
 8001a8e:	4c4a      	ldr	r4, [pc, #296]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a90:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001a92:	b1da      	cbz	r2, 8001acc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a98:	f7ff f9b6 	bl	8000e08 <HAL_GetTick>
 8001a9c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aa0:	079b      	lsls	r3, r3, #30
 8001aa2:	d50d      	bpl.n	8001ac0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aa4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001aa8:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <HAL_RCC_OscConfig+0x280>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ab0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001ab2:	bf00      	nop
  }
  while (Delay --);
 8001ab4:	9b01      	ldr	r3, [sp, #4]
 8001ab6:	1e5a      	subs	r2, r3, #1
 8001ab8:	9201      	str	r2, [sp, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f9      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x16e>
 8001abe:	e751      	b.n	8001964 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f9a2 	bl	8000e08 <HAL_GetTick>
 8001ac4:	1b80      	subs	r0, r0, r6
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d9e9      	bls.n	8001a9e <HAL_RCC_OscConfig+0x15a>
 8001aca:	e77d      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001acc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ace:	f7ff f99b 	bl	8000e08 <HAL_GetTick>
 8001ad2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ad6:	079f      	lsls	r7, r3, #30
 8001ad8:	f57f af44 	bpl.w	8001964 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff f994 	bl	8000e08 <HAL_GetTick>
 8001ae0:	1b80      	subs	r0, r0, r6
 8001ae2:	2802      	cmp	r0, #2
 8001ae4:	d9f6      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x190>
 8001ae6:	e76f      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae8:	4c33      	ldr	r4, [pc, #204]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001aea:	69e3      	ldr	r3, [r4, #28]
 8001aec:	00d8      	lsls	r0, r3, #3
 8001aee:	d424      	bmi.n	8001b3a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001af0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	69e3      	ldr	r3, [r4, #28]
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	61e3      	str	r3, [r4, #28]
 8001afa:	69e3      	ldr	r3, [r4, #28]
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	4e30      	ldr	r6, [pc, #192]	; (8001bc8 <HAL_RCC_OscConfig+0x284>)
 8001b06:	6833      	ldr	r3, [r6, #0]
 8001b08:	05d9      	lsls	r1, r3, #23
 8001b0a:	d518      	bpl.n	8001b3e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0c:	68eb      	ldr	r3, [r5, #12]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d126      	bne.n	8001b60 <HAL_RCC_OscConfig+0x21c>
 8001b12:	6a23      	ldr	r3, [r4, #32]
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f975 	bl	8000e08 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b22:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	6a23      	ldr	r3, [r4, #32]
 8001b26:	079b      	lsls	r3, r3, #30
 8001b28:	d53f      	bpl.n	8001baa <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001b2a:	2f00      	cmp	r7, #0
 8001b2c:	f43f af1e 	beq.w	800196c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b30:	69e3      	ldr	r3, [r4, #28]
 8001b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b36:	61e3      	str	r3, [r4, #28]
 8001b38:	e718      	b.n	800196c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001b3a:	2700      	movs	r7, #0
 8001b3c:	e7e2      	b.n	8001b04 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3e:	6833      	ldr	r3, [r6, #0]
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001b46:	f7ff f95f 	bl	8000e08 <HAL_GetTick>
 8001b4a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	6833      	ldr	r3, [r6, #0]
 8001b4e:	05da      	lsls	r2, r3, #23
 8001b50:	d4dc      	bmi.n	8001b0c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7ff f959 	bl	8000e08 <HAL_GetTick>
 8001b56:	eba0 0008 	sub.w	r0, r0, r8
 8001b5a:	2864      	cmp	r0, #100	; 0x64
 8001b5c:	d9f6      	bls.n	8001b4c <HAL_RCC_OscConfig+0x208>
 8001b5e:	e733      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b60:	b9ab      	cbnz	r3, 8001b8e <HAL_RCC_OscConfig+0x24a>
 8001b62:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	6223      	str	r3, [r4, #32]
 8001b6e:	6a23      	ldr	r3, [r4, #32]
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b76:	f7ff f947 	bl	8000e08 <HAL_GetTick>
 8001b7a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	6a23      	ldr	r3, [r4, #32]
 8001b7e:	0798      	lsls	r0, r3, #30
 8001b80:	d5d3      	bpl.n	8001b2a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff f941 	bl	8000e08 <HAL_GetTick>
 8001b86:	1b80      	subs	r0, r0, r6
 8001b88:	4540      	cmp	r0, r8
 8001b8a:	d9f7      	bls.n	8001b7c <HAL_RCC_OscConfig+0x238>
 8001b8c:	e71c      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	6a23      	ldr	r3, [r4, #32]
 8001b92:	d103      	bne.n	8001b9c <HAL_RCC_OscConfig+0x258>
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6223      	str	r3, [r4, #32]
 8001b9a:	e7ba      	b.n	8001b12 <HAL_RCC_OscConfig+0x1ce>
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6223      	str	r3, [r4, #32]
 8001ba2:	6a23      	ldr	r3, [r4, #32]
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	e7b6      	b.n	8001b18 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff f92d 	bl	8000e08 <HAL_GetTick>
 8001bae:	eba0 0008 	sub.w	r0, r0, r8
 8001bb2:	42b0      	cmp	r0, r6
 8001bb4:	d9b6      	bls.n	8001b24 <HAL_RCC_OscConfig+0x1e0>
 8001bb6:	e707      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	42420000 	.word	0x42420000
 8001bc0:	42420480 	.word	0x42420480
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_RCC_OscConfig+0x334>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	461c      	mov	r4, r3
 8001bd2:	f002 020c 	and.w	r2, r2, #12
 8001bd6:	2a08      	cmp	r2, #8
 8001bd8:	d03d      	beq.n	8001c56 <HAL_RCC_OscConfig+0x312>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	4e27      	ldr	r6, [pc, #156]	; (8001c7c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bde:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001be0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be2:	d12b      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001be4:	f7ff f910 	bl	8000e08 <HAL_GetTick>
 8001be8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	0199      	lsls	r1, r3, #6
 8001bee:	d41f      	bmi.n	8001c30 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bf0:	6a2b      	ldr	r3, [r5, #32]
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bf8:	6862      	ldr	r2, [r4, #4]
 8001bfa:	68a9      	ldr	r1, [r5, #8]
 8001bfc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c00:	430a      	orrs	r2, r1
 8001c02:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c04:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001c06:	6862      	ldr	r2, [r4, #4]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c12:	2301      	movs	r3, #1
 8001c14:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c16:	f7ff f8f7 	bl	8000e08 <HAL_GetTick>
 8001c1a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	019a      	lsls	r2, r3, #6
 8001c20:	f53f aea8 	bmi.w	8001974 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff f8f0 	bl	8000e08 <HAL_GetTick>
 8001c28:	1b40      	subs	r0, r0, r5
 8001c2a:	2802      	cmp	r0, #2
 8001c2c:	d9f6      	bls.n	8001c1c <HAL_RCC_OscConfig+0x2d8>
 8001c2e:	e6cb      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff f8ea 	bl	8000e08 <HAL_GetTick>
 8001c34:	1bc0      	subs	r0, r0, r7
 8001c36:	2802      	cmp	r0, #2
 8001c38:	d9d7      	bls.n	8001bea <HAL_RCC_OscConfig+0x2a6>
 8001c3a:	e6c5      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f8e4 	bl	8000e08 <HAL_GetTick>
 8001c40:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	019b      	lsls	r3, r3, #6
 8001c46:	f57f ae95 	bpl.w	8001974 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff f8dd 	bl	8000e08 <HAL_GetTick>
 8001c4e:	1b40      	subs	r0, r0, r5
 8001c50:	2802      	cmp	r0, #2
 8001c52:	d9f6      	bls.n	8001c42 <HAL_RCC_OscConfig+0x2fe>
 8001c54:	e6b8      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c56:	2801      	cmp	r0, #1
 8001c58:	f43f aeb7 	beq.w	80019ca <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001c5c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5e:	6a2b      	ldr	r3, [r5, #32]
 8001c60:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001c64:	429a      	cmp	r2, r3
 8001c66:	f47f ae71 	bne.w	800194c <HAL_RCC_OscConfig+0x8>
 8001c6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c6c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001c70:	1ac0      	subs	r0, r0, r3
 8001c72:	bf18      	it	ne
 8001c74:	2001      	movne	r0, #1
 8001c76:	e6a8      	b.n	80019ca <HAL_RCC_OscConfig+0x86>
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	42420060 	.word	0x42420060

08001c80 <HAL_RCC_GetSysClockFreq>:
{
 8001c80:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001c84:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c86:	ac02      	add	r4, sp, #8
 8001c88:	f103 0510 	add.w	r5, r3, #16
 8001c8c:	4622      	mov	r2, r4
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	6859      	ldr	r1, [r3, #4]
 8001c92:	3308      	adds	r3, #8
 8001c94:	c203      	stmia	r2!, {r0, r1}
 8001c96:	42ab      	cmp	r3, r5
 8001c98:	4614      	mov	r4, r2
 8001c9a:	d1f7      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c9c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001ca0:	4911      	ldr	r1, [pc, #68]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ca2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001ca6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca8:	f003 020c 	and.w	r2, r3, #12
 8001cac:	2a08      	cmp	r2, #8
 8001cae:	d117      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cb0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001cb4:	a806      	add	r0, sp, #24
 8001cb6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cb8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cba:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cbe:	d50c      	bpl.n	8001cda <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cc0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cc2:	480a      	ldr	r0, [pc, #40]	; (8001cec <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cc4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cc8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cca:	aa06      	add	r2, sp, #24
 8001ccc:	4413      	add	r3, r2
 8001cce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cd2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001cd6:	b007      	add	sp, #28
 8001cd8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x70>)
 8001cdc:	4350      	muls	r0, r2
 8001cde:	e7fa      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001ce2:	e7f8      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x56>
 8001ce4:	08005448 	.word	0x08005448
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	007a1200 	.word	0x007a1200
 8001cf0:	003d0900 	.word	0x003d0900

08001cf4 <HAL_RCC_ClockConfig>:
{
 8001cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	b910      	cbnz	r0, 8001d04 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001cfe:	2001      	movs	r0, #1
}
 8001d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4a44      	ldr	r2, [pc, #272]	; (8001e18 <HAL_RCC_ClockConfig+0x124>)
 8001d06:	6813      	ldr	r3, [r2, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	428b      	cmp	r3, r1
 8001d0e:	d328      	bcc.n	8001d62 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d10:	6821      	ldr	r1, [r4, #0]
 8001d12:	078e      	lsls	r6, r1, #30
 8001d14:	d430      	bmi.n	8001d78 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d16:	07ca      	lsls	r2, r1, #31
 8001d18:	d443      	bmi.n	8001da2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1a:	4a3f      	ldr	r2, [pc, #252]	; (8001e18 <HAL_RCC_ClockConfig+0x124>)
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	42ab      	cmp	r3, r5
 8001d24:	d865      	bhi.n	8001df2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d26:	6822      	ldr	r2, [r4, #0]
 8001d28:	4d3c      	ldr	r5, [pc, #240]	; (8001e1c <HAL_RCC_ClockConfig+0x128>)
 8001d2a:	f012 0f04 	tst.w	r2, #4
 8001d2e:	d16c      	bne.n	8001e0a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d30:	0713      	lsls	r3, r2, #28
 8001d32:	d506      	bpl.n	8001d42 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d34:	686b      	ldr	r3, [r5, #4]
 8001d36:	6922      	ldr	r2, [r4, #16]
 8001d38:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d3c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d40:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d42:	f7ff ff9d 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001d46:	686b      	ldr	r3, [r5, #4]
 8001d48:	4a35      	ldr	r2, [pc, #212]	; (8001e20 <HAL_RCC_ClockConfig+0x12c>)
 8001d4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d4e:	5cd3      	ldrb	r3, [r2, r3]
 8001d50:	40d8      	lsrs	r0, r3
 8001d52:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <HAL_RCC_ClockConfig+0x130>)
 8001d54:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001d56:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <HAL_RCC_ClockConfig+0x134>)
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	f7ff f813 	bl	8000d84 <HAL_InitTick>
  return HAL_OK;
 8001d5e:	2000      	movs	r0, #0
 8001d60:	e7ce      	b.n	8001d00 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	f023 0307 	bic.w	r3, r3, #7
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6c:	6813      	ldr	r3, [r2, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	428b      	cmp	r3, r1
 8001d74:	d1c3      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xa>
 8001d76:	e7cb      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1c>
 8001d78:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d7e:	bf1e      	ittt	ne
 8001d80:	685a      	ldrne	r2, [r3, #4]
 8001d82:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001d86:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d88:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d8a:	bf42      	ittt	mi
 8001d8c:	685a      	ldrmi	r2, [r3, #4]
 8001d8e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001d92:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	68a0      	ldr	r0, [r4, #8]
 8001d98:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d9c:	4302      	orrs	r2, r0
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	e7b9      	b.n	8001d16 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	6862      	ldr	r2, [r4, #4]
 8001da4:	4e1d      	ldr	r6, [pc, #116]	; (8001e1c <HAL_RCC_ClockConfig+0x128>)
 8001da6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001daa:	d11a      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db0:	d0a5      	beq.n	8001cfe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db8:	f023 0303 	bic.w	r3, r3, #3
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001dc0:	f7ff f822 	bl	8000e08 <HAL_GetTick>
 8001dc4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	6873      	ldr	r3, [r6, #4]
 8001dc8:	6862      	ldr	r2, [r4, #4]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001dd2:	d0a2      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7ff f818 	bl	8000e08 <HAL_GetTick>
 8001dd8:	1bc0      	subs	r0, r0, r7
 8001dda:	4540      	cmp	r0, r8
 8001ddc:	d9f3      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001dde:	2003      	movs	r0, #3
 8001de0:	e78e      	b.n	8001d00 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de2:	2a02      	cmp	r2, #2
 8001de4:	d102      	bne.n	8001dec <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001dea:	e7e1      	b.n	8001db0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	f013 0f02 	tst.w	r3, #2
 8001df0:	e7de      	b.n	8001db0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	6813      	ldr	r3, [r2, #0]
 8001df4:	f023 0307 	bic.w	r3, r3, #7
 8001df8:	432b      	orrs	r3, r5
 8001dfa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfc:	6813      	ldr	r3, [r2, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	42ab      	cmp	r3, r5
 8001e04:	f47f af7b 	bne.w	8001cfe <HAL_RCC_ClockConfig+0xa>
 8001e08:	e78d      	b.n	8001d26 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0a:	686b      	ldr	r3, [r5, #4]
 8001e0c:	68e1      	ldr	r1, [r4, #12]
 8001e0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e12:	430b      	orrs	r3, r1
 8001e14:	606b      	str	r3, [r5, #4]
 8001e16:	e78b      	b.n	8001d30 <HAL_RCC_ClockConfig+0x3c>
 8001e18:	40022000 	.word	0x40022000
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	08005465 	.word	0x08005465
 8001e24:	20000008 	.word	0x20000008
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001e36:	5cd3      	ldrb	r3, [r2, r3]
 8001e38:	4a03      	ldr	r2, [pc, #12]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e3a:	6810      	ldr	r0, [r2, #0]
}
 8001e3c:	40d8      	lsrs	r0, r3
 8001e3e:	4770      	bx	lr
 8001e40:	40021000 	.word	0x40021000
 8001e44:	08005475 	.word	0x08005475
 8001e48:	20000008 	.word	0x20000008

08001e4c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	4a03      	ldr	r2, [pc, #12]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e5a:	6810      	ldr	r0, [r2, #0]
}
 8001e5c:	40d8      	lsrs	r0, r3
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08005475 	.word	0x08005475
 8001e68:	20000008 	.word	0x20000008

08001e6c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e6c:	6a03      	ldr	r3, [r0, #32]
{
 8001e6e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e78:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e7a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e7e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e82:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e84:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001e86:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001e8a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e8c:	4d0a      	ldr	r5, [pc, #40]	; (8001eb8 <TIM_OC1_SetConfig+0x4c>)
 8001e8e:	42a8      	cmp	r0, r5
 8001e90:	d10b      	bne.n	8001eaa <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e92:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e94:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001e98:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e9a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e9e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001ea2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ea8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eaa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001eac:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001eae:	684a      	ldr	r2, [r1, #4]
 8001eb0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eb2:	6203      	str	r3, [r0, #32]
}
 8001eb4:	bd70      	pop	{r4, r5, r6, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40012c00 	.word	0x40012c00

08001ebc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ebc:	6a03      	ldr	r3, [r0, #32]
{
 8001ebe:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ec6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ec8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001eca:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ecc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ece:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001ed2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ed4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001ed6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001eda:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ede:	4d0b      	ldr	r5, [pc, #44]	; (8001f0c <TIM_OC3_SetConfig+0x50>)
 8001ee0:	42a8      	cmp	r0, r5
 8001ee2:	d10d      	bne.n	8001f00 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ee4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001eea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001eee:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ef2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001ef6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001efc:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f00:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f02:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f04:	684a      	ldr	r2, [r1, #4]
 8001f06:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f08:	6203      	str	r3, [r0, #32]
}
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}
 8001f0c:	40012c00 	.word	0x40012c00

08001f10 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f10:	6a03      	ldr	r3, [r0, #32]
{
 8001f12:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f1e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f22:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f2a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f30:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f34:	4d06      	ldr	r5, [pc, #24]	; (8001f50 <TIM_OC4_SetConfig+0x40>)
 8001f36:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f38:	bf02      	ittt	eq
 8001f3a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f3c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f40:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f44:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f46:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f48:	684a      	ldr	r2, [r1, #4]
 8001f4a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f4c:	6203      	str	r3, [r0, #32]
}
 8001f4e:	bd30      	pop	{r4, r5, pc}
 8001f50:	40012c00 	.word	0x40012c00

08001f54 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001f54:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d120      	bne.n	8001f9e <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f62:	6803      	ldr	r3, [r0, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <HAL_TIM_Base_Start_IT+0x50>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00a      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x34>
 8001f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f76:	d007      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x34>
 8001f78:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d003      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x34>
 8001f80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d104      	bne.n	8001f92 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8e:	2a06      	cmp	r2, #6
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001f9a:	2000      	movs	r0, #0
}
 8001f9c:	4770      	bx	lr
    return HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40012c00 	.word	0x40012c00

08001fa8 <HAL_TIM_PWM_MspInit>:
 8001fa8:	4770      	bx	lr

08001faa <HAL_TIM_OC_DelayElapsedCallback>:
 8001faa:	4770      	bx	lr

08001fac <HAL_TIM_IC_CaptureCallback>:
 8001fac:	4770      	bx	lr

08001fae <HAL_TIM_PWM_PulseFinishedCallback>:
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIM_TriggerCallback>:
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fb2:	6803      	ldr	r3, [r0, #0]
{
 8001fb4:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fb6:	691a      	ldr	r2, [r3, #16]
{
 8001fb8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fba:	0791      	lsls	r1, r2, #30
 8001fbc:	d50e      	bpl.n	8001fdc <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	0792      	lsls	r2, r2, #30
 8001fc2:	d50b      	bpl.n	8001fdc <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc4:	f06f 0202 	mvn.w	r2, #2
 8001fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fca:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fcc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fce:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd0:	079b      	lsls	r3, r3, #30
 8001fd2:	d077      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd4:	f7ff ffea 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	0750      	lsls	r0, r2, #29
 8001fe2:	d510      	bpl.n	8002006 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	0751      	lsls	r1, r2, #29
 8001fe8:	d50d      	bpl.n	8002006 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fea:	f06f 0204 	mvn.w	r2, #4
 8001fee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ff0:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ff4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ffc:	d068      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	f7ff ffd5 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	2300      	movs	r3, #0
 8002004:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	0712      	lsls	r2, r2, #28
 800200c:	d50f      	bpl.n	800202e <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	0710      	lsls	r0, r2, #28
 8002012:	d50c      	bpl.n	800202e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002014:	f06f 0208 	mvn.w	r2, #8
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800201a:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800201c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800201e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002020:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002024:	d05a      	beq.n	80020dc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	f7ff ffc1 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	2300      	movs	r3, #0
 800202c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	06d2      	lsls	r2, r2, #27
 8002034:	d510      	bpl.n	8002058 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	06d0      	lsls	r0, r2, #27
 800203a:	d50d      	bpl.n	8002058 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800203c:	f06f 0210 	mvn.w	r2, #16
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002042:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002044:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002046:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002048:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800204c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800204e:	d04b      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002050:	f7ff ffac 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002054:	2300      	movs	r3, #0
 8002056:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	07d1      	lsls	r1, r2, #31
 800205e:	d508      	bpl.n	8002072 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	07d2      	lsls	r2, r2, #31
 8002064:	d505      	bpl.n	8002072 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002066:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800206a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800206c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800206e:	f000 fde3 	bl	8002c38 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	0610      	lsls	r0, r2, #24
 8002078:	d508      	bpl.n	800208c <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	0611      	lsls	r1, r2, #24
 800207e:	d505      	bpl.n	800208c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002080:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002084:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002086:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002088:	f000 faa5 	bl	80025d6 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	0652      	lsls	r2, r2, #25
 8002092:	d508      	bpl.n	80020a6 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	0650      	lsls	r0, r2, #25
 8002098:	d505      	bpl.n	80020a6 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800209a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800209e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80020a2:	f7ff ff85 	bl	8001fb0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	0691      	lsls	r1, r2, #26
 80020ac:	d522      	bpl.n	80020f4 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	0692      	lsls	r2, r2, #26
 80020b2:	d51f      	bpl.n	80020f4 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020b4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80020b8:	4620      	mov	r0, r4
}
 80020ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80020c0:	f000 ba88 	b.w	80025d4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c4:	f7ff ff71 	bl	8001faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	4620      	mov	r0, r4
 80020ca:	f7ff ff70 	bl	8001fae <HAL_TIM_PWM_PulseFinishedCallback>
 80020ce:	e783      	b.n	8001fd8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d0:	f7ff ff6b 	bl	8001faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	4620      	mov	r0, r4
 80020d6:	f7ff ff6a 	bl	8001fae <HAL_TIM_PWM_PulseFinishedCallback>
 80020da:	e792      	b.n	8002002 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020dc:	f7ff ff65 	bl	8001faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7ff ff64 	bl	8001fae <HAL_TIM_PWM_PulseFinishedCallback>
 80020e6:	e7a0      	b.n	800202a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e8:	f7ff ff5f 	bl	8001faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	4620      	mov	r0, r4
 80020ee:	f7ff ff5e 	bl	8001fae <HAL_TIM_PWM_PulseFinishedCallback>
 80020f2:	e7af      	b.n	8002054 <HAL_TIM_IRQHandler+0xa2>
}
 80020f4:	bd10      	pop	{r4, pc}
	...

080020f8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f8:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80020fa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020fc:	4290      	cmp	r0, r2
 80020fe:	d00a      	beq.n	8002116 <TIM_Base_SetConfig+0x1e>
 8002100:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002104:	d007      	beq.n	8002116 <TIM_Base_SetConfig+0x1e>
 8002106:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800210a:	4290      	cmp	r0, r2
 800210c:	d003      	beq.n	8002116 <TIM_Base_SetConfig+0x1e>
 800210e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002112:	4290      	cmp	r0, r2
 8002114:	d115      	bne.n	8002142 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002116:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800211c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800211e:	4a11      	ldr	r2, [pc, #68]	; (8002164 <TIM_Base_SetConfig+0x6c>)
 8002120:	4290      	cmp	r0, r2
 8002122:	d00a      	beq.n	800213a <TIM_Base_SetConfig+0x42>
 8002124:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002128:	d007      	beq.n	800213a <TIM_Base_SetConfig+0x42>
 800212a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800212e:	4290      	cmp	r0, r2
 8002130:	d003      	beq.n	800213a <TIM_Base_SetConfig+0x42>
 8002132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002136:	4290      	cmp	r0, r2
 8002138:	d103      	bne.n	8002142 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800213a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800213c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002140:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002142:	694a      	ldr	r2, [r1, #20]
 8002144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002148:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800214a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800214c:	688b      	ldr	r3, [r1, #8]
 800214e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002150:	680b      	ldr	r3, [r1, #0]
 8002152:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <TIM_Base_SetConfig+0x6c>)
 8002156:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002158:	bf04      	itt	eq
 800215a:	690b      	ldreq	r3, [r1, #16]
 800215c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800215e:	2301      	movs	r3, #1
 8002160:	6143      	str	r3, [r0, #20]
}
 8002162:	4770      	bx	lr
 8002164:	40012c00 	.word	0x40012c00

08002168 <HAL_TIM_Base_Init>:
{
 8002168:	b510      	push	{r4, lr}
  if (htim == NULL)
 800216a:	4604      	mov	r4, r0
 800216c:	b330      	cbz	r0, 80021bc <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800216e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002172:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002176:	b91b      	cbnz	r3, 8002180 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002178:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800217c:	f000 ffd8 	bl	8003130 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002182:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002184:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002188:	1d21      	adds	r1, r4, #4
 800218a:	f7ff ffb5 	bl	80020f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800218e:	2301      	movs	r3, #1
  return HAL_OK;
 8002190:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002192:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002196:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800219a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800219e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80021a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80021b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80021b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80021ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021bc:	2001      	movs	r0, #1
 80021be:	e7fc      	b.n	80021ba <HAL_TIM_Base_Init+0x52>

080021c0 <HAL_TIM_PWM_Init>:
{
 80021c0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80021c2:	4604      	mov	r4, r0
 80021c4:	b330      	cbz	r0, 8002214 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80021c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021ce:	b91b      	cbnz	r3, 80021d8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80021d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80021d4:	f7ff fee8 	bl	8001fa8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80021d8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021da:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e0:	1d21      	adds	r1, r4, #4
 80021e2:	f7ff ff89 	bl	80020f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e6:	2301      	movs	r3, #1
  return HAL_OK;
 80021e8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80021f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80021f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80021fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002206:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800220a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800220e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002212:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002214:	2001      	movs	r0, #1
 8002216:	e7fc      	b.n	8002212 <HAL_TIM_PWM_Init+0x52>

08002218 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002218:	6a03      	ldr	r3, [r0, #32]
{
 800221a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800221c:	f023 0310 	bic.w	r3, r3, #16
 8002220:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002222:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002224:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002226:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002228:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800222a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800222e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002232:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002234:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002238:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800223c:	4d0b      	ldr	r5, [pc, #44]	; (800226c <TIM_OC2_SetConfig+0x54>)
 800223e:	42a8      	cmp	r0, r5
 8002240:	d10d      	bne.n	800225e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002242:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002248:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800224c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002250:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002254:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800225a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800225e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002260:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002262:	684a      	ldr	r2, [r1, #4]
 8002264:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002266:	6203      	str	r3, [r0, #32]
}
 8002268:	bd70      	pop	{r4, r5, r6, pc}
 800226a:	bf00      	nop
 800226c:	40012c00 	.word	0x40012c00

08002270 <HAL_TIM_PWM_ConfigChannel>:
{
 8002270:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002272:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002276:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002278:	2b01      	cmp	r3, #1
 800227a:	d054      	beq.n	8002326 <HAL_TIM_PWM_ConfigChannel+0xb6>
 800227c:	2301      	movs	r3, #1
 800227e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002282:	2a0c      	cmp	r2, #12
 8002284:	d818      	bhi.n	80022b8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002286:	e8df f002 	tbb	[pc, r2]
 800228a:	1707      	.short	0x1707
 800228c:	171b1717 	.word	0x171b1717
 8002290:	172c1717 	.word	0x172c1717
 8002294:	1717      	.short	0x1717
 8002296:	3d          	.byte	0x3d
 8002297:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002298:	6800      	ldr	r0, [r0, #0]
 800229a:	f7ff fde7 	bl	8001e6c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800229e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	f042 0208 	orr.w	r2, r2, #8
 80022a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022aa:	699a      	ldr	r2, [r3, #24]
 80022ac:	f022 0204 	bic.w	r2, r2, #4
 80022b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022b6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80022be:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022c0:	6800      	ldr	r0, [r0, #0]
 80022c2:	f7ff ffa9 	bl	8002218 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022c6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022c8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022ca:	699a      	ldr	r2, [r3, #24]
 80022cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022d2:	699a      	ldr	r2, [r3, #24]
 80022d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022e0:	e7e9      	b.n	80022b6 <HAL_TIM_PWM_ConfigChannel+0x46>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022e2:	6800      	ldr	r0, [r0, #0]
 80022e4:	f7ff fdea 	bl	8001ebc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022ea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	f042 0208 	orr.w	r2, r2, #8
 80022f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	f022 0204 	bic.w	r2, r2, #4
 80022fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002300:	61da      	str	r2, [r3, #28]
      break;
 8002302:	e7d9      	b.n	80022b8 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002304:	6800      	ldr	r0, [r0, #0]
 8002306:	f7ff fe03 	bl	8001f10 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800230a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800230c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002324:	e7ec      	b.n	8002300 <HAL_TIM_PWM_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 8002326:	2002      	movs	r0, #2
 8002328:	e7c9      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x4e>

0800232a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800232a:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800232c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800232e:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002330:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002334:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002338:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800233a:	6083      	str	r3, [r0, #8]
}
 800233c:	bd10      	pop	{r4, pc}

0800233e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800233e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002342:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002344:	2b01      	cmp	r3, #1
{
 8002346:	4604      	mov	r4, r0
 8002348:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800234c:	d019      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0x44>
 800234e:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002354:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002356:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800235a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800235c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002360:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002364:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002366:	680b      	ldr	r3, [r1, #0]
 8002368:	2b40      	cmp	r3, #64	; 0x40
 800236a:	d065      	beq.n	8002438 <HAL_TIM_ConfigClockSource+0xfa>
 800236c:	d815      	bhi.n	800239a <HAL_TIM_ConfigClockSource+0x5c>
 800236e:	2b10      	cmp	r3, #16
 8002370:	d00c      	beq.n	800238c <HAL_TIM_ConfigClockSource+0x4e>
 8002372:	d807      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x46>
 8002374:	b153      	cbz	r3, 800238c <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002376:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002378:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800237a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800237e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002382:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002384:	2b20      	cmp	r3, #32
 8002386:	d001      	beq.n	800238c <HAL_TIM_ConfigClockSource+0x4e>
 8002388:	2b30      	cmp	r3, #48	; 0x30
 800238a:	d1f4      	bne.n	8002376 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800238c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800238e:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002392:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002396:	4313      	orrs	r3, r2
 8002398:	e01a      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800239a:	2b60      	cmp	r3, #96	; 0x60
 800239c:	d034      	beq.n	8002408 <HAL_TIM_ConfigClockSource+0xca>
 800239e:	d819      	bhi.n	80023d4 <HAL_TIM_ConfigClockSource+0x96>
 80023a0:	2b50      	cmp	r3, #80	; 0x50
 80023a2:	d1e8      	bne.n	8002376 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a4:	684a      	ldr	r2, [r1, #4]
 80023a6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80023a8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023aa:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023ac:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b0:	f025 0501 	bic.w	r5, r5, #1
 80023b4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023b6:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80023b8:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023be:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80023c2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80023c4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80023c6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023cc:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80023d0:	6083      	str	r3, [r0, #8]
 80023d2:	e7d0      	b.n	8002376 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80023d4:	2b70      	cmp	r3, #112	; 0x70
 80023d6:	d00c      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0xb4>
 80023d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023dc:	d1cb      	bne.n	8002376 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80023de:	68cb      	ldr	r3, [r1, #12]
 80023e0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80023e4:	f7ff ffa1 	bl	800232a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	6893      	ldr	r3, [r2, #8]
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f0:	e008      	b.n	8002404 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80023f2:	68cb      	ldr	r3, [r1, #12]
 80023f4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80023f8:	f7ff ff97 	bl	800232a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023fc:	6822      	ldr	r2, [r4, #0]
 80023fe:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002400:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002404:	6093      	str	r3, [r2, #8]
      break;
 8002406:	e7b6      	b.n	8002376 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002408:	684d      	ldr	r5, [r1, #4]
 800240a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240c:	6a01      	ldr	r1, [r0, #32]
 800240e:	f021 0110 	bic.w	r1, r1, #16
 8002412:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002414:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002416:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002418:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800241c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002420:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002424:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002428:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800242a:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800242c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800242e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002432:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002436:	e7cb      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002438:	684a      	ldr	r2, [r1, #4]
 800243a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800243c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800243e:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002440:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002444:	f025 0501 	bic.w	r5, r5, #1
 8002448:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800244a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800244c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800244e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002452:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002456:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002458:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800245a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800245c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002460:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002464:	e7b4      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x92>

08002466 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002466:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002468:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800246a:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800246c:	f001 011f 	and.w	r1, r1, #31
 8002470:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002472:	ea23 0304 	bic.w	r3, r3, r4
 8002476:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002478:	6a03      	ldr	r3, [r0, #32]
 800247a:	408a      	lsls	r2, r1
 800247c:	431a      	orrs	r2, r3
 800247e:	6202      	str	r2, [r0, #32]
}
 8002480:	bd10      	pop	{r4, pc}
	...

08002484 <HAL_TIM_OC_Start>:
{
 8002484:	b510      	push	{r4, lr}
 8002486:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002488:	b929      	cbnz	r1, 8002496 <HAL_TIM_OC_Start+0x12>
 800248a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800248e:	2b01      	cmp	r3, #1
 8002490:	d01d      	beq.n	80024ce <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 8002492:	2001      	movs	r0, #1
}
 8002494:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002496:	2904      	cmp	r1, #4
 8002498:	d107      	bne.n	80024aa <HAL_TIM_OC_Start+0x26>
 800249a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d1f7      	bne.n	8002492 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024a2:	2302      	movs	r3, #2
 80024a4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80024a8:	e014      	b.n	80024d4 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024aa:	2908      	cmp	r1, #8
 80024ac:	d107      	bne.n	80024be <HAL_TIM_OC_Start+0x3a>
 80024ae:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d1ed      	bne.n	8002492 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024b6:	2302      	movs	r3, #2
 80024b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80024bc:	e00a      	b.n	80024d4 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d1e5      	bne.n	8002492 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024c6:	2302      	movs	r3, #2
 80024c8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80024cc:	e002      	b.n	80024d4 <HAL_TIM_OC_Start+0x50>
 80024ce:	2302      	movs	r3, #2
 80024d0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024d4:	2201      	movs	r2, #1
 80024d6:	6820      	ldr	r0, [r4, #0]
 80024d8:	f7ff ffc5 	bl	8002466 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <HAL_TIM_OC_Start+0x94>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d10a      	bne.n	80024fa <HAL_TIM_OC_Start+0x76>
    __HAL_TIM_MOE_ENABLE(htim);
 80024e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f2:	2a06      	cmp	r2, #6
 80024f4:	d10b      	bne.n	800250e <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 80024f6:	2000      	movs	r0, #0
 80024f8:	e7cc      	b.n	8002494 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fe:	d0f5      	beq.n	80024ec <HAL_TIM_OC_Start+0x68>
 8002500:	4a06      	ldr	r2, [pc, #24]	; (800251c <HAL_TIM_OC_Start+0x98>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d0f2      	beq.n	80024ec <HAL_TIM_OC_Start+0x68>
 8002506:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800250a:	4293      	cmp	r3, r2
 800250c:	d0ee      	beq.n	80024ec <HAL_TIM_OC_Start+0x68>
    __HAL_TIM_ENABLE(htim);
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	e7ee      	b.n	80024f6 <HAL_TIM_OC_Start+0x72>
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40000400 	.word	0x40000400

08002520 <HAL_TIM_PWM_Start>:
 8002520:	f7ff bfb0 	b.w	8002484 <HAL_TIM_OC_Start>

08002524 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002524:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002528:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800252a:	2b01      	cmp	r3, #1
 800252c:	f04f 0302 	mov.w	r3, #2
 8002530:	d025      	beq.n	800257e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8002532:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002538:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800253a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800253c:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 800253e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8002542:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002546:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002548:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800254a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254c:	4c0d      	ldr	r4, [pc, #52]	; (8002584 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800254e:	42a3      	cmp	r3, r4
 8002550:	d00a      	beq.n	8002568 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002556:	d007      	beq.n	8002568 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002558:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800255c:	42a3      	cmp	r3, r4
 800255e:	d003      	beq.n	8002568 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002560:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002564:	42a3      	cmp	r3, r4
 8002566:	d104      	bne.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002568:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800256a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800256e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002570:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002572:	2301      	movs	r3, #1
 8002574:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002578:	2300      	movs	r3, #0
 800257a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800257e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002580:	bd30      	pop	{r4, r5, pc}
 8002582:	bf00      	nop
 8002584:	40012c00 	.word	0x40012c00

08002588 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002588:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800258c:	2b01      	cmp	r3, #1
 800258e:	d01f      	beq.n	80025d0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002590:	68cb      	ldr	r3, [r1, #12]
 8002592:	688a      	ldr	r2, [r1, #8]
 8002594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002598:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800259a:	684a      	ldr	r2, [r1, #4]
 800259c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80025a2:	680a      	ldr	r2, [r1, #0]
 80025a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80025aa:	690a      	ldr	r2, [r1, #16]
 80025ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80025b2:	694a      	ldr	r2, [r1, #20]
 80025b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025ba:	69ca      	ldr	r2, [r1, #28]
 80025bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c0:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80025c2:	6802      	ldr	r2, [r0, #0]
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80025c6:	2300      	movs	r3, #0
 80025c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80025cc:	4618      	mov	r0, r3
 80025ce:	4770      	bx	lr
  __HAL_LOCK(htim);
 80025d0:	2002      	movs	r0, #2
}
 80025d2:	4770      	bx	lr

080025d4 <HAL_TIMEx_CommutCallback>:
 80025d4:	4770      	bx	lr

080025d6 <HAL_TIMEx_BreakCallback>:
 80025d6:	4770      	bx	lr

080025d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d8:	b510      	push	{r4, lr}
 80025da:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025dc:	6803      	ldr	r3, [r0, #0]
 80025de:	68c1      	ldr	r1, [r0, #12]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80025e6:	430a      	orrs	r2, r1
 80025e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025ea:	6882      	ldr	r2, [r0, #8]
 80025ec:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80025ee:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025f0:	4302      	orrs	r2, r0
 80025f2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80025f4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80025f8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025fc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80025fe:	430a      	orrs	r2, r1
 8002600:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	69a1      	ldr	r1, [r4, #24]
 8002606:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800260a:	430a      	orrs	r2, r1
 800260c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800260e:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <UART_SetConfig+0x70>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d115      	bne.n	8002640 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002614:	f7ff fc1a 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002618:	2319      	movs	r3, #25
 800261a:	4358      	muls	r0, r3
 800261c:	6863      	ldr	r3, [r4, #4]
 800261e:	2264      	movs	r2, #100	; 0x64
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	fbb0 f0f3 	udiv	r0, r0, r3
 8002626:	fbb0 f1f2 	udiv	r1, r0, r2
 800262a:	fb02 0311 	mls	r3, r2, r1, r0
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	3332      	adds	r3, #50	; 0x32
 8002632:	fbb3 f3f2 	udiv	r3, r3, r2
 8002636:	6824      	ldr	r4, [r4, #0]
 8002638:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800263c:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 800263e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002640:	f7ff fbf4 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002644:	e7e8      	b.n	8002618 <UART_SetConfig+0x40>
 8002646:	bf00      	nop
 8002648:	40013800 	.word	0x40013800

0800264c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	4604      	mov	r4, r0
 8002650:	460e      	mov	r6, r1
 8002652:	4617      	mov	r7, r2
 8002654:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002656:	6821      	ldr	r1, [r4, #0]
 8002658:	680b      	ldr	r3, [r1, #0]
 800265a:	ea36 0303 	bics.w	r3, r6, r3
 800265e:	d101      	bne.n	8002664 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002660:	2000      	movs	r0, #0
 8002662:	e014      	b.n	800268e <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8002664:	1c6b      	adds	r3, r5, #1
 8002666:	d0f7      	beq.n	8002658 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002668:	b995      	cbnz	r5, 8002690 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800266a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800266c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002674:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800267e:	2320      	movs	r3, #32
 8002680:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002684:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002688:	2300      	movs	r3, #0
 800268a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 800268e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002690:	f7fe fbba 	bl	8000e08 <HAL_GetTick>
 8002694:	1bc0      	subs	r0, r0, r7
 8002696:	4285      	cmp	r5, r0
 8002698:	d2dd      	bcs.n	8002656 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800269a:	e7e6      	b.n	800266a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800269c <HAL_UART_Init>:
{
 800269c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800269e:	4604      	mov	r4, r0
 80026a0:	b340      	cbz	r0, 80026f4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80026a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80026a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026aa:	b91b      	cbnz	r3, 80026b4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80026ac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80026b0:	f000 fd96 	bl	80031e0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80026b4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80026b6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80026bc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80026be:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80026c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026c4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80026c6:	f7ff ff87 	bl	80025d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ca:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026cc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026dc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80026e6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026ee:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80026f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80026f4:	2001      	movs	r0, #1
 80026f6:	e7fc      	b.n	80026f2 <HAL_UART_Init+0x56>

080026f8 <HAL_UART_Transmit>:
{
 80026f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026fc:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80026fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002702:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002704:	2b20      	cmp	r3, #32
{
 8002706:	460e      	mov	r6, r1
 8002708:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800270a:	d14a      	bne.n	80027a2 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 800270c:	2900      	cmp	r1, #0
 800270e:	d046      	beq.n	800279e <HAL_UART_Transmit+0xa6>
 8002710:	2a00      	cmp	r2, #0
 8002712:	d044      	beq.n	800279e <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002714:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002718:	2b01      	cmp	r3, #1
 800271a:	d042      	beq.n	80027a2 <HAL_UART_Transmit+0xaa>
 800271c:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271e:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8002720:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002724:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002726:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002728:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800272c:	f7fe fb6c 	bl	8000e08 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002730:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002732:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8002738:	f8a4 9024 	strh.w	r9, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800273c:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002740:	d103      	bne.n	800274a <HAL_UART_Transmit+0x52>
 8002742:	6923      	ldr	r3, [r4, #16]
 8002744:	b90b      	cbnz	r3, 800274a <HAL_UART_Transmit+0x52>
 8002746:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002748:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800274a:	2300      	movs	r3, #0
 800274c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8002750:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002752:	b29b      	uxth	r3, r3
 8002754:	b953      	cbnz	r3, 800276c <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002756:	4643      	mov	r3, r8
 8002758:	463a      	mov	r2, r7
 800275a:	2140      	movs	r1, #64	; 0x40
 800275c:	4620      	mov	r0, r4
 800275e:	f7ff ff75 	bl	800264c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002762:	b950      	cbnz	r0, 800277a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002764:	2320      	movs	r3, #32
 8002766:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800276a:	e007      	b.n	800277c <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800276c:	4643      	mov	r3, r8
 800276e:	463a      	mov	r2, r7
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	4620      	mov	r0, r4
 8002774:	f7ff ff6a 	bl	800264c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002778:	b110      	cbz	r0, 8002780 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800277a:	2003      	movs	r0, #3
}
 800277c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002780:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002782:	b94e      	cbnz	r6, 8002798 <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002784:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002788:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800278c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800278e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002790:	3b01      	subs	r3, #1
 8002792:	b29b      	uxth	r3, r3
 8002794:	84e3      	strh	r3, [r4, #38]	; 0x26
 8002796:	e7db      	b.n	8002750 <HAL_UART_Transmit+0x58>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002798:	f816 3b01 	ldrb.w	r3, [r6], #1
 800279c:	e7f6      	b.n	800278c <HAL_UART_Transmit+0x94>
      return  HAL_ERROR;
 800279e:	2001      	movs	r0, #1
 80027a0:	e7ec      	b.n	800277c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80027a2:	2002      	movs	r0, #2
 80027a4:	e7ea      	b.n	800277c <HAL_UART_Transmit+0x84>
	...

080027a8 <clearBuffer>:
//variables del control
volatile float u;

void clearBuffer()
{
	for(int f = 0; f < sizeof(buffer); f++){
 80027a8:	2300      	movs	r3, #0
		buffer[f] = '\0';
 80027aa:	4619      	mov	r1, r3
 80027ac:	4a02      	ldr	r2, [pc, #8]	; (80027b8 <clearBuffer+0x10>)
 80027ae:	54d1      	strb	r1, [r2, r3]
	for(int f = 0; f < sizeof(buffer); f++){
 80027b0:	3301      	adds	r3, #1
 80027b2:	2b19      	cmp	r3, #25
 80027b4:	d1fb      	bne.n	80027ae <clearBuffer+0x6>
	}
}
 80027b6:	4770      	bx	lr
 80027b8:	200002e4 	.word	0x200002e4

080027bc <MPU6050_Init>:

void MPU6050_Init (void)
{
 80027bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80027be:	2401      	movs	r4, #1
 80027c0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
{
 80027c4:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80027c6:	f10d 0316 	add.w	r3, sp, #22
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80027d0:	4623      	mov	r3, r4
 80027d2:	2275      	movs	r2, #117	; 0x75
 80027d4:	21d0      	movs	r1, #208	; 0xd0
 80027d6:	481c      	ldr	r0, [pc, #112]	; (8002848 <MPU6050_Init+0x8c>)
 80027d8:	f7fe ff76 	bl	80016c8 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80027dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80027e0:	2b68      	cmp	r3, #104	; 0x68
 80027e2:	d12e      	bne.n	8002842 <MPU6050_Init+0x86>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80027e4:	2700      	movs	r7, #0
 80027e6:	ad06      	add	r5, sp, #24
 80027e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80027ec:	4623      	mov	r3, r4
 80027ee:	226b      	movs	r2, #107	; 0x6b
 80027f0:	21d0      	movs	r1, #208	; 0xd0
 80027f2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80027f6:	9500      	str	r5, [sp, #0]
 80027f8:	4813      	ldr	r0, [pc, #76]	; (8002848 <MPU6050_Init+0x8c>)
 80027fa:	f7fe fed5 	bl	80015a8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80027fe:	2307      	movs	r3, #7
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8002800:	2219      	movs	r2, #25
		Data = 0x07;
 8002802:	f88d 3017 	strb.w	r3, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8002806:	21d0      	movs	r1, #208	; 0xd0
 8002808:	4623      	mov	r3, r4
 800280a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800280e:	9500      	str	r5, [sp, #0]
 8002810:	480d      	ldr	r0, [pc, #52]	; (8002848 <MPU6050_Init+0x8c>)
 8002812:	f7fe fec9 	bl	80015a8 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8002816:	4623      	mov	r3, r4
 8002818:	221c      	movs	r2, #28
 800281a:	21d0      	movs	r1, #208	; 0xd0
 800281c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002820:	9500      	str	r5, [sp, #0]
 8002822:	4809      	ldr	r0, [pc, #36]	; (8002848 <MPU6050_Init+0x8c>)
		Data = 0x00;
 8002824:	f88d 7017 	strb.w	r7, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8002828:	f7fe febe 	bl	80015a8 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800282c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002830:	9500      	str	r5, [sp, #0]
 8002832:	4623      	mov	r3, r4
 8002834:	221b      	movs	r2, #27
 8002836:	21d0      	movs	r1, #208	; 0xd0
 8002838:	4803      	ldr	r0, [pc, #12]	; (8002848 <MPU6050_Init+0x8c>)
		Data = 0x00;
 800283a:	f88d 7017 	strb.w	r7, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800283e:	f7fe feb3 	bl	80015a8 <HAL_I2C_Mem_Write>
	}

}
 8002842:	b007      	add	sp, #28
 8002844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002846:	bf00      	nop
 8002848:	20000224 	.word	0x20000224
 800284c:	00000000 	.word	0x00000000

08002850 <MPU6050_Read_Accel>:
{
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002850:	2306      	movs	r3, #6
 8002852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
{
 8002856:	b530      	push	{r4, r5, lr}
 8002858:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800285a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800285e:	ab04      	add	r3, sp, #16
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	223b      	movs	r2, #59	; 0x3b
 8002864:	2301      	movs	r3, #1
 8002866:	21d0      	movs	r1, #208	; 0xd0
 8002868:	4823      	ldr	r0, [pc, #140]	; (80028f8 <MPU6050_Read_Accel+0xa8>)
 800286a:	f7fe ff2d 	bl	80016c8 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800286e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002872:	f89d 0011 	ldrb.w	r0, [sp, #17]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002876:	f89d 5013 	ldrb.w	r5, [sp, #19]
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800287a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800287e:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <MPU6050_Read_Accel+0xac>)
 8002880:	b200      	sxth	r0, r0
 8002882:	8018      	strh	r0, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002884:	f89d 3012 	ldrb.w	r3, [sp, #18]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002888:	f89d 4015 	ldrb.w	r4, [sp, #21]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800288c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <MPU6050_Read_Accel+0xb0>)
 8002892:	b22d      	sxth	r5, r5
 8002894:	801d      	strh	r5, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002896:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800289a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <MPU6050_Read_Accel+0xb4>)
 80028a0:	b224      	sxth	r4, r4
 80028a2:	801c      	strh	r4, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 80028a4:	f7fd fdae 	bl	8000404 <__aeabi_i2d>
 80028a8:	2200      	movs	r2, #0
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <MPU6050_Read_Accel+0xb8>)
 80028ac:	f7fd fe14 	bl	80004d8 <__aeabi_dmul>
 80028b0:	f7fe f8ea 	bl	8000a88 <__aeabi_d2f>
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <MPU6050_Read_Accel+0xbc>)
 80028b6:	6018      	str	r0, [r3, #0]
	Ay = (0.0040048828125)*Accel_Y_RAW;
 80028b8:	4628      	mov	r0, r5
 80028ba:	f7fd fda3 	bl	8000404 <__aeabi_i2d>
 80028be:	a30c      	add	r3, pc, #48	; (adr r3, 80028f0 <MPU6050_Read_Accel+0xa0>)
 80028c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c4:	f7fd fe08 	bl	80004d8 <__aeabi_dmul>
 80028c8:	f7fe f8de 	bl	8000a88 <__aeabi_d2f>
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <MPU6050_Read_Accel+0xc0>)
 80028ce:	6018      	str	r0, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 80028d0:	4620      	mov	r0, r4
 80028d2:	f7fd fd97 	bl	8000404 <__aeabi_i2d>
 80028d6:	2200      	movs	r2, #0
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <MPU6050_Read_Accel+0xb8>)
 80028da:	f7fd fdfd 	bl	80004d8 <__aeabi_dmul>
 80028de:	f7fe f8d3 	bl	8000a88 <__aeabi_d2f>
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <MPU6050_Read_Accel+0xc4>)
 80028e4:	6018      	str	r0, [r3, #0]
}
 80028e6:	b007      	add	sp, #28
 80028e8:	bd30      	pop	{r4, r5, pc}
 80028ea:	bf00      	nop
 80028ec:	f3af 8000 	nop.w
 80028f0:	8b439581 	.word	0x8b439581
 80028f4:	3f70676c 	.word	0x3f70676c
 80028f8:	20000224 	.word	0x20000224
 80028fc:	200001f8 	.word	0x200001f8
 8002900:	200001fa 	.word	0x200001fa
 8002904:	200001fc 	.word	0x200001fc
 8002908:	3f100000 	.word	0x3f100000
 800290c:	20000308 	.word	0x20000308
 8002910:	2000028c 	.word	0x2000028c
 8002914:	20000358 	.word	0x20000358

08002918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002918:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800291a:	2414      	movs	r4, #20
{
 800291c:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800291e:	4622      	mov	r2, r4
 8002920:	2100      	movs	r1, #0
 8002922:	a808      	add	r0, sp, #32
 8002924:	f000 fd3e 	bl	80033a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002928:	4622      	mov	r2, r4
 800292a:	2100      	movs	r1, #0
 800292c:	a801      	add	r0, sp, #4
 800292e:	f000 fd39 	bl	80033a4 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002932:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002934:	2201      	movs	r2, #1
 8002936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800293a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800293e:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002942:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002946:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002948:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800294a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800294c:	f7fe fffa 	bl	8001944 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002950:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002952:	2280      	movs	r2, #128	; 0x80
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002954:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002958:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800295a:	4621      	mov	r1, r4
 800295c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800295e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002962:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002964:	f7ff f9c6 	bl	8001cf4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002968:	b010      	add	sp, #64	; 0x40
 800296a:	bd10      	pop	{r4, pc}

0800296c <main>:
	I1_k = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	4a8d      	ldr	r2, [pc, #564]	; (8002ba4 <main+0x238>)
{
 8002970:	b580      	push	{r7, lr}
	I1_k = 0;
 8002972:	6013      	str	r3, [r2, #0]
	I1_k_1 = 0;
 8002974:	4a8c      	ldr	r2, [pc, #560]	; (8002ba8 <main+0x23c>)
{
 8002976:	b09a      	sub	sp, #104	; 0x68
	I1_k_1 = 0;
 8002978:	6013      	str	r3, [r2, #0]
	I1_k_2 = 0;
 800297a:	4a8c      	ldr	r2, [pc, #560]	; (8002bac <main+0x240>)
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800297c:	2400      	movs	r4, #0
	I1_k_2 = 0;
 800297e:	6013      	str	r3, [r2, #0]
	O1_k = 0;
 8002980:	4a8b      	ldr	r2, [pc, #556]	; (8002bb0 <main+0x244>)

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002982:	2610      	movs	r6, #16
	O1_k = 0;
 8002984:	6013      	str	r3, [r2, #0]
	O1_k_1 = 0;
 8002986:	4a8b      	ldr	r2, [pc, #556]	; (8002bb4 <main+0x248>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002988:	4d8b      	ldr	r5, [pc, #556]	; (8002bb8 <main+0x24c>)
	O1_k_1 = 0;
 800298a:	6013      	str	r3, [r2, #0]
	O1_k_2 = 0;
 800298c:	4a8b      	ldr	r2, [pc, #556]	; (8002bbc <main+0x250>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800298e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	O1_k_2 = 0;
 8002992:	6013      	str	r3, [r2, #0]
	I2_k = 0;
 8002994:	4a8a      	ldr	r2, [pc, #552]	; (8002bc0 <main+0x254>)
	  sprintf(buffer,"%.4f, %.4f\n\r",Ay,O);
 8002996:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8002c2c <main+0x2c0>
	I2_k = 0;
 800299a:	6013      	str	r3, [r2, #0]
	I2_k_1 = 0;
 800299c:	4a89      	ldr	r2, [pc, #548]	; (8002bc4 <main+0x258>)
	  sprintf(buffer,"%.4f, %.4f\n\r",Ay,O);
 800299e:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8002c30 <main+0x2c4>
	I2_k_1 = 0;
 80029a2:	6013      	str	r3, [r2, #0]
	I2_k_2 = 0;
 80029a4:	4a88      	ldr	r2, [pc, #544]	; (8002bc8 <main+0x25c>)
 80029a6:	6013      	str	r3, [r2, #0]
	O2_k = 0;
 80029a8:	4a88      	ldr	r2, [pc, #544]	; (8002bcc <main+0x260>)
 80029aa:	6013      	str	r3, [r2, #0]
	O2_k_1 = 0;
 80029ac:	4a88      	ldr	r2, [pc, #544]	; (8002bd0 <main+0x264>)
 80029ae:	6013      	str	r3, [r2, #0]
	O2_k_2 = 0;
 80029b0:	4a88      	ldr	r2, [pc, #544]	; (8002bd4 <main+0x268>)
 80029b2:	6013      	str	r3, [r2, #0]
	I3_k = 0;
 80029b4:	4a88      	ldr	r2, [pc, #544]	; (8002bd8 <main+0x26c>)
 80029b6:	6013      	str	r3, [r2, #0]
	I3_k_1 = 0;
 80029b8:	4a88      	ldr	r2, [pc, #544]	; (8002bdc <main+0x270>)
 80029ba:	6013      	str	r3, [r2, #0]
	I3_k_2 = 0;
 80029bc:	4a88      	ldr	r2, [pc, #544]	; (8002be0 <main+0x274>)
 80029be:	6013      	str	r3, [r2, #0]
	O3_k = 0;
 80029c0:	4a88      	ldr	r2, [pc, #544]	; (8002be4 <main+0x278>)
 80029c2:	6013      	str	r3, [r2, #0]
	O3_k_1 = 0;
 80029c4:	4a88      	ldr	r2, [pc, #544]	; (8002be8 <main+0x27c>)
 80029c6:	6013      	str	r3, [r2, #0]
	O3_k_2 = 0;
 80029c8:	4a88      	ldr	r2, [pc, #544]	; (8002bec <main+0x280>)
 80029ca:	6013      	str	r3, [r2, #0]
	I4_k = 0;
 80029cc:	4a88      	ldr	r2, [pc, #544]	; (8002bf0 <main+0x284>)
 80029ce:	6013      	str	r3, [r2, #0]
	I4_k_1 = 0;
 80029d0:	4a88      	ldr	r2, [pc, #544]	; (8002bf4 <main+0x288>)
 80029d2:	6013      	str	r3, [r2, #0]
	I4_k_2 = 0;
 80029d4:	4a88      	ldr	r2, [pc, #544]	; (8002bf8 <main+0x28c>)
 80029d6:	6013      	str	r3, [r2, #0]
	O4_k = 0;
 80029d8:	4a88      	ldr	r2, [pc, #544]	; (8002bfc <main+0x290>)
 80029da:	6013      	str	r3, [r2, #0]
	O4_k_1 = 0;
 80029dc:	4a88      	ldr	r2, [pc, #544]	; (8002c00 <main+0x294>)
 80029de:	6013      	str	r3, [r2, #0]
	O4_k_2 = 0;
 80029e0:	4a88      	ldr	r2, [pc, #544]	; (8002c04 <main+0x298>)
 80029e2:	6013      	str	r3, [r2, #0]
  HAL_Init();
 80029e4:	f7fe f9f2 	bl	8000dcc <HAL_Init>
  SystemClock_Config();
 80029e8:	f7ff ff96 	bl	8002918 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ec:	4b86      	ldr	r3, [pc, #536]	; (8002c08 <main+0x29c>)
  hi2c1.Instance = I2C1;
 80029ee:	4887      	ldr	r0, [pc, #540]	; (8002c0c <main+0x2a0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	f042 0220 	orr.w	r2, r2, #32
 80029f6:	619a      	str	r2, [r3, #24]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	f002 0220 	and.w	r2, r2, #32
 80029fe:	9202      	str	r2, [sp, #8]
 8002a00:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	699a      	ldr	r2, [r3, #24]
 8002a04:	f042 0204 	orr.w	r2, r2, #4
 8002a08:	619a      	str	r2, [r3, #24]
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	f002 0204 	and.w	r2, r2, #4
 8002a10:	9203      	str	r2, [sp, #12]
 8002a12:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	f042 0208 	orr.w	r2, r2, #8
 8002a1a:	619a      	str	r2, [r3, #24]
 8002a1c:	699b      	ldr	r3, [r3, #24]
  hi2c1.Init.ClockSpeed = 400000;
 8002a1e:	4a7c      	ldr	r2, [pc, #496]	; (8002c10 <main+0x2a4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	9304      	str	r3, [sp, #16]
 8002a26:	9b04      	ldr	r3, [sp, #16]
  hi2c1.Init.ClockSpeed = 400000;
 8002a28:	4b7a      	ldr	r3, [pc, #488]	; (8002c14 <main+0x2a8>)
  hi2c1.Init.OwnAddress1 = 0;
 8002a2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 8002a2e:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a36:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a3a:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a3e:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a40:	f7fe fd06 	bl	8001450 <HAL_I2C_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a44:	4632      	mov	r2, r6
 8002a46:	4621      	mov	r1, r4
 8002a48:	a807      	add	r0, sp, #28
 8002a4a:	f000 fcab 	bl	80033a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a4e:	4621      	mov	r1, r4
 8002a50:	221c      	movs	r2, #28
 8002a52:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a54:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a58:	f000 fca4 	bl	80033a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	4621      	mov	r1, r4
 8002a60:	a812      	add	r0, sp, #72	; 0x48
 8002a62:	f000 fc9f 	bl	80033a4 <memset>
  htim1.Instance = TIM1;
 8002a66:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <main+0x2ac>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002a68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  htim1.Init.Prescaler = 16;
 8002a6c:	e9c5 3600 	strd	r3, r6, [r5]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002a70:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a74:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002a76:	e9c5 1303 	strd	r1, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7a:	60ac      	str	r4, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a7c:	e9c5 4405 	strd	r4, r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a80:	f7ff fb72 	bl	8002168 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a84:	a907      	add	r1, sp, #28
 8002a86:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a88:	9707      	str	r7, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a8a:	f7ff fc58 	bl	800233e <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f7ff fb96 	bl	80021c0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a94:	a905      	add	r1, sp, #20
 8002a96:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a98:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a9c:	f7ff fd42 	bl	8002524 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 500;
 8002aa0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002aa4:	2060      	movs	r0, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aa6:	4622      	mov	r2, r4
  sConfigOC.Pulse = 500;
 8002aa8:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aac:	a90b      	add	r1, sp, #44	; 0x2c
 8002aae:	4628      	mov	r0, r5
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ab0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ab4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ab8:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aba:	f7ff fbd9 	bl	8002270 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002abe:	2204      	movs	r2, #4
 8002ac0:	a90b      	add	r1, sp, #44	; 0x2c
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f7ff fbd4 	bl	8002270 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002acc:	a912      	add	r1, sp, #72	; 0x48
 8002ace:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ad0:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ad2:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ad6:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ada:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002adc:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ade:	f7ff fd53 	bl	8002588 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f000 fb54 	bl	8003190 <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 115200;
 8002ae8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002aec:	f8df c144 	ldr.w	ip, [pc, #324]	; 8002c34 <main+0x2c8>
  huart1.Instance = USART1;
 8002af0:	484a      	ldr	r0, [pc, #296]	; (8002c1c <main+0x2b0>)
  huart1.Init.BaudRate = 115200;
 8002af2:	e9c0 c300 	strd	ip, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002af6:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002af8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afc:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b00:	6104      	str	r4, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b02:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b04:	f7ff fdca 	bl	800269c <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b08:	4632      	mov	r2, r6
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	a812      	add	r0, sp, #72	; 0x48
 8002b0e:	f000 fc49 	bl	80033a4 <memset>
  htim2.Init.Prescaler = 3200;
 8002b12:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8002b16:	f44f 6348 	mov.w	r3, #3200	; 0xc80
  htim2.Instance = TIM2;
 8002b1a:	4e41      	ldr	r6, [pc, #260]	; (8002c20 <main+0x2b4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b1c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  htim2.Init.Prescaler = 3200;
 8002b20:	e9c6 e300 	strd	lr, r3, [r6]
  htim2.Init.Period = 100;
 8002b24:	2364      	movs	r3, #100	; 0x64
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b26:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b28:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2c:	60b4      	str	r4, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b2e:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b30:	f7ff fb1a 	bl	8002168 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b34:	a912      	add	r1, sp, #72	; 0x48
 8002b36:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b38:	9712      	str	r7, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b3a:	f7ff fc00 	bl	800233e <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b3e:	a90b      	add	r1, sp, #44	; 0x2c
 8002b40:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b42:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b46:	f7ff fced 	bl	8002524 <HAL_TIMEx_MasterConfigSynchronization>
  MPU6050_Init();
 8002b4a:	f7ff fe37 	bl	80027bc <MPU6050_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8002b4e:	4630      	mov	r0, r6
 8002b50:	f7ff fa00 	bl	8001f54 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b54:	4621      	mov	r1, r4
 8002b56:	4628      	mov	r0, r5
 8002b58:	f7ff fce2 	bl	8002520 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002b5c:	2104      	movs	r1, #4
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f7ff fcde 	bl	8002520 <HAL_TIM_PWM_Start>
	  sprintf(buffer,"%.4f, %.4f\n\r",Ay,O);
 8002b64:	4c2f      	ldr	r4, [pc, #188]	; (8002c24 <main+0x2b8>)
	  MPU6050_Read_Accel();
 8002b66:	f7ff fe73 	bl	8002850 <MPU6050_Read_Accel>
	  sprintf(buffer,"%.4f, %.4f\n\r",Ay,O);
 8002b6a:	f8d8 0000 	ldr.w	r0, [r8]
 8002b6e:	f7fd fc5b 	bl	8000428 <__aeabi_f2d>
 8002b72:	f8d9 5000 	ldr.w	r5, [r9]
 8002b76:	4606      	mov	r6, r0
 8002b78:	4628      	mov	r0, r5
 8002b7a:	460f      	mov	r7, r1
 8002b7c:	f7fd fc54 	bl	8000428 <__aeabi_f2d>
 8002b80:	4632      	mov	r2, r6
 8002b82:	e9cd 0100 	strd	r0, r1, [sp]
 8002b86:	463b      	mov	r3, r7
 8002b88:	4927      	ldr	r1, [pc, #156]	; (8002c28 <main+0x2bc>)
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f001 f862 	bl	8003c54 <siprintf>
	  HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8002b90:	f04f 33ff 	mov.w	r3, #4294967295
 8002b94:	2219      	movs	r2, #25
 8002b96:	4621      	mov	r1, r4
 8002b98:	4820      	ldr	r0, [pc, #128]	; (8002c1c <main+0x2b0>)
 8002b9a:	f7ff fdad 	bl	80026f8 <HAL_UART_Transmit>
	  clearBuffer();
 8002b9e:	f7ff fe03 	bl	80027a8 <clearBuffer>
 8002ba2:	e7e0      	b.n	8002b66 <main+0x1fa>
 8002ba4:	20000284 	.word	0x20000284
 8002ba8:	20000220 	.word	0x20000220
 8002bac:	200003bc 	.word	0x200003bc
 8002bb0:	20000354 	.word	0x20000354
 8002bb4:	200003b0 	.word	0x200003b0
 8002bb8:	2000030c 	.word	0x2000030c
 8002bbc:	20000278 	.word	0x20000278
 8002bc0:	200003cc 	.word	0x200003cc
 8002bc4:	20000298 	.word	0x20000298
 8002bc8:	20000360 	.word	0x20000360
 8002bcc:	20000294 	.word	0x20000294
 8002bd0:	20000290 	.word	0x20000290
 8002bd4:	2000035c 	.word	0x2000035c
 8002bd8:	20000280 	.word	0x20000280
 8002bdc:	20000300 	.word	0x20000300
 8002be0:	200003b8 	.word	0x200003b8
 8002be4:	20000214 	.word	0x20000214
 8002be8:	2000027c 	.word	0x2000027c
 8002bec:	200003b4 	.word	0x200003b4
 8002bf0:	200003c8 	.word	0x200003c8
 8002bf4:	20000218 	.word	0x20000218
 8002bf8:	20000288 	.word	0x20000288
 8002bfc:	200002a0 	.word	0x200002a0
 8002c00:	200003ac 	.word	0x200003ac
 8002c04:	2000021c 	.word	0x2000021c
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	20000224 	.word	0x20000224
 8002c10:	40005400 	.word	0x40005400
 8002c14:	00061a80 	.word	0x00061a80
 8002c18:	40012c00 	.word	0x40012c00
 8002c1c:	200002a4 	.word	0x200002a4
 8002c20:	20000364 	.word	0x20000364
 8002c24:	200002e4 	.word	0x200002e4
 8002c28:	08005458 	.word	0x08005458
 8002c2c:	20000304 	.word	0x20000304
 8002c30:	2000028c 	.word	0x2000028c
 8002c34:	40013800 	.word	0x40013800

08002c38 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	//actualización filtro 1
	I1_k_2 = I1_k_1;
 8002c38:	4ac9      	ldr	r2, [pc, #804]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x328>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	I1_k_2 = I1_k_1;
 8002c3e:	6813      	ldr	r3, [r2, #0]
 8002c40:	4ec8      	ldr	r6, [pc, #800]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x32c>)
	I1_k_1 = I1_k;
 8002c42:	49c9      	ldr	r1, [pc, #804]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x330>)
	I1_k_2 = I1_k_1;
 8002c44:	6033      	str	r3, [r6, #0]
	I1_k_1 = I1_k;
 8002c46:	680b      	ldr	r3, [r1, #0]
	I1_k = Ay;
	O1_k_2 = O1_k_1;
 8002c48:	4dc8      	ldr	r5, [pc, #800]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x334>)
	I1_k_1 = I1_k;
 8002c4a:	6013      	str	r3, [r2, #0]
	I1_k = Ay;
 8002c4c:	4bc8      	ldr	r3, [pc, #800]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x338>)
	O1_k_1 = O1_k;
 8002c4e:	4cc9      	ldr	r4, [pc, #804]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x33c>)
	I1_k = Ay;
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	600b      	str	r3, [r1, #0]
	O1_k_2 = O1_k_1;
 8002c54:	4bc8      	ldr	r3, [pc, #800]	; (8002f78 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	6028      	str	r0, [r5, #0]
	O1_k_1 = O1_k;
 8002c5a:	6820      	ldr	r0, [r4, #0]
 8002c5c:	6018      	str	r0, [r3, #0]
	O1_k = I1_k+2.000347533644175*I1_k_1+0.999883597874393*I1_k_2+1.459706254894505*O1_k_1-0.534825985311821*O1_k_2;
 8002c5e:	f8d1 a000 	ldr.w	sl, [r1]
 8002c62:	6810      	ldr	r0, [r2, #0]
 8002c64:	f8d6 8000 	ldr.w	r8, [r6]
 8002c68:	f8d3 9000 	ldr.w	r9, [r3]
 8002c6c:	f7fd fbdc 	bl	8000428 <__aeabi_f2d>
 8002c70:	a39f      	add	r3, pc, #636	; (adr r3, 8002ef0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f7fd fc2f 	bl	80004d8 <__aeabi_dmul>
 8002c7a:	4606      	mov	r6, r0
 8002c7c:	4650      	mov	r0, sl
 8002c7e:	460f      	mov	r7, r1
 8002c80:	f7fd fbd2 	bl	8000428 <__aeabi_f2d>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4630      	mov	r0, r6
 8002c8a:	4639      	mov	r1, r7
 8002c8c:	f7fd fa6e 	bl	800016c <__adddf3>
 8002c90:	4606      	mov	r6, r0
 8002c92:	4640      	mov	r0, r8
 8002c94:	460f      	mov	r7, r1
 8002c96:	f7fd fbc7 	bl	8000428 <__aeabi_f2d>
 8002c9a:	a397      	add	r3, pc, #604	; (adr r3, 8002ef8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	f7fd fc1a 	bl	80004d8 <__aeabi_dmul>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4630      	mov	r0, r6
 8002caa:	4639      	mov	r1, r7
 8002cac:	f7fd fa5e 	bl	800016c <__adddf3>
 8002cb0:	4606      	mov	r6, r0
 8002cb2:	4648      	mov	r0, r9
 8002cb4:	460f      	mov	r7, r1
 8002cb6:	f7fd fbb7 	bl	8000428 <__aeabi_f2d>
 8002cba:	a391      	add	r3, pc, #580	; (adr r3, 8002f00 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f7fd fc0a 	bl	80004d8 <__aeabi_dmul>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4630      	mov	r0, r6
 8002cca:	4639      	mov	r1, r7
 8002ccc:	f7fd fa4e 	bl	800016c <__adddf3>
 8002cd0:	682d      	ldr	r5, [r5, #0]
 8002cd2:	4606      	mov	r6, r0
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	460f      	mov	r7, r1
 8002cd8:	f7fd fba6 	bl	8000428 <__aeabi_f2d>
 8002cdc:	a38a      	add	r3, pc, #552	; (adr r3, 8002f08 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	f7fd fbf9 	bl	80004d8 <__aeabi_dmul>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4630      	mov	r0, r6
 8002cec:	4639      	mov	r1, r7
 8002cee:	f7fd fa3b 	bl	8000168 <__aeabi_dsub>
 8002cf2:	f7fd fec9 	bl	8000a88 <__aeabi_d2f>
	//Actualización filtro 2
	I2_k_2 = I2_k_1;
 8002cf6:	4aa1      	ldr	r2, [pc, #644]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x344>)
	O1_k = I1_k+2.000347533644175*I1_k_1+0.999883597874393*I1_k_2+1.459706254894505*O1_k_1-0.534825985311821*O1_k_2;
 8002cf8:	6020      	str	r0, [r4, #0]
	I2_k_2 = I2_k_1;
 8002cfa:	6813      	ldr	r3, [r2, #0]
 8002cfc:	4ea0      	ldr	r6, [pc, #640]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x348>)
	I2_k_1 = I2_k;
 8002cfe:	49a1      	ldr	r1, [pc, #644]	; (8002f84 <HAL_TIM_PeriodElapsedCallback+0x34c>)
	I2_k_2 = I2_k_1;
 8002d00:	6033      	str	r3, [r6, #0]
	I2_k_1 = I2_k;
 8002d02:	680b      	ldr	r3, [r1, #0]
	I2_k = O1_k;
	O2_k_2 = O2_k_1;
 8002d04:	4da0      	ldr	r5, [pc, #640]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0x350>)
	I2_k_1 = I2_k;
 8002d06:	6013      	str	r3, [r2, #0]
	I2_k = O1_k;
 8002d08:	6823      	ldr	r3, [r4, #0]
	O2_k_1 = O2_k;
 8002d0a:	4ca0      	ldr	r4, [pc, #640]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0x354>)
	I2_k = O1_k;
 8002d0c:	600b      	str	r3, [r1, #0]
	O2_k_2 = O2_k_1;
 8002d0e:	4ba0      	ldr	r3, [pc, #640]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	6028      	str	r0, [r5, #0]
	O2_k_1 = O2_k;
 8002d14:	6820      	ldr	r0, [r4, #0]
 8002d16:	6018      	str	r0, [r3, #0]
	O2_k = I2_k+2.030459710047579*I2_k_1+1.030928964525487*I2_k_2+1.513290765323392*O2_k_1-0.591168074136782*O2_k_2;
 8002d18:	f8d1 a000 	ldr.w	sl, [r1]
 8002d1c:	6810      	ldr	r0, [r2, #0]
 8002d1e:	f8d6 8000 	ldr.w	r8, [r6]
 8002d22:	f8d3 9000 	ldr.w	r9, [r3]
 8002d26:	f7fd fb7f 	bl	8000428 <__aeabi_f2d>
 8002d2a:	a379      	add	r3, pc, #484	; (adr r3, 8002f10 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d30:	f7fd fbd2 	bl	80004d8 <__aeabi_dmul>
 8002d34:	4606      	mov	r6, r0
 8002d36:	4650      	mov	r0, sl
 8002d38:	460f      	mov	r7, r1
 8002d3a:	f7fd fb75 	bl	8000428 <__aeabi_f2d>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4630      	mov	r0, r6
 8002d44:	4639      	mov	r1, r7
 8002d46:	f7fd fa11 	bl	800016c <__adddf3>
 8002d4a:	4606      	mov	r6, r0
 8002d4c:	4640      	mov	r0, r8
 8002d4e:	460f      	mov	r7, r1
 8002d50:	f7fd fb6a 	bl	8000428 <__aeabi_f2d>
 8002d54:	a370      	add	r3, pc, #448	; (adr r3, 8002f18 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f7fd fbbd 	bl	80004d8 <__aeabi_dmul>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4630      	mov	r0, r6
 8002d64:	4639      	mov	r1, r7
 8002d66:	f7fd fa01 	bl	800016c <__adddf3>
 8002d6a:	4606      	mov	r6, r0
 8002d6c:	4648      	mov	r0, r9
 8002d6e:	460f      	mov	r7, r1
 8002d70:	f7fd fb5a 	bl	8000428 <__aeabi_f2d>
 8002d74:	a36a      	add	r3, pc, #424	; (adr r3, 8002f20 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fbad 	bl	80004d8 <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4630      	mov	r0, r6
 8002d84:	4639      	mov	r1, r7
 8002d86:	f7fd f9f1 	bl	800016c <__adddf3>
 8002d8a:	682d      	ldr	r5, [r5, #0]
 8002d8c:	4606      	mov	r6, r0
 8002d8e:	4628      	mov	r0, r5
 8002d90:	460f      	mov	r7, r1
 8002d92:	f7fd fb49 	bl	8000428 <__aeabi_f2d>
 8002d96:	a364      	add	r3, pc, #400	; (adr r3, 8002f28 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	f7fd fb9c 	bl	80004d8 <__aeabi_dmul>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4630      	mov	r0, r6
 8002da6:	4639      	mov	r1, r7
 8002da8:	f7fd f9de 	bl	8000168 <__aeabi_dsub>
 8002dac:	f7fd fe6c 	bl	8000a88 <__aeabi_d2f>
	//Actualización filtro 3
	I3_k_2 = I3_k_1;
 8002db0:	4a78      	ldr	r2, [pc, #480]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0x35c>)
	O2_k = I2_k+2.030459710047579*I2_k_1+1.030928964525487*I2_k_2+1.513290765323392*O2_k_1-0.591168074136782*O2_k_2;
 8002db2:	6020      	str	r0, [r4, #0]
	I3_k_2 = I3_k_1;
 8002db4:	6813      	ldr	r3, [r2, #0]
 8002db6:	4e78      	ldr	r6, [pc, #480]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0x360>)
	I3_k_1 = I3_k;
 8002db8:	4978      	ldr	r1, [pc, #480]	; (8002f9c <HAL_TIM_PeriodElapsedCallback+0x364>)
	I3_k_2 = I3_k_1;
 8002dba:	6033      	str	r3, [r6, #0]
	I3_k_1 = I3_k;
 8002dbc:	680b      	ldr	r3, [r1, #0]
	I3_k = O2_k;
	O3_k_2 = O3_k_1;
 8002dbe:	4d78      	ldr	r5, [pc, #480]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x368>)
	I3_k_1 = I3_k;
 8002dc0:	6013      	str	r3, [r2, #0]
	I3_k = O2_k;
 8002dc2:	6823      	ldr	r3, [r4, #0]
	O3_k_1 = O3_k;
 8002dc4:	4c77      	ldr	r4, [pc, #476]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
	I3_k = O2_k;
 8002dc6:	600b      	str	r3, [r1, #0]
	O3_k_2 = O3_k_1;
 8002dc8:	4b77      	ldr	r3, [pc, #476]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	6028      	str	r0, [r5, #0]
	O3_k_1 = O3_k;
 8002dce:	6820      	ldr	r0, [r4, #0]
 8002dd0:	6018      	str	r0, [r3, #0]
	O3_k = I3_k+1.999652525003121*I3_k_1+1.000116453073112*I3_k_2+1.623405697566375*O3_k_1-0.706949765685962*O3_k_2;
 8002dd2:	f8d1 a000 	ldr.w	sl, [r1]
 8002dd6:	6810      	ldr	r0, [r2, #0]
 8002dd8:	f8d6 8000 	ldr.w	r8, [r6]
 8002ddc:	f8d3 9000 	ldr.w	r9, [r3]
 8002de0:	f7fd fb22 	bl	8000428 <__aeabi_f2d>
 8002de4:	a352      	add	r3, pc, #328	; (adr r3, 8002f30 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	f7fd fb75 	bl	80004d8 <__aeabi_dmul>
 8002dee:	4606      	mov	r6, r0
 8002df0:	4650      	mov	r0, sl
 8002df2:	460f      	mov	r7, r1
 8002df4:	f7fd fb18 	bl	8000428 <__aeabi_f2d>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4630      	mov	r0, r6
 8002dfe:	4639      	mov	r1, r7
 8002e00:	f7fd f9b4 	bl	800016c <__adddf3>
 8002e04:	4606      	mov	r6, r0
 8002e06:	4640      	mov	r0, r8
 8002e08:	460f      	mov	r7, r1
 8002e0a:	f7fd fb0d 	bl	8000428 <__aeabi_f2d>
 8002e0e:	a34a      	add	r3, pc, #296	; (adr r3, 8002f38 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	f7fd fb60 	bl	80004d8 <__aeabi_dmul>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	4639      	mov	r1, r7
 8002e20:	f7fd f9a4 	bl	800016c <__adddf3>
 8002e24:	4606      	mov	r6, r0
 8002e26:	4648      	mov	r0, r9
 8002e28:	460f      	mov	r7, r1
 8002e2a:	f7fd fafd 	bl	8000428 <__aeabi_f2d>
 8002e2e:	a344      	add	r3, pc, #272	; (adr r3, 8002f40 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	f7fd fb50 	bl	80004d8 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4630      	mov	r0, r6
 8002e3e:	4639      	mov	r1, r7
 8002e40:	f7fd f994 	bl	800016c <__adddf3>
 8002e44:	682d      	ldr	r5, [r5, #0]
 8002e46:	4606      	mov	r6, r0
 8002e48:	4628      	mov	r0, r5
 8002e4a:	460f      	mov	r7, r1
 8002e4c:	f7fd faec 	bl	8000428 <__aeabi_f2d>
 8002e50:	a33d      	add	r3, pc, #244	; (adr r3, 8002f48 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd fb3f 	bl	80004d8 <__aeabi_dmul>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4630      	mov	r0, r6
 8002e60:	4639      	mov	r1, r7
 8002e62:	f7fd f981 	bl	8000168 <__aeabi_dsub>
 8002e66:	f7fd fe0f 	bl	8000a88 <__aeabi_d2f>
	//Actualización filtro 4
	I4_k_2 = I4_k_1;
 8002e6a:	4a50      	ldr	r2, [pc, #320]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0x374>)
	O3_k = I3_k+1.999652525003121*I3_k_1+1.000116453073112*I3_k_2+1.623405697566375*O3_k_1-0.706949765685962*O3_k_2;
 8002e6c:	6020      	str	r0, [r4, #0]
	I4_k_2 = I4_k_1;
 8002e6e:	6813      	ldr	r3, [r2, #0]
 8002e70:	4e4f      	ldr	r6, [pc, #316]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x378>)
	I4_k_1 = I4_k;
 8002e72:	4950      	ldr	r1, [pc, #320]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x37c>)
	I4_k_2 = I4_k_1;
 8002e74:	6033      	str	r3, [r6, #0]
	I4_k_1 = I4_k;
 8002e76:	680b      	ldr	r3, [r1, #0]
	I4_k = O3_k;
	O4_k_2 = O4_k_1;
 8002e78:	4d4f      	ldr	r5, [pc, #316]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x380>)
	I4_k_1 = I4_k;
 8002e7a:	6013      	str	r3, [r2, #0]
	I4_k = O3_k;
 8002e7c:	6823      	ldr	r3, [r4, #0]
	O4_k_1 = O4_k;
 8002e7e:	4c4f      	ldr	r4, [pc, #316]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0x384>)
	I4_k = O3_k;
 8002e80:	600b      	str	r3, [r1, #0]
	O4_k_2 = O4_k_1;
 8002e82:	4b4f      	ldr	r3, [pc, #316]	; (8002fc0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	6028      	str	r0, [r5, #0]
	O4_k_1 = O4_k;
 8002e88:	6820      	ldr	r0, [r4, #0]
 8002e8a:	6018      	str	r0, [r3, #0]
	O4_k = I4_k+1.969540231305121*I4_k_1+0.969998901008819*I4_k_2+1.793961845324269*O4_k_1-0.886283112069342*O4_k_2;
 8002e8c:	f8d1 a000 	ldr.w	sl, [r1]
 8002e90:	6810      	ldr	r0, [r2, #0]
 8002e92:	f8d6 8000 	ldr.w	r8, [r6]
 8002e96:	f8d3 9000 	ldr.w	r9, [r3]
 8002e9a:	f7fd fac5 	bl	8000428 <__aeabi_f2d>
 8002e9e:	a32c      	add	r3, pc, #176	; (adr r3, 8002f50 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd fb18 	bl	80004d8 <__aeabi_dmul>
 8002ea8:	4606      	mov	r6, r0
 8002eaa:	4650      	mov	r0, sl
 8002eac:	460f      	mov	r7, r1
 8002eae:	f7fd fabb 	bl	8000428 <__aeabi_f2d>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4630      	mov	r0, r6
 8002eb8:	4639      	mov	r1, r7
 8002eba:	f7fd f957 	bl	800016c <__adddf3>
 8002ebe:	4606      	mov	r6, r0
 8002ec0:	4640      	mov	r0, r8
 8002ec2:	460f      	mov	r7, r1
 8002ec4:	f7fd fab0 	bl	8000428 <__aeabi_f2d>
 8002ec8:	a323      	add	r3, pc, #140	; (adr r3, 8002f58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ece:	f7fd fb03 	bl	80004d8 <__aeabi_dmul>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4630      	mov	r0, r6
 8002ed8:	4639      	mov	r1, r7
 8002eda:	f7fd f947 	bl	800016c <__adddf3>
 8002ede:	4606      	mov	r6, r0
 8002ee0:	4648      	mov	r0, r9
 8002ee2:	460f      	mov	r7, r1
 8002ee4:	f7fd faa0 	bl	8000428 <__aeabi_f2d>
 8002ee8:	e06c      	b.n	8002fc4 <HAL_TIM_PeriodElapsedCallback+0x38c>
 8002eea:	bf00      	nop
 8002eec:	f3af 8000 	nop.w
 8002ef0:	352d1683 	.word	0x352d1683
 8002ef4:	400000b6 	.word	0x400000b6
 8002ef8:	e315acb6 	.word	0xe315acb6
 8002efc:	3fefff0b 	.word	0x3fefff0b
 8002f00:	f2289ddb 	.word	0xf2289ddb
 8002f04:	3ff75af4 	.word	0x3ff75af4
 8002f08:	627ee34f 	.word	0x627ee34f
 8002f0c:	3fe11d4b 	.word	0x3fe11d4b
 8002f10:	a913fffd 	.word	0xa913fffd
 8002f14:	40003e61 	.word	0x40003e61
 8002f18:	5eb22d83 	.word	0x5eb22d83
 8002f1c:	3ff07eaf 	.word	0x3ff07eaf
 8002f20:	60a671c9 	.word	0x60a671c9
 8002f24:	3ff83670 	.word	0x3ff83670
 8002f28:	4f1b6ac2 	.word	0x4f1b6ac2
 8002f2c:	3fe2ead9 	.word	0x3fe2ead9
 8002f30:	a564091f 	.word	0xa564091f
 8002f34:	3ffffe93 	.word	0x3ffffe93
 8002f38:	1c223fa1 	.word	0x1c223fa1
 8002f3c:	3ff0007a 	.word	0x3ff0007a
 8002f40:	40b3009b 	.word	0x40b3009b
 8002f44:	3ff9f978 	.word	0x3ff9f978
 8002f48:	1d71277c 	.word	0x1d71277c
 8002f4c:	3fe69f55 	.word	0x3fe69f55
 8002f50:	9e19c9cf 	.word	0x9e19c9cf
 8002f54:	3fff833c 	.word	0x3fff833c
 8002f58:	229fa468 	.word	0x229fa468
 8002f5c:	3fef0a3b 	.word	0x3fef0a3b
 8002f60:	20000220 	.word	0x20000220
 8002f64:	200003bc 	.word	0x200003bc
 8002f68:	20000284 	.word	0x20000284
 8002f6c:	20000278 	.word	0x20000278
 8002f70:	2000028c 	.word	0x2000028c
 8002f74:	20000354 	.word	0x20000354
 8002f78:	200003b0 	.word	0x200003b0
 8002f7c:	20000298 	.word	0x20000298
 8002f80:	20000360 	.word	0x20000360
 8002f84:	200003cc 	.word	0x200003cc
 8002f88:	2000035c 	.word	0x2000035c
 8002f8c:	20000294 	.word	0x20000294
 8002f90:	20000290 	.word	0x20000290
 8002f94:	20000300 	.word	0x20000300
 8002f98:	200003b8 	.word	0x200003b8
 8002f9c:	20000280 	.word	0x20000280
 8002fa0:	200003b4 	.word	0x200003b4
 8002fa4:	20000214 	.word	0x20000214
 8002fa8:	2000027c 	.word	0x2000027c
 8002fac:	20000218 	.word	0x20000218
 8002fb0:	20000288 	.word	0x20000288
 8002fb4:	200003c8 	.word	0x200003c8
 8002fb8:	2000021c 	.word	0x2000021c
 8002fbc:	200002a0 	.word	0x200002a0
 8002fc0:	200003ac 	.word	0x200003ac
 8002fc4:	a320      	add	r3, pc, #128	; (adr r3, 8003048 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fca:	f7fd fa85 	bl	80004d8 <__aeabi_dmul>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	4639      	mov	r1, r7
 8002fd6:	f7fd f8c9 	bl	800016c <__adddf3>
 8002fda:	682d      	ldr	r5, [r5, #0]
 8002fdc:	4606      	mov	r6, r0
 8002fde:	4628      	mov	r0, r5
 8002fe0:	460f      	mov	r7, r1
 8002fe2:	f7fd fa21 	bl	8000428 <__aeabi_f2d>
 8002fe6:	a31a      	add	r3, pc, #104	; (adr r3, 8003050 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	f7fd fa74 	bl	80004d8 <__aeabi_dmul>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	4639      	mov	r1, r7
 8002ff8:	f7fd f8b6 	bl	8000168 <__aeabi_dsub>
 8002ffc:	f7fd fd44 	bl	8000a88 <__aeabi_d2f>
 8003000:	6020      	str	r0, [r4, #0]
	O = 1.76255374e-7*O4_k;
 8003002:	6820      	ldr	r0, [r4, #0]
 8003004:	f7fd fa10 	bl	8000428 <__aeabi_f2d>
 8003008:	a313      	add	r3, pc, #76	; (adr r3, 8003058 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300e:	f7fd fa63 	bl	80004d8 <__aeabi_dmul>
 8003012:	f7fd fd39 	bl	8000a88 <__aeabi_d2f>
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_TIM_PeriodElapsedCallback+0x428>)
	//Motor izquierdo
	u = 200;
 8003018:	4c12      	ldr	r4, [pc, #72]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x42c>)
	O = 1.76255374e-7*O4_k;
 800301a:	6018      	str	r0, [r3, #0]
	u = 200;
 800301c:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_TIM_PeriodElapsedCallback+0x430>)
	htim1.Instance->CCR1 = 500+u;
 800301e:	4913      	ldr	r1, [pc, #76]	; (800306c <HAL_TIM_PeriodElapsedCallback+0x434>)
	u = 200;
 8003020:	6023      	str	r3, [r4, #0]
	htim1.Instance->CCR1 = 500+u;
 8003022:	4b13      	ldr	r3, [pc, #76]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	681d      	ldr	r5, [r3, #0]
 8003028:	f7fd fd84 	bl	8000b34 <__addsf3>
 800302c:	f7fd fe8a 	bl	8000d44 <__aeabi_f2uiz>
 8003030:	6368      	str	r0, [r5, #52]	; 0x34
	//Motor derecho
	htim1.Instance->CCR2 = 500-u;
 8003032:	6821      	ldr	r1, [r4, #0]
 8003034:	480d      	ldr	r0, [pc, #52]	; (800306c <HAL_TIM_PeriodElapsedCallback+0x434>)
 8003036:	f7fd fd7b 	bl	8000b30 <__aeabi_fsub>
 800303a:	f7fd fe83 	bl	8000d44 <__aeabi_f2uiz>
 800303e:	63a8      	str	r0, [r5, #56]	; 0x38
}
 8003040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003044:	f3af 8000 	nop.w
 8003048:	55ff0861 	.word	0x55ff0861
 800304c:	3ffcb411 	.word	0x3ffcb411
 8003050:	66aab7b8 	.word	0x66aab7b8
 8003054:	3fec5c6e 	.word	0x3fec5c6e
 8003058:	aa558faf 	.word	0xaa558faf
 800305c:	3e87a816 	.word	0x3e87a816
 8003060:	20000304 	.word	0x20000304
 8003064:	200003c0 	.word	0x200003c0
 8003068:	43480000 	.word	0x43480000
 800306c:	43fa0000 	.word	0x43fa0000
 8003070:	2000030c 	.word	0x2000030c

08003074 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_MspInit+0x3c>)
{
 8003076:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	619a      	str	r2, [r3, #24]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	f002 0201 	and.w	r2, r2, #1
 8003086:	9200      	str	r2, [sp, #0]
 8003088:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003090:	61da      	str	r2, [r3, #28]
 8003092:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003094:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800309e:	6853      	ldr	r3, [r2, #4]
 80030a0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030aa:	b002      	add	sp, #8
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40010000 	.word	0x40010000

080030b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030b8:	b510      	push	{r4, lr}
 80030ba:	4604      	mov	r4, r0
 80030bc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030be:	2210      	movs	r2, #16
 80030c0:	2100      	movs	r1, #0
 80030c2:	a802      	add	r0, sp, #8
 80030c4:	f000 f96e 	bl	80033a4 <memset>
  if(hi2c->Instance==I2C1)
 80030c8:	6822      	ldr	r2, [r4, #0]
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_I2C_MspInit+0x68>)
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d124      	bne.n	800311a <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d0:	4c14      	ldr	r4, [pc, #80]	; (8003124 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030d2:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d6:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030da:	f043 0308 	orr.w	r3, r3, #8
 80030de:	61a3      	str	r3, [r4, #24]
 80030e0:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e2:	4811      	ldr	r0, [pc, #68]	; (8003128 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ec:	2312      	movs	r3, #18
 80030ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030f2:	2303      	movs	r3, #3
 80030f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f6:	f7fd fef7 	bl	8000ee8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80030fa:	4a0c      	ldr	r2, [pc, #48]	; (800312c <HAL_I2C_MspInit+0x74>)
 80030fc:	6853      	ldr	r3, [r2, #4]
 80030fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003108:	69e3      	ldr	r3, [r4, #28]
 800310a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800310e:	61e3      	str	r3, [r4, #28]
 8003110:	69e3      	ldr	r3, [r4, #28]
 8003112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800311a:	b006      	add	sp, #24
 800311c:	bd10      	pop	{r4, pc}
 800311e:	bf00      	nop
 8003120:	40005400 	.word	0x40005400
 8003124:	40021000 	.word	0x40021000
 8003128:	40010c00 	.word	0x40010c00
 800312c:	40010000 	.word	0x40010000

08003130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003130:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 8003132:	6803      	ldr	r3, [r0, #0]
 8003134:	4a14      	ldr	r2, [pc, #80]	; (8003188 <HAL_TIM_Base_MspInit+0x58>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10c      	bne.n	8003154 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <HAL_TIM_Base_MspInit+0x5c>)
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003142:	619a      	str	r2, [r3, #24]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800314e:	b003      	add	sp, #12
 8003150:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003158:	d1f9      	bne.n	800314e <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800315a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800315e:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003160:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003168:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800316a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800316c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003176:	f7fd fe5f 	bl	8000e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800317a:	201c      	movs	r0, #28
}
 800317c:	b003      	add	sp, #12
 800317e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003182:	f7fd be8d 	b.w	8000ea0 <HAL_NVIC_EnableIRQ>
 8003186:	bf00      	nop
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40021000 	.word	0x40021000

08003190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003190:	b510      	push	{r4, lr}
 8003192:	4604      	mov	r4, r0
 8003194:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003196:	2210      	movs	r2, #16
 8003198:	2100      	movs	r1, #0
 800319a:	a802      	add	r0, sp, #8
 800319c:	f000 f902 	bl	80033a4 <memset>
  if(htim->Instance==TIM1)
 80031a0:	6822      	ldr	r2, [r4, #0]
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <HAL_TIM_MspPostInit+0x48>)
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d114      	bne.n	80031d2 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80031ac:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b0:	f042 0204 	orr.w	r2, r2, #4
 80031b4:	619a      	str	r2, [r3, #24]
 80031b6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b8:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c6:	4805      	ldr	r0, [pc, #20]	; (80031dc <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ce:	f7fd fe8b 	bl	8000ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80031d2:	b006      	add	sp, #24
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	bf00      	nop
 80031d8:	40012c00 	.word	0x40012c00
 80031dc:	40010800 	.word	0x40010800

080031e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031e0:	b510      	push	{r4, lr}
 80031e2:	4604      	mov	r4, r0
 80031e4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e6:	2210      	movs	r2, #16
 80031e8:	2100      	movs	r1, #0
 80031ea:	a802      	add	r0, sp, #8
 80031ec:	f000 f8da 	bl	80033a4 <memset>
  if(huart->Instance==USART1)
 80031f0:	6822      	ldr	r2, [r4, #0]
 80031f2:	4b19      	ldr	r3, [pc, #100]	; (8003258 <HAL_UART_MspInit+0x78>)
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d12d      	bne.n	8003254 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031f8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80031fc:	699a      	ldr	r2, [r3, #24]
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fe:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8003200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003204:	619a      	str	r2, [r3, #24]
 8003206:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003208:	4814      	ldr	r0, [pc, #80]	; (800325c <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800320a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800320e:	9200      	str	r2, [sp, #0]
 8003210:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	f042 0208 	orr.w	r2, r2, #8
 8003218:	619a      	str	r2, [r3, #24]
 800321a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003230:	f7fd fe5a 	bl	8000ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003234:	2300      	movs	r3, #0
 8003236:	2180      	movs	r1, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003238:	4808      	ldr	r0, [pc, #32]	; (800325c <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800323a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003242:	f7fd fe51 	bl	8000ee8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003246:	4a06      	ldr	r2, [pc, #24]	; (8003260 <HAL_UART_MspInit+0x80>)
 8003248:	6853      	ldr	r3, [r2, #4]
 800324a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800324e:	f043 0304 	orr.w	r3, r3, #4
 8003252:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003254:	b006      	add	sp, #24
 8003256:	bd10      	pop	{r4, pc}
 8003258:	40013800 	.word	0x40013800
 800325c:	40010c00 	.word	0x40010c00
 8003260:	40010000 	.word	0x40010000

08003264 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003264:	4770      	bx	lr

08003266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003266:	e7fe      	b.n	8003266 <HardFault_Handler>

08003268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003268:	e7fe      	b.n	8003268 <MemManage_Handler>

0800326a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800326a:	e7fe      	b.n	800326a <BusFault_Handler>

0800326c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800326c:	e7fe      	b.n	800326c <UsageFault_Handler>

0800326e <SVC_Handler>:
 800326e:	4770      	bx	lr

08003270 <DebugMon_Handler>:
 8003270:	4770      	bx	lr

08003272 <PendSV_Handler>:
 8003272:	4770      	bx	lr

08003274 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003274:	f7fd bdbc 	b.w	8000df0 <HAL_IncTick>

08003278 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003278:	4801      	ldr	r0, [pc, #4]	; (8003280 <TIM2_IRQHandler+0x8>)
 800327a:	f7fe be9a 	b.w	8001fb2 <HAL_TIM_IRQHandler>
 800327e:	bf00      	nop
 8003280:	20000364 	.word	0x20000364

08003284 <_sbrk>:
 8003284:	b508      	push	{r3, lr}
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <_sbrk+0x2c>)
 8003288:	4602      	mov	r2, r0
 800328a:	6819      	ldr	r1, [r3, #0]
 800328c:	b909      	cbnz	r1, 8003292 <_sbrk+0xe>
 800328e:	4909      	ldr	r1, [pc, #36]	; (80032b4 <_sbrk+0x30>)
 8003290:	6019      	str	r1, [r3, #0]
 8003292:	4669      	mov	r1, sp
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	4402      	add	r2, r0
 8003298:	428a      	cmp	r2, r1
 800329a:	d906      	bls.n	80032aa <_sbrk+0x26>
 800329c:	f000 f858 	bl	8003350 <__errno>
 80032a0:	230c      	movs	r3, #12
 80032a2:	6003      	str	r3, [r0, #0]
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	bd08      	pop	{r3, pc}
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	bd08      	pop	{r3, pc}
 80032ae:	bf00      	nop
 80032b0:	20000200 	.word	0x20000200
 80032b4:	200003d4 	.word	0x200003d4

080032b8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <SystemInit+0x40>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <SystemInit+0x44>)
 80032c6:	400a      	ands	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80032d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032d4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032dc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80032e4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80032e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80032ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80032ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <SystemInit+0x48>)
 80032f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
 80032fc:	f8ff0000 	.word	0xf8ff0000
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <Reset_Handler>:
 8003304:	2100      	movs	r1, #0
 8003306:	e003      	b.n	8003310 <LoopCopyDataInit>

08003308 <CopyDataInit>:
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <LoopFillZerobss+0x14>)
 800330a:	585b      	ldr	r3, [r3, r1]
 800330c:	5043      	str	r3, [r0, r1]
 800330e:	3104      	adds	r1, #4

08003310 <LoopCopyDataInit>:
 8003310:	480a      	ldr	r0, [pc, #40]	; (800333c <LoopFillZerobss+0x18>)
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <LoopFillZerobss+0x1c>)
 8003314:	1842      	adds	r2, r0, r1
 8003316:	429a      	cmp	r2, r3
 8003318:	d3f6      	bcc.n	8003308 <CopyDataInit>
 800331a:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <LoopFillZerobss+0x20>)
 800331c:	e002      	b.n	8003324 <LoopFillZerobss>

0800331e <FillZerobss>:
 800331e:	2300      	movs	r3, #0
 8003320:	f842 3b04 	str.w	r3, [r2], #4

08003324 <LoopFillZerobss>:
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <LoopFillZerobss+0x24>)
 8003326:	429a      	cmp	r2, r3
 8003328:	d3f9      	bcc.n	800331e <FillZerobss>
 800332a:	f7ff ffc5 	bl	80032b8 <SystemInit>
 800332e:	f000 f815 	bl	800335c <__libc_init_array>
 8003332:	f7ff fb1b 	bl	800296c <main>
 8003336:	4770      	bx	lr
 8003338:	080056e0 	.word	0x080056e0
 800333c:	20000000 	.word	0x20000000
 8003340:	200001dc 	.word	0x200001dc
 8003344:	200001dc 	.word	0x200001dc
 8003348:	200003d4 	.word	0x200003d4

0800334c <ADC1_2_IRQHandler>:
 800334c:	e7fe      	b.n	800334c <ADC1_2_IRQHandler>
	...

08003350 <__errno>:
 8003350:	4b01      	ldr	r3, [pc, #4]	; (8003358 <__errno+0x8>)
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	2000000c 	.word	0x2000000c

0800335c <__libc_init_array>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	2500      	movs	r5, #0
 8003360:	4e0c      	ldr	r6, [pc, #48]	; (8003394 <__libc_init_array+0x38>)
 8003362:	4c0d      	ldr	r4, [pc, #52]	; (8003398 <__libc_init_array+0x3c>)
 8003364:	1ba4      	subs	r4, r4, r6
 8003366:	10a4      	asrs	r4, r4, #2
 8003368:	42a5      	cmp	r5, r4
 800336a:	d109      	bne.n	8003380 <__libc_init_array+0x24>
 800336c:	f002 f85e 	bl	800542c <_init>
 8003370:	2500      	movs	r5, #0
 8003372:	4e0a      	ldr	r6, [pc, #40]	; (800339c <__libc_init_array+0x40>)
 8003374:	4c0a      	ldr	r4, [pc, #40]	; (80033a0 <__libc_init_array+0x44>)
 8003376:	1ba4      	subs	r4, r4, r6
 8003378:	10a4      	asrs	r4, r4, #2
 800337a:	42a5      	cmp	r5, r4
 800337c:	d105      	bne.n	800338a <__libc_init_array+0x2e>
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003384:	4798      	blx	r3
 8003386:	3501      	adds	r5, #1
 8003388:	e7ee      	b.n	8003368 <__libc_init_array+0xc>
 800338a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800338e:	4798      	blx	r3
 8003390:	3501      	adds	r5, #1
 8003392:	e7f2      	b.n	800337a <__libc_init_array+0x1e>
 8003394:	080056d8 	.word	0x080056d8
 8003398:	080056d8 	.word	0x080056d8
 800339c:	080056d8 	.word	0x080056d8
 80033a0:	080056dc 	.word	0x080056dc

080033a4 <memset>:
 80033a4:	4603      	mov	r3, r0
 80033a6:	4402      	add	r2, r0
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d100      	bne.n	80033ae <memset+0xa>
 80033ac:	4770      	bx	lr
 80033ae:	f803 1b01 	strb.w	r1, [r3], #1
 80033b2:	e7f9      	b.n	80033a8 <memset+0x4>

080033b4 <__cvt>:
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ba:	461e      	mov	r6, r3
 80033bc:	bfbb      	ittet	lt
 80033be:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80033c2:	461e      	movlt	r6, r3
 80033c4:	2300      	movge	r3, #0
 80033c6:	232d      	movlt	r3, #45	; 0x2d
 80033c8:	b088      	sub	sp, #32
 80033ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80033cc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80033d0:	f027 0720 	bic.w	r7, r7, #32
 80033d4:	2f46      	cmp	r7, #70	; 0x46
 80033d6:	4614      	mov	r4, r2
 80033d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80033da:	700b      	strb	r3, [r1, #0]
 80033dc:	d004      	beq.n	80033e8 <__cvt+0x34>
 80033de:	2f45      	cmp	r7, #69	; 0x45
 80033e0:	d100      	bne.n	80033e4 <__cvt+0x30>
 80033e2:	3501      	adds	r5, #1
 80033e4:	2302      	movs	r3, #2
 80033e6:	e000      	b.n	80033ea <__cvt+0x36>
 80033e8:	2303      	movs	r3, #3
 80033ea:	aa07      	add	r2, sp, #28
 80033ec:	9204      	str	r2, [sp, #16]
 80033ee:	aa06      	add	r2, sp, #24
 80033f0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80033f4:	e9cd 3500 	strd	r3, r5, [sp]
 80033f8:	4622      	mov	r2, r4
 80033fa:	4633      	mov	r3, r6
 80033fc:	f000 fcd8 	bl	8003db0 <_dtoa_r>
 8003400:	2f47      	cmp	r7, #71	; 0x47
 8003402:	4680      	mov	r8, r0
 8003404:	d102      	bne.n	800340c <__cvt+0x58>
 8003406:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003408:	07db      	lsls	r3, r3, #31
 800340a:	d526      	bpl.n	800345a <__cvt+0xa6>
 800340c:	2f46      	cmp	r7, #70	; 0x46
 800340e:	eb08 0905 	add.w	r9, r8, r5
 8003412:	d111      	bne.n	8003438 <__cvt+0x84>
 8003414:	f898 3000 	ldrb.w	r3, [r8]
 8003418:	2b30      	cmp	r3, #48	; 0x30
 800341a:	d10a      	bne.n	8003432 <__cvt+0x7e>
 800341c:	2200      	movs	r2, #0
 800341e:	2300      	movs	r3, #0
 8003420:	4620      	mov	r0, r4
 8003422:	4631      	mov	r1, r6
 8003424:	f7fd fac0 	bl	80009a8 <__aeabi_dcmpeq>
 8003428:	b918      	cbnz	r0, 8003432 <__cvt+0x7e>
 800342a:	f1c5 0501 	rsb	r5, r5, #1
 800342e:	f8ca 5000 	str.w	r5, [sl]
 8003432:	f8da 3000 	ldr.w	r3, [sl]
 8003436:	4499      	add	r9, r3
 8003438:	2200      	movs	r2, #0
 800343a:	2300      	movs	r3, #0
 800343c:	4620      	mov	r0, r4
 800343e:	4631      	mov	r1, r6
 8003440:	f7fd fab2 	bl	80009a8 <__aeabi_dcmpeq>
 8003444:	b938      	cbnz	r0, 8003456 <__cvt+0xa2>
 8003446:	2230      	movs	r2, #48	; 0x30
 8003448:	9b07      	ldr	r3, [sp, #28]
 800344a:	454b      	cmp	r3, r9
 800344c:	d205      	bcs.n	800345a <__cvt+0xa6>
 800344e:	1c59      	adds	r1, r3, #1
 8003450:	9107      	str	r1, [sp, #28]
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e7f8      	b.n	8003448 <__cvt+0x94>
 8003456:	f8cd 901c 	str.w	r9, [sp, #28]
 800345a:	4640      	mov	r0, r8
 800345c:	9b07      	ldr	r3, [sp, #28]
 800345e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003460:	eba3 0308 	sub.w	r3, r3, r8
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	b008      	add	sp, #32
 8003468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800346c <__exponent>:
 800346c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800346e:	2900      	cmp	r1, #0
 8003470:	bfb4      	ite	lt
 8003472:	232d      	movlt	r3, #45	; 0x2d
 8003474:	232b      	movge	r3, #43	; 0x2b
 8003476:	4604      	mov	r4, r0
 8003478:	bfb8      	it	lt
 800347a:	4249      	neglt	r1, r1
 800347c:	2909      	cmp	r1, #9
 800347e:	f804 2b02 	strb.w	r2, [r4], #2
 8003482:	7043      	strb	r3, [r0, #1]
 8003484:	dd21      	ble.n	80034ca <__exponent+0x5e>
 8003486:	f10d 0307 	add.w	r3, sp, #7
 800348a:	461f      	mov	r7, r3
 800348c:	260a      	movs	r6, #10
 800348e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003492:	fb06 1115 	mls	r1, r6, r5, r1
 8003496:	2d09      	cmp	r5, #9
 8003498:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800349c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80034a0:	f103 32ff 	add.w	r2, r3, #4294967295
 80034a4:	4629      	mov	r1, r5
 80034a6:	dc09      	bgt.n	80034bc <__exponent+0x50>
 80034a8:	3130      	adds	r1, #48	; 0x30
 80034aa:	3b02      	subs	r3, #2
 80034ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80034b0:	42bb      	cmp	r3, r7
 80034b2:	4622      	mov	r2, r4
 80034b4:	d304      	bcc.n	80034c0 <__exponent+0x54>
 80034b6:	1a10      	subs	r0, r2, r0
 80034b8:	b003      	add	sp, #12
 80034ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034bc:	4613      	mov	r3, r2
 80034be:	e7e6      	b.n	800348e <__exponent+0x22>
 80034c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034c4:	f804 2b01 	strb.w	r2, [r4], #1
 80034c8:	e7f2      	b.n	80034b0 <__exponent+0x44>
 80034ca:	2330      	movs	r3, #48	; 0x30
 80034cc:	4419      	add	r1, r3
 80034ce:	7083      	strb	r3, [r0, #2]
 80034d0:	1d02      	adds	r2, r0, #4
 80034d2:	70c1      	strb	r1, [r0, #3]
 80034d4:	e7ef      	b.n	80034b6 <__exponent+0x4a>
	...

080034d8 <_printf_float>:
 80034d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034dc:	b091      	sub	sp, #68	; 0x44
 80034de:	460c      	mov	r4, r1
 80034e0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80034e2:	4693      	mov	fp, r2
 80034e4:	461e      	mov	r6, r3
 80034e6:	4605      	mov	r5, r0
 80034e8:	f001 fa16 	bl	8004918 <_localeconv_r>
 80034ec:	6803      	ldr	r3, [r0, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	9309      	str	r3, [sp, #36]	; 0x24
 80034f2:	f7fc fe2d 	bl	8000150 <strlen>
 80034f6:	2300      	movs	r3, #0
 80034f8:	930e      	str	r3, [sp, #56]	; 0x38
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	900a      	str	r0, [sp, #40]	; 0x28
 80034fe:	3307      	adds	r3, #7
 8003500:	f023 0307 	bic.w	r3, r3, #7
 8003504:	f103 0208 	add.w	r2, r3, #8
 8003508:	f894 8018 	ldrb.w	r8, [r4, #24]
 800350c:	f8d4 a000 	ldr.w	sl, [r4]
 8003510:	603a      	str	r2, [r7, #0]
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800351a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800351e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003522:	930b      	str	r3, [sp, #44]	; 0x2c
 8003524:	f04f 32ff 	mov.w	r2, #4294967295
 8003528:	4ba6      	ldr	r3, [pc, #664]	; (80037c4 <_printf_float+0x2ec>)
 800352a:	4638      	mov	r0, r7
 800352c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800352e:	f7fd fa6d 	bl	8000a0c <__aeabi_dcmpun>
 8003532:	bb68      	cbnz	r0, 8003590 <_printf_float+0xb8>
 8003534:	f04f 32ff 	mov.w	r2, #4294967295
 8003538:	4ba2      	ldr	r3, [pc, #648]	; (80037c4 <_printf_float+0x2ec>)
 800353a:	4638      	mov	r0, r7
 800353c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800353e:	f7fd fa47 	bl	80009d0 <__aeabi_dcmple>
 8003542:	bb28      	cbnz	r0, 8003590 <_printf_float+0xb8>
 8003544:	2200      	movs	r2, #0
 8003546:	2300      	movs	r3, #0
 8003548:	4638      	mov	r0, r7
 800354a:	4649      	mov	r1, r9
 800354c:	f7fd fa36 	bl	80009bc <__aeabi_dcmplt>
 8003550:	b110      	cbz	r0, 8003558 <_printf_float+0x80>
 8003552:	232d      	movs	r3, #45	; 0x2d
 8003554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003558:	4f9b      	ldr	r7, [pc, #620]	; (80037c8 <_printf_float+0x2f0>)
 800355a:	4b9c      	ldr	r3, [pc, #624]	; (80037cc <_printf_float+0x2f4>)
 800355c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003560:	bf98      	it	ls
 8003562:	461f      	movls	r7, r3
 8003564:	2303      	movs	r3, #3
 8003566:	f04f 0900 	mov.w	r9, #0
 800356a:	6123      	str	r3, [r4, #16]
 800356c:	f02a 0304 	bic.w	r3, sl, #4
 8003570:	6023      	str	r3, [r4, #0]
 8003572:	9600      	str	r6, [sp, #0]
 8003574:	465b      	mov	r3, fp
 8003576:	aa0f      	add	r2, sp, #60	; 0x3c
 8003578:	4621      	mov	r1, r4
 800357a:	4628      	mov	r0, r5
 800357c:	f000 f9e2 	bl	8003944 <_printf_common>
 8003580:	3001      	adds	r0, #1
 8003582:	f040 8090 	bne.w	80036a6 <_printf_float+0x1ce>
 8003586:	f04f 30ff 	mov.w	r0, #4294967295
 800358a:	b011      	add	sp, #68	; 0x44
 800358c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003590:	463a      	mov	r2, r7
 8003592:	464b      	mov	r3, r9
 8003594:	4638      	mov	r0, r7
 8003596:	4649      	mov	r1, r9
 8003598:	f7fd fa38 	bl	8000a0c <__aeabi_dcmpun>
 800359c:	b110      	cbz	r0, 80035a4 <_printf_float+0xcc>
 800359e:	4f8c      	ldr	r7, [pc, #560]	; (80037d0 <_printf_float+0x2f8>)
 80035a0:	4b8c      	ldr	r3, [pc, #560]	; (80037d4 <_printf_float+0x2fc>)
 80035a2:	e7db      	b.n	800355c <_printf_float+0x84>
 80035a4:	6863      	ldr	r3, [r4, #4]
 80035a6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80035aa:	1c59      	adds	r1, r3, #1
 80035ac:	a80d      	add	r0, sp, #52	; 0x34
 80035ae:	a90e      	add	r1, sp, #56	; 0x38
 80035b0:	d140      	bne.n	8003634 <_printf_float+0x15c>
 80035b2:	2306      	movs	r3, #6
 80035b4:	6063      	str	r3, [r4, #4]
 80035b6:	f04f 0c00 	mov.w	ip, #0
 80035ba:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80035be:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80035c2:	6863      	ldr	r3, [r4, #4]
 80035c4:	6022      	str	r2, [r4, #0]
 80035c6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	463a      	mov	r2, r7
 80035ce:	464b      	mov	r3, r9
 80035d0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80035d4:	4628      	mov	r0, r5
 80035d6:	f7ff feed 	bl	80033b4 <__cvt>
 80035da:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80035de:	2b47      	cmp	r3, #71	; 0x47
 80035e0:	4607      	mov	r7, r0
 80035e2:	d109      	bne.n	80035f8 <_printf_float+0x120>
 80035e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035e6:	1cd8      	adds	r0, r3, #3
 80035e8:	db02      	blt.n	80035f0 <_printf_float+0x118>
 80035ea:	6862      	ldr	r2, [r4, #4]
 80035ec:	4293      	cmp	r3, r2
 80035ee:	dd47      	ble.n	8003680 <_printf_float+0x1a8>
 80035f0:	f1a8 0802 	sub.w	r8, r8, #2
 80035f4:	fa5f f888 	uxtb.w	r8, r8
 80035f8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80035fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035fe:	d824      	bhi.n	800364a <_printf_float+0x172>
 8003600:	3901      	subs	r1, #1
 8003602:	4642      	mov	r2, r8
 8003604:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003608:	910d      	str	r1, [sp, #52]	; 0x34
 800360a:	f7ff ff2f 	bl	800346c <__exponent>
 800360e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003610:	4681      	mov	r9, r0
 8003612:	1813      	adds	r3, r2, r0
 8003614:	2a01      	cmp	r2, #1
 8003616:	6123      	str	r3, [r4, #16]
 8003618:	dc02      	bgt.n	8003620 <_printf_float+0x148>
 800361a:	6822      	ldr	r2, [r4, #0]
 800361c:	07d1      	lsls	r1, r2, #31
 800361e:	d501      	bpl.n	8003624 <_printf_float+0x14c>
 8003620:	3301      	adds	r3, #1
 8003622:	6123      	str	r3, [r4, #16]
 8003624:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0a2      	beq.n	8003572 <_printf_float+0x9a>
 800362c:	232d      	movs	r3, #45	; 0x2d
 800362e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003632:	e79e      	b.n	8003572 <_printf_float+0x9a>
 8003634:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003638:	f000 816e 	beq.w	8003918 <_printf_float+0x440>
 800363c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003640:	d1b9      	bne.n	80035b6 <_printf_float+0xde>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1b7      	bne.n	80035b6 <_printf_float+0xde>
 8003646:	2301      	movs	r3, #1
 8003648:	e7b4      	b.n	80035b4 <_printf_float+0xdc>
 800364a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800364e:	d119      	bne.n	8003684 <_printf_float+0x1ac>
 8003650:	2900      	cmp	r1, #0
 8003652:	6863      	ldr	r3, [r4, #4]
 8003654:	dd0c      	ble.n	8003670 <_printf_float+0x198>
 8003656:	6121      	str	r1, [r4, #16]
 8003658:	b913      	cbnz	r3, 8003660 <_printf_float+0x188>
 800365a:	6822      	ldr	r2, [r4, #0]
 800365c:	07d2      	lsls	r2, r2, #31
 800365e:	d502      	bpl.n	8003666 <_printf_float+0x18e>
 8003660:	3301      	adds	r3, #1
 8003662:	440b      	add	r3, r1
 8003664:	6123      	str	r3, [r4, #16]
 8003666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003668:	f04f 0900 	mov.w	r9, #0
 800366c:	65a3      	str	r3, [r4, #88]	; 0x58
 800366e:	e7d9      	b.n	8003624 <_printf_float+0x14c>
 8003670:	b913      	cbnz	r3, 8003678 <_printf_float+0x1a0>
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	07d0      	lsls	r0, r2, #31
 8003676:	d501      	bpl.n	800367c <_printf_float+0x1a4>
 8003678:	3302      	adds	r3, #2
 800367a:	e7f3      	b.n	8003664 <_printf_float+0x18c>
 800367c:	2301      	movs	r3, #1
 800367e:	e7f1      	b.n	8003664 <_printf_float+0x18c>
 8003680:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003684:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003688:	4293      	cmp	r3, r2
 800368a:	db05      	blt.n	8003698 <_printf_float+0x1c0>
 800368c:	6822      	ldr	r2, [r4, #0]
 800368e:	6123      	str	r3, [r4, #16]
 8003690:	07d1      	lsls	r1, r2, #31
 8003692:	d5e8      	bpl.n	8003666 <_printf_float+0x18e>
 8003694:	3301      	adds	r3, #1
 8003696:	e7e5      	b.n	8003664 <_printf_float+0x18c>
 8003698:	2b00      	cmp	r3, #0
 800369a:	bfcc      	ite	gt
 800369c:	2301      	movgt	r3, #1
 800369e:	f1c3 0302 	rsble	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	e7de      	b.n	8003664 <_printf_float+0x18c>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	055a      	lsls	r2, r3, #21
 80036aa:	d407      	bmi.n	80036bc <_printf_float+0x1e4>
 80036ac:	6923      	ldr	r3, [r4, #16]
 80036ae:	463a      	mov	r2, r7
 80036b0:	4659      	mov	r1, fp
 80036b2:	4628      	mov	r0, r5
 80036b4:	47b0      	blx	r6
 80036b6:	3001      	adds	r0, #1
 80036b8:	d129      	bne.n	800370e <_printf_float+0x236>
 80036ba:	e764      	b.n	8003586 <_printf_float+0xae>
 80036bc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80036c0:	f240 80d7 	bls.w	8003872 <_printf_float+0x39a>
 80036c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80036c8:	2200      	movs	r2, #0
 80036ca:	2300      	movs	r3, #0
 80036cc:	f7fd f96c 	bl	80009a8 <__aeabi_dcmpeq>
 80036d0:	b388      	cbz	r0, 8003736 <_printf_float+0x25e>
 80036d2:	2301      	movs	r3, #1
 80036d4:	4a40      	ldr	r2, [pc, #256]	; (80037d8 <_printf_float+0x300>)
 80036d6:	4659      	mov	r1, fp
 80036d8:	4628      	mov	r0, r5
 80036da:	47b0      	blx	r6
 80036dc:	3001      	adds	r0, #1
 80036de:	f43f af52 	beq.w	8003586 <_printf_float+0xae>
 80036e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036e6:	429a      	cmp	r2, r3
 80036e8:	db02      	blt.n	80036f0 <_printf_float+0x218>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	07d8      	lsls	r0, r3, #31
 80036ee:	d50e      	bpl.n	800370e <_printf_float+0x236>
 80036f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036f4:	4659      	mov	r1, fp
 80036f6:	4628      	mov	r0, r5
 80036f8:	47b0      	blx	r6
 80036fa:	3001      	adds	r0, #1
 80036fc:	f43f af43 	beq.w	8003586 <_printf_float+0xae>
 8003700:	2700      	movs	r7, #0
 8003702:	f104 081a 	add.w	r8, r4, #26
 8003706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003708:	3b01      	subs	r3, #1
 800370a:	42bb      	cmp	r3, r7
 800370c:	dc09      	bgt.n	8003722 <_printf_float+0x24a>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	079f      	lsls	r7, r3, #30
 8003712:	f100 80fd 	bmi.w	8003910 <_printf_float+0x438>
 8003716:	68e0      	ldr	r0, [r4, #12]
 8003718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800371a:	4298      	cmp	r0, r3
 800371c:	bfb8      	it	lt
 800371e:	4618      	movlt	r0, r3
 8003720:	e733      	b.n	800358a <_printf_float+0xb2>
 8003722:	2301      	movs	r3, #1
 8003724:	4642      	mov	r2, r8
 8003726:	4659      	mov	r1, fp
 8003728:	4628      	mov	r0, r5
 800372a:	47b0      	blx	r6
 800372c:	3001      	adds	r0, #1
 800372e:	f43f af2a 	beq.w	8003586 <_printf_float+0xae>
 8003732:	3701      	adds	r7, #1
 8003734:	e7e7      	b.n	8003706 <_printf_float+0x22e>
 8003736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003738:	2b00      	cmp	r3, #0
 800373a:	dc2b      	bgt.n	8003794 <_printf_float+0x2bc>
 800373c:	2301      	movs	r3, #1
 800373e:	4a26      	ldr	r2, [pc, #152]	; (80037d8 <_printf_float+0x300>)
 8003740:	4659      	mov	r1, fp
 8003742:	4628      	mov	r0, r5
 8003744:	47b0      	blx	r6
 8003746:	3001      	adds	r0, #1
 8003748:	f43f af1d 	beq.w	8003586 <_printf_float+0xae>
 800374c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800374e:	b923      	cbnz	r3, 800375a <_printf_float+0x282>
 8003750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003752:	b913      	cbnz	r3, 800375a <_printf_float+0x282>
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	07d9      	lsls	r1, r3, #31
 8003758:	d5d9      	bpl.n	800370e <_printf_float+0x236>
 800375a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800375e:	4659      	mov	r1, fp
 8003760:	4628      	mov	r0, r5
 8003762:	47b0      	blx	r6
 8003764:	3001      	adds	r0, #1
 8003766:	f43f af0e 	beq.w	8003586 <_printf_float+0xae>
 800376a:	f04f 0800 	mov.w	r8, #0
 800376e:	f104 091a 	add.w	r9, r4, #26
 8003772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003774:	425b      	negs	r3, r3
 8003776:	4543      	cmp	r3, r8
 8003778:	dc01      	bgt.n	800377e <_printf_float+0x2a6>
 800377a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800377c:	e797      	b.n	80036ae <_printf_float+0x1d6>
 800377e:	2301      	movs	r3, #1
 8003780:	464a      	mov	r2, r9
 8003782:	4659      	mov	r1, fp
 8003784:	4628      	mov	r0, r5
 8003786:	47b0      	blx	r6
 8003788:	3001      	adds	r0, #1
 800378a:	f43f aefc 	beq.w	8003586 <_printf_float+0xae>
 800378e:	f108 0801 	add.w	r8, r8, #1
 8003792:	e7ee      	b.n	8003772 <_printf_float+0x29a>
 8003794:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003796:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003798:	429a      	cmp	r2, r3
 800379a:	bfa8      	it	ge
 800379c:	461a      	movge	r2, r3
 800379e:	2a00      	cmp	r2, #0
 80037a0:	4690      	mov	r8, r2
 80037a2:	dd07      	ble.n	80037b4 <_printf_float+0x2dc>
 80037a4:	4613      	mov	r3, r2
 80037a6:	4659      	mov	r1, fp
 80037a8:	463a      	mov	r2, r7
 80037aa:	4628      	mov	r0, r5
 80037ac:	47b0      	blx	r6
 80037ae:	3001      	adds	r0, #1
 80037b0:	f43f aee9 	beq.w	8003586 <_printf_float+0xae>
 80037b4:	f104 031a 	add.w	r3, r4, #26
 80037b8:	f04f 0a00 	mov.w	sl, #0
 80037bc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80037c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80037c2:	e015      	b.n	80037f0 <_printf_float+0x318>
 80037c4:	7fefffff 	.word	0x7fefffff
 80037c8:	08005481 	.word	0x08005481
 80037cc:	0800547d 	.word	0x0800547d
 80037d0:	08005489 	.word	0x08005489
 80037d4:	08005485 	.word	0x08005485
 80037d8:	0800548d 	.word	0x0800548d
 80037dc:	2301      	movs	r3, #1
 80037de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80037e0:	4659      	mov	r1, fp
 80037e2:	4628      	mov	r0, r5
 80037e4:	47b0      	blx	r6
 80037e6:	3001      	adds	r0, #1
 80037e8:	f43f aecd 	beq.w	8003586 <_printf_float+0xae>
 80037ec:	f10a 0a01 	add.w	sl, sl, #1
 80037f0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80037f4:	eba9 0308 	sub.w	r3, r9, r8
 80037f8:	4553      	cmp	r3, sl
 80037fa:	dcef      	bgt.n	80037dc <_printf_float+0x304>
 80037fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003800:	429a      	cmp	r2, r3
 8003802:	444f      	add	r7, r9
 8003804:	db14      	blt.n	8003830 <_printf_float+0x358>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	07da      	lsls	r2, r3, #31
 800380a:	d411      	bmi.n	8003830 <_printf_float+0x358>
 800380c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800380e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003810:	eba3 0209 	sub.w	r2, r3, r9
 8003814:	eba3 0901 	sub.w	r9, r3, r1
 8003818:	4591      	cmp	r9, r2
 800381a:	bfa8      	it	ge
 800381c:	4691      	movge	r9, r2
 800381e:	f1b9 0f00 	cmp.w	r9, #0
 8003822:	dc0d      	bgt.n	8003840 <_printf_float+0x368>
 8003824:	2700      	movs	r7, #0
 8003826:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800382a:	f104 081a 	add.w	r8, r4, #26
 800382e:	e018      	b.n	8003862 <_printf_float+0x38a>
 8003830:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003834:	4659      	mov	r1, fp
 8003836:	4628      	mov	r0, r5
 8003838:	47b0      	blx	r6
 800383a:	3001      	adds	r0, #1
 800383c:	d1e6      	bne.n	800380c <_printf_float+0x334>
 800383e:	e6a2      	b.n	8003586 <_printf_float+0xae>
 8003840:	464b      	mov	r3, r9
 8003842:	463a      	mov	r2, r7
 8003844:	4659      	mov	r1, fp
 8003846:	4628      	mov	r0, r5
 8003848:	47b0      	blx	r6
 800384a:	3001      	adds	r0, #1
 800384c:	d1ea      	bne.n	8003824 <_printf_float+0x34c>
 800384e:	e69a      	b.n	8003586 <_printf_float+0xae>
 8003850:	2301      	movs	r3, #1
 8003852:	4642      	mov	r2, r8
 8003854:	4659      	mov	r1, fp
 8003856:	4628      	mov	r0, r5
 8003858:	47b0      	blx	r6
 800385a:	3001      	adds	r0, #1
 800385c:	f43f ae93 	beq.w	8003586 <_printf_float+0xae>
 8003860:	3701      	adds	r7, #1
 8003862:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	eba3 0309 	sub.w	r3, r3, r9
 800386c:	42bb      	cmp	r3, r7
 800386e:	dcef      	bgt.n	8003850 <_printf_float+0x378>
 8003870:	e74d      	b.n	800370e <_printf_float+0x236>
 8003872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003874:	2a01      	cmp	r2, #1
 8003876:	dc01      	bgt.n	800387c <_printf_float+0x3a4>
 8003878:	07db      	lsls	r3, r3, #31
 800387a:	d538      	bpl.n	80038ee <_printf_float+0x416>
 800387c:	2301      	movs	r3, #1
 800387e:	463a      	mov	r2, r7
 8003880:	4659      	mov	r1, fp
 8003882:	4628      	mov	r0, r5
 8003884:	47b0      	blx	r6
 8003886:	3001      	adds	r0, #1
 8003888:	f43f ae7d 	beq.w	8003586 <_printf_float+0xae>
 800388c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003890:	4659      	mov	r1, fp
 8003892:	4628      	mov	r0, r5
 8003894:	47b0      	blx	r6
 8003896:	3001      	adds	r0, #1
 8003898:	f107 0701 	add.w	r7, r7, #1
 800389c:	f43f ae73 	beq.w	8003586 <_printf_float+0xae>
 80038a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80038a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038a6:	2200      	movs	r2, #0
 80038a8:	f103 38ff 	add.w	r8, r3, #4294967295
 80038ac:	2300      	movs	r3, #0
 80038ae:	f7fd f87b 	bl	80009a8 <__aeabi_dcmpeq>
 80038b2:	b9c0      	cbnz	r0, 80038e6 <_printf_float+0x40e>
 80038b4:	4643      	mov	r3, r8
 80038b6:	463a      	mov	r2, r7
 80038b8:	4659      	mov	r1, fp
 80038ba:	4628      	mov	r0, r5
 80038bc:	47b0      	blx	r6
 80038be:	3001      	adds	r0, #1
 80038c0:	d10d      	bne.n	80038de <_printf_float+0x406>
 80038c2:	e660      	b.n	8003586 <_printf_float+0xae>
 80038c4:	2301      	movs	r3, #1
 80038c6:	4642      	mov	r2, r8
 80038c8:	4659      	mov	r1, fp
 80038ca:	4628      	mov	r0, r5
 80038cc:	47b0      	blx	r6
 80038ce:	3001      	adds	r0, #1
 80038d0:	f43f ae59 	beq.w	8003586 <_printf_float+0xae>
 80038d4:	3701      	adds	r7, #1
 80038d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038d8:	3b01      	subs	r3, #1
 80038da:	42bb      	cmp	r3, r7
 80038dc:	dcf2      	bgt.n	80038c4 <_printf_float+0x3ec>
 80038de:	464b      	mov	r3, r9
 80038e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80038e4:	e6e4      	b.n	80036b0 <_printf_float+0x1d8>
 80038e6:	2700      	movs	r7, #0
 80038e8:	f104 081a 	add.w	r8, r4, #26
 80038ec:	e7f3      	b.n	80038d6 <_printf_float+0x3fe>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e7e1      	b.n	80038b6 <_printf_float+0x3de>
 80038f2:	2301      	movs	r3, #1
 80038f4:	4642      	mov	r2, r8
 80038f6:	4659      	mov	r1, fp
 80038f8:	4628      	mov	r0, r5
 80038fa:	47b0      	blx	r6
 80038fc:	3001      	adds	r0, #1
 80038fe:	f43f ae42 	beq.w	8003586 <_printf_float+0xae>
 8003902:	3701      	adds	r7, #1
 8003904:	68e3      	ldr	r3, [r4, #12]
 8003906:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	42bb      	cmp	r3, r7
 800390c:	dcf1      	bgt.n	80038f2 <_printf_float+0x41a>
 800390e:	e702      	b.n	8003716 <_printf_float+0x23e>
 8003910:	2700      	movs	r7, #0
 8003912:	f104 0819 	add.w	r8, r4, #25
 8003916:	e7f5      	b.n	8003904 <_printf_float+0x42c>
 8003918:	2b00      	cmp	r3, #0
 800391a:	f43f ae94 	beq.w	8003646 <_printf_float+0x16e>
 800391e:	f04f 0c00 	mov.w	ip, #0
 8003922:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003926:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800392a:	6022      	str	r2, [r4, #0]
 800392c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003930:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	463a      	mov	r2, r7
 8003938:	464b      	mov	r3, r9
 800393a:	4628      	mov	r0, r5
 800393c:	f7ff fd3a 	bl	80033b4 <__cvt>
 8003940:	4607      	mov	r7, r0
 8003942:	e64f      	b.n	80035e4 <_printf_float+0x10c>

08003944 <_printf_common>:
 8003944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003948:	4691      	mov	r9, r2
 800394a:	461f      	mov	r7, r3
 800394c:	688a      	ldr	r2, [r1, #8]
 800394e:	690b      	ldr	r3, [r1, #16]
 8003950:	4606      	mov	r6, r0
 8003952:	4293      	cmp	r3, r2
 8003954:	bfb8      	it	lt
 8003956:	4613      	movlt	r3, r2
 8003958:	f8c9 3000 	str.w	r3, [r9]
 800395c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003960:	460c      	mov	r4, r1
 8003962:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003966:	b112      	cbz	r2, 800396e <_printf_common+0x2a>
 8003968:	3301      	adds	r3, #1
 800396a:	f8c9 3000 	str.w	r3, [r9]
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	0699      	lsls	r1, r3, #26
 8003972:	bf42      	ittt	mi
 8003974:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003978:	3302      	addmi	r3, #2
 800397a:	f8c9 3000 	strmi.w	r3, [r9]
 800397e:	6825      	ldr	r5, [r4, #0]
 8003980:	f015 0506 	ands.w	r5, r5, #6
 8003984:	d107      	bne.n	8003996 <_printf_common+0x52>
 8003986:	f104 0a19 	add.w	sl, r4, #25
 800398a:	68e3      	ldr	r3, [r4, #12]
 800398c:	f8d9 2000 	ldr.w	r2, [r9]
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	42ab      	cmp	r3, r5
 8003994:	dc29      	bgt.n	80039ea <_printf_common+0xa6>
 8003996:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800399a:	6822      	ldr	r2, [r4, #0]
 800399c:	3300      	adds	r3, #0
 800399e:	bf18      	it	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	0692      	lsls	r2, r2, #26
 80039a4:	d42e      	bmi.n	8003a04 <_printf_common+0xc0>
 80039a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039aa:	4639      	mov	r1, r7
 80039ac:	4630      	mov	r0, r6
 80039ae:	47c0      	blx	r8
 80039b0:	3001      	adds	r0, #1
 80039b2:	d021      	beq.n	80039f8 <_printf_common+0xb4>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	68e5      	ldr	r5, [r4, #12]
 80039b8:	f003 0306 	and.w	r3, r3, #6
 80039bc:	2b04      	cmp	r3, #4
 80039be:	bf18      	it	ne
 80039c0:	2500      	movne	r5, #0
 80039c2:	f8d9 2000 	ldr.w	r2, [r9]
 80039c6:	f04f 0900 	mov.w	r9, #0
 80039ca:	bf08      	it	eq
 80039cc:	1aad      	subeq	r5, r5, r2
 80039ce:	68a3      	ldr	r3, [r4, #8]
 80039d0:	6922      	ldr	r2, [r4, #16]
 80039d2:	bf08      	it	eq
 80039d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039d8:	4293      	cmp	r3, r2
 80039da:	bfc4      	itt	gt
 80039dc:	1a9b      	subgt	r3, r3, r2
 80039de:	18ed      	addgt	r5, r5, r3
 80039e0:	341a      	adds	r4, #26
 80039e2:	454d      	cmp	r5, r9
 80039e4:	d11a      	bne.n	8003a1c <_printf_common+0xd8>
 80039e6:	2000      	movs	r0, #0
 80039e8:	e008      	b.n	80039fc <_printf_common+0xb8>
 80039ea:	2301      	movs	r3, #1
 80039ec:	4652      	mov	r2, sl
 80039ee:	4639      	mov	r1, r7
 80039f0:	4630      	mov	r0, r6
 80039f2:	47c0      	blx	r8
 80039f4:	3001      	adds	r0, #1
 80039f6:	d103      	bne.n	8003a00 <_printf_common+0xbc>
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a00:	3501      	adds	r5, #1
 8003a02:	e7c2      	b.n	800398a <_printf_common+0x46>
 8003a04:	2030      	movs	r0, #48	; 0x30
 8003a06:	18e1      	adds	r1, r4, r3
 8003a08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a12:	4422      	add	r2, r4
 8003a14:	3302      	adds	r3, #2
 8003a16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a1a:	e7c4      	b.n	80039a6 <_printf_common+0x62>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	4622      	mov	r2, r4
 8003a20:	4639      	mov	r1, r7
 8003a22:	4630      	mov	r0, r6
 8003a24:	47c0      	blx	r8
 8003a26:	3001      	adds	r0, #1
 8003a28:	d0e6      	beq.n	80039f8 <_printf_common+0xb4>
 8003a2a:	f109 0901 	add.w	r9, r9, #1
 8003a2e:	e7d8      	b.n	80039e2 <_printf_common+0x9e>

08003a30 <_printf_i>:
 8003a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a38:	460c      	mov	r4, r1
 8003a3a:	7e09      	ldrb	r1, [r1, #24]
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	296e      	cmp	r1, #110	; 0x6e
 8003a40:	4617      	mov	r7, r2
 8003a42:	4606      	mov	r6, r0
 8003a44:	4698      	mov	r8, r3
 8003a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a48:	f000 80b3 	beq.w	8003bb2 <_printf_i+0x182>
 8003a4c:	d822      	bhi.n	8003a94 <_printf_i+0x64>
 8003a4e:	2963      	cmp	r1, #99	; 0x63
 8003a50:	d036      	beq.n	8003ac0 <_printf_i+0x90>
 8003a52:	d80a      	bhi.n	8003a6a <_printf_i+0x3a>
 8003a54:	2900      	cmp	r1, #0
 8003a56:	f000 80b9 	beq.w	8003bcc <_printf_i+0x19c>
 8003a5a:	2958      	cmp	r1, #88	; 0x58
 8003a5c:	f000 8083 	beq.w	8003b66 <_printf_i+0x136>
 8003a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003a68:	e032      	b.n	8003ad0 <_printf_i+0xa0>
 8003a6a:	2964      	cmp	r1, #100	; 0x64
 8003a6c:	d001      	beq.n	8003a72 <_printf_i+0x42>
 8003a6e:	2969      	cmp	r1, #105	; 0x69
 8003a70:	d1f6      	bne.n	8003a60 <_printf_i+0x30>
 8003a72:	6820      	ldr	r0, [r4, #0]
 8003a74:	6813      	ldr	r3, [r2, #0]
 8003a76:	0605      	lsls	r5, r0, #24
 8003a78:	f103 0104 	add.w	r1, r3, #4
 8003a7c:	d52a      	bpl.n	8003ad4 <_printf_i+0xa4>
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6011      	str	r1, [r2, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	da03      	bge.n	8003a8e <_printf_i+0x5e>
 8003a86:	222d      	movs	r2, #45	; 0x2d
 8003a88:	425b      	negs	r3, r3
 8003a8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a8e:	486f      	ldr	r0, [pc, #444]	; (8003c4c <_printf_i+0x21c>)
 8003a90:	220a      	movs	r2, #10
 8003a92:	e039      	b.n	8003b08 <_printf_i+0xd8>
 8003a94:	2973      	cmp	r1, #115	; 0x73
 8003a96:	f000 809d 	beq.w	8003bd4 <_printf_i+0x1a4>
 8003a9a:	d808      	bhi.n	8003aae <_printf_i+0x7e>
 8003a9c:	296f      	cmp	r1, #111	; 0x6f
 8003a9e:	d020      	beq.n	8003ae2 <_printf_i+0xb2>
 8003aa0:	2970      	cmp	r1, #112	; 0x70
 8003aa2:	d1dd      	bne.n	8003a60 <_printf_i+0x30>
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	f043 0320 	orr.w	r3, r3, #32
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	e003      	b.n	8003ab6 <_printf_i+0x86>
 8003aae:	2975      	cmp	r1, #117	; 0x75
 8003ab0:	d017      	beq.n	8003ae2 <_printf_i+0xb2>
 8003ab2:	2978      	cmp	r1, #120	; 0x78
 8003ab4:	d1d4      	bne.n	8003a60 <_printf_i+0x30>
 8003ab6:	2378      	movs	r3, #120	; 0x78
 8003ab8:	4865      	ldr	r0, [pc, #404]	; (8003c50 <_printf_i+0x220>)
 8003aba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003abe:	e055      	b.n	8003b6c <_printf_i+0x13c>
 8003ac0:	6813      	ldr	r3, [r2, #0]
 8003ac2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ac6:	1d19      	adds	r1, r3, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6011      	str	r1, [r2, #0]
 8003acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e08c      	b.n	8003bee <_printf_i+0x1be>
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ada:	6011      	str	r1, [r2, #0]
 8003adc:	bf18      	it	ne
 8003ade:	b21b      	sxthne	r3, r3
 8003ae0:	e7cf      	b.n	8003a82 <_printf_i+0x52>
 8003ae2:	6813      	ldr	r3, [r2, #0]
 8003ae4:	6825      	ldr	r5, [r4, #0]
 8003ae6:	1d18      	adds	r0, r3, #4
 8003ae8:	6010      	str	r0, [r2, #0]
 8003aea:	0628      	lsls	r0, r5, #24
 8003aec:	d501      	bpl.n	8003af2 <_printf_i+0xc2>
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	e002      	b.n	8003af8 <_printf_i+0xc8>
 8003af2:	0668      	lsls	r0, r5, #25
 8003af4:	d5fb      	bpl.n	8003aee <_printf_i+0xbe>
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	296f      	cmp	r1, #111	; 0x6f
 8003afa:	bf14      	ite	ne
 8003afc:	220a      	movne	r2, #10
 8003afe:	2208      	moveq	r2, #8
 8003b00:	4852      	ldr	r0, [pc, #328]	; (8003c4c <_printf_i+0x21c>)
 8003b02:	2100      	movs	r1, #0
 8003b04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b08:	6865      	ldr	r5, [r4, #4]
 8003b0a:	2d00      	cmp	r5, #0
 8003b0c:	60a5      	str	r5, [r4, #8]
 8003b0e:	f2c0 8095 	blt.w	8003c3c <_printf_i+0x20c>
 8003b12:	6821      	ldr	r1, [r4, #0]
 8003b14:	f021 0104 	bic.w	r1, r1, #4
 8003b18:	6021      	str	r1, [r4, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d13d      	bne.n	8003b9a <_printf_i+0x16a>
 8003b1e:	2d00      	cmp	r5, #0
 8003b20:	f040 808e 	bne.w	8003c40 <_printf_i+0x210>
 8003b24:	4665      	mov	r5, ip
 8003b26:	2a08      	cmp	r2, #8
 8003b28:	d10b      	bne.n	8003b42 <_printf_i+0x112>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	07db      	lsls	r3, r3, #31
 8003b2e:	d508      	bpl.n	8003b42 <_printf_i+0x112>
 8003b30:	6923      	ldr	r3, [r4, #16]
 8003b32:	6862      	ldr	r2, [r4, #4]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	bfde      	ittt	le
 8003b38:	2330      	movle	r3, #48	; 0x30
 8003b3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b42:	ebac 0305 	sub.w	r3, ip, r5
 8003b46:	6123      	str	r3, [r4, #16]
 8003b48:	f8cd 8000 	str.w	r8, [sp]
 8003b4c:	463b      	mov	r3, r7
 8003b4e:	aa03      	add	r2, sp, #12
 8003b50:	4621      	mov	r1, r4
 8003b52:	4630      	mov	r0, r6
 8003b54:	f7ff fef6 	bl	8003944 <_printf_common>
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d14d      	bne.n	8003bf8 <_printf_i+0x1c8>
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	b005      	add	sp, #20
 8003b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b66:	4839      	ldr	r0, [pc, #228]	; (8003c4c <_printf_i+0x21c>)
 8003b68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003b6c:	6813      	ldr	r3, [r2, #0]
 8003b6e:	6821      	ldr	r1, [r4, #0]
 8003b70:	1d1d      	adds	r5, r3, #4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6015      	str	r5, [r2, #0]
 8003b76:	060a      	lsls	r2, r1, #24
 8003b78:	d50b      	bpl.n	8003b92 <_printf_i+0x162>
 8003b7a:	07ca      	lsls	r2, r1, #31
 8003b7c:	bf44      	itt	mi
 8003b7e:	f041 0120 	orrmi.w	r1, r1, #32
 8003b82:	6021      	strmi	r1, [r4, #0]
 8003b84:	b91b      	cbnz	r3, 8003b8e <_printf_i+0x15e>
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	f022 0220 	bic.w	r2, r2, #32
 8003b8c:	6022      	str	r2, [r4, #0]
 8003b8e:	2210      	movs	r2, #16
 8003b90:	e7b7      	b.n	8003b02 <_printf_i+0xd2>
 8003b92:	064d      	lsls	r5, r1, #25
 8003b94:	bf48      	it	mi
 8003b96:	b29b      	uxthmi	r3, r3
 8003b98:	e7ef      	b.n	8003b7a <_printf_i+0x14a>
 8003b9a:	4665      	mov	r5, ip
 8003b9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ba0:	fb02 3311 	mls	r3, r2, r1, r3
 8003ba4:	5cc3      	ldrb	r3, [r0, r3]
 8003ba6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003baa:	460b      	mov	r3, r1
 8003bac:	2900      	cmp	r1, #0
 8003bae:	d1f5      	bne.n	8003b9c <_printf_i+0x16c>
 8003bb0:	e7b9      	b.n	8003b26 <_printf_i+0xf6>
 8003bb2:	6813      	ldr	r3, [r2, #0]
 8003bb4:	6825      	ldr	r5, [r4, #0]
 8003bb6:	1d18      	adds	r0, r3, #4
 8003bb8:	6961      	ldr	r1, [r4, #20]
 8003bba:	6010      	str	r0, [r2, #0]
 8003bbc:	0628      	lsls	r0, r5, #24
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	d501      	bpl.n	8003bc6 <_printf_i+0x196>
 8003bc2:	6019      	str	r1, [r3, #0]
 8003bc4:	e002      	b.n	8003bcc <_printf_i+0x19c>
 8003bc6:	066a      	lsls	r2, r5, #25
 8003bc8:	d5fb      	bpl.n	8003bc2 <_printf_i+0x192>
 8003bca:	8019      	strh	r1, [r3, #0]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	4665      	mov	r5, ip
 8003bd0:	6123      	str	r3, [r4, #16]
 8003bd2:	e7b9      	b.n	8003b48 <_printf_i+0x118>
 8003bd4:	6813      	ldr	r3, [r2, #0]
 8003bd6:	1d19      	adds	r1, r3, #4
 8003bd8:	6011      	str	r1, [r2, #0]
 8003bda:	681d      	ldr	r5, [r3, #0]
 8003bdc:	6862      	ldr	r2, [r4, #4]
 8003bde:	2100      	movs	r1, #0
 8003be0:	4628      	mov	r0, r5
 8003be2:	f000 feaf 	bl	8004944 <memchr>
 8003be6:	b108      	cbz	r0, 8003bec <_printf_i+0x1bc>
 8003be8:	1b40      	subs	r0, r0, r5
 8003bea:	6060      	str	r0, [r4, #4]
 8003bec:	6863      	ldr	r3, [r4, #4]
 8003bee:	6123      	str	r3, [r4, #16]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf6:	e7a7      	b.n	8003b48 <_printf_i+0x118>
 8003bf8:	6923      	ldr	r3, [r4, #16]
 8003bfa:	462a      	mov	r2, r5
 8003bfc:	4639      	mov	r1, r7
 8003bfe:	4630      	mov	r0, r6
 8003c00:	47c0      	blx	r8
 8003c02:	3001      	adds	r0, #1
 8003c04:	d0aa      	beq.n	8003b5c <_printf_i+0x12c>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	079b      	lsls	r3, r3, #30
 8003c0a:	d413      	bmi.n	8003c34 <_printf_i+0x204>
 8003c0c:	68e0      	ldr	r0, [r4, #12]
 8003c0e:	9b03      	ldr	r3, [sp, #12]
 8003c10:	4298      	cmp	r0, r3
 8003c12:	bfb8      	it	lt
 8003c14:	4618      	movlt	r0, r3
 8003c16:	e7a3      	b.n	8003b60 <_printf_i+0x130>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	464a      	mov	r2, r9
 8003c1c:	4639      	mov	r1, r7
 8003c1e:	4630      	mov	r0, r6
 8003c20:	47c0      	blx	r8
 8003c22:	3001      	adds	r0, #1
 8003c24:	d09a      	beq.n	8003b5c <_printf_i+0x12c>
 8003c26:	3501      	adds	r5, #1
 8003c28:	68e3      	ldr	r3, [r4, #12]
 8003c2a:	9a03      	ldr	r2, [sp, #12]
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	42ab      	cmp	r3, r5
 8003c30:	dcf2      	bgt.n	8003c18 <_printf_i+0x1e8>
 8003c32:	e7eb      	b.n	8003c0c <_printf_i+0x1dc>
 8003c34:	2500      	movs	r5, #0
 8003c36:	f104 0919 	add.w	r9, r4, #25
 8003c3a:	e7f5      	b.n	8003c28 <_printf_i+0x1f8>
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ac      	bne.n	8003b9a <_printf_i+0x16a>
 8003c40:	7803      	ldrb	r3, [r0, #0]
 8003c42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c4a:	e76c      	b.n	8003b26 <_printf_i+0xf6>
 8003c4c:	0800548f 	.word	0x0800548f
 8003c50:	080054a0 	.word	0x080054a0

08003c54 <siprintf>:
 8003c54:	b40e      	push	{r1, r2, r3}
 8003c56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c5a:	b500      	push	{lr}
 8003c5c:	b09c      	sub	sp, #112	; 0x70
 8003c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8003c60:	9002      	str	r0, [sp, #8]
 8003c62:	9006      	str	r0, [sp, #24]
 8003c64:	9107      	str	r1, [sp, #28]
 8003c66:	9104      	str	r1, [sp, #16]
 8003c68:	4808      	ldr	r0, [pc, #32]	; (8003c8c <siprintf+0x38>)
 8003c6a:	4909      	ldr	r1, [pc, #36]	; (8003c90 <siprintf+0x3c>)
 8003c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c70:	9105      	str	r1, [sp, #20]
 8003c72:	6800      	ldr	r0, [r0, #0]
 8003c74:	a902      	add	r1, sp, #8
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	f001 fa68 	bl	800514c <_svfiprintf_r>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	9b02      	ldr	r3, [sp, #8]
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	b01c      	add	sp, #112	; 0x70
 8003c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c88:	b003      	add	sp, #12
 8003c8a:	4770      	bx	lr
 8003c8c:	2000000c 	.word	0x2000000c
 8003c90:	ffff0208 	.word	0xffff0208

08003c94 <quorem>:
 8003c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c98:	6903      	ldr	r3, [r0, #16]
 8003c9a:	690c      	ldr	r4, [r1, #16]
 8003c9c:	4680      	mov	r8, r0
 8003c9e:	42a3      	cmp	r3, r4
 8003ca0:	f2c0 8084 	blt.w	8003dac <quorem+0x118>
 8003ca4:	3c01      	subs	r4, #1
 8003ca6:	f101 0714 	add.w	r7, r1, #20
 8003caa:	f100 0614 	add.w	r6, r0, #20
 8003cae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003cb2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003cb6:	3501      	adds	r5, #1
 8003cb8:	fbb0 f5f5 	udiv	r5, r0, r5
 8003cbc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003cc0:	eb06 030c 	add.w	r3, r6, ip
 8003cc4:	eb07 090c 	add.w	r9, r7, ip
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	b39d      	cbz	r5, 8003d34 <quorem+0xa0>
 8003ccc:	f04f 0a00 	mov.w	sl, #0
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	46b6      	mov	lr, r6
 8003cd4:	46d3      	mov	fp, sl
 8003cd6:	f850 2b04 	ldr.w	r2, [r0], #4
 8003cda:	b293      	uxth	r3, r2
 8003cdc:	fb05 a303 	mla	r3, r5, r3, sl
 8003ce0:	0c12      	lsrs	r2, r2, #16
 8003ce2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003ce6:	fb05 a202 	mla	r2, r5, r2, sl
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	ebab 0303 	sub.w	r3, fp, r3
 8003cf0:	f8de b000 	ldr.w	fp, [lr]
 8003cf4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003cf8:	fa1f fb8b 	uxth.w	fp, fp
 8003cfc:	445b      	add	r3, fp
 8003cfe:	fa1f fb82 	uxth.w	fp, r2
 8003d02:	f8de 2000 	ldr.w	r2, [lr]
 8003d06:	4581      	cmp	r9, r0
 8003d08:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003d0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d16:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003d1a:	f84e 3b04 	str.w	r3, [lr], #4
 8003d1e:	d2da      	bcs.n	8003cd6 <quorem+0x42>
 8003d20:	f856 300c 	ldr.w	r3, [r6, ip]
 8003d24:	b933      	cbnz	r3, 8003d34 <quorem+0xa0>
 8003d26:	9b01      	ldr	r3, [sp, #4]
 8003d28:	3b04      	subs	r3, #4
 8003d2a:	429e      	cmp	r6, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	d331      	bcc.n	8003d94 <quorem+0x100>
 8003d30:	f8c8 4010 	str.w	r4, [r8, #16]
 8003d34:	4640      	mov	r0, r8
 8003d36:	f001 f833 	bl	8004da0 <__mcmp>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	db26      	blt.n	8003d8c <quorem+0xf8>
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f04f 0c00 	mov.w	ip, #0
 8003d44:	3501      	adds	r5, #1
 8003d46:	f857 1b04 	ldr.w	r1, [r7], #4
 8003d4a:	f8d0 e000 	ldr.w	lr, [r0]
 8003d4e:	b28b      	uxth	r3, r1
 8003d50:	ebac 0303 	sub.w	r3, ip, r3
 8003d54:	fa1f f28e 	uxth.w	r2, lr
 8003d58:	4413      	add	r3, r2
 8003d5a:	0c0a      	lsrs	r2, r1, #16
 8003d5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003d60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d6a:	45b9      	cmp	r9, r7
 8003d6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003d70:	f840 3b04 	str.w	r3, [r0], #4
 8003d74:	d2e7      	bcs.n	8003d46 <quorem+0xb2>
 8003d76:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003d7a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003d7e:	b92a      	cbnz	r2, 8003d8c <quorem+0xf8>
 8003d80:	3b04      	subs	r3, #4
 8003d82:	429e      	cmp	r6, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	d30b      	bcc.n	8003da0 <quorem+0x10c>
 8003d88:	f8c8 4010 	str.w	r4, [r8, #16]
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	b003      	add	sp, #12
 8003d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	3b04      	subs	r3, #4
 8003d98:	2a00      	cmp	r2, #0
 8003d9a:	d1c9      	bne.n	8003d30 <quorem+0x9c>
 8003d9c:	3c01      	subs	r4, #1
 8003d9e:	e7c4      	b.n	8003d2a <quorem+0x96>
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	3b04      	subs	r3, #4
 8003da4:	2a00      	cmp	r2, #0
 8003da6:	d1ef      	bne.n	8003d88 <quorem+0xf4>
 8003da8:	3c01      	subs	r4, #1
 8003daa:	e7ea      	b.n	8003d82 <quorem+0xee>
 8003dac:	2000      	movs	r0, #0
 8003dae:	e7ee      	b.n	8003d8e <quorem+0xfa>

08003db0 <_dtoa_r>:
 8003db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db4:	4616      	mov	r6, r2
 8003db6:	461f      	mov	r7, r3
 8003db8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003dba:	b095      	sub	sp, #84	; 0x54
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003dc2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003dc6:	b93d      	cbnz	r5, 8003dd8 <_dtoa_r+0x28>
 8003dc8:	2010      	movs	r0, #16
 8003dca:	f000 fdb3 	bl	8004934 <malloc>
 8003dce:	6260      	str	r0, [r4, #36]	; 0x24
 8003dd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003dd4:	6005      	str	r5, [r0, #0]
 8003dd6:	60c5      	str	r5, [r0, #12]
 8003dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dda:	6819      	ldr	r1, [r3, #0]
 8003ddc:	b151      	cbz	r1, 8003df4 <_dtoa_r+0x44>
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	2301      	movs	r3, #1
 8003de2:	4093      	lsls	r3, r2
 8003de4:	604a      	str	r2, [r1, #4]
 8003de6:	608b      	str	r3, [r1, #8]
 8003de8:	4620      	mov	r0, r4
 8003dea:	f000 fdf8 	bl	80049de <_Bfree>
 8003dee:	2200      	movs	r2, #0
 8003df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	1e3b      	subs	r3, r7, #0
 8003df6:	bfaf      	iteee	ge
 8003df8:	2300      	movge	r3, #0
 8003dfa:	2201      	movlt	r2, #1
 8003dfc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003e00:	9303      	strlt	r3, [sp, #12]
 8003e02:	bfac      	ite	ge
 8003e04:	f8c8 3000 	strge.w	r3, [r8]
 8003e08:	f8c8 2000 	strlt.w	r2, [r8]
 8003e0c:	4bae      	ldr	r3, [pc, #696]	; (80040c8 <_dtoa_r+0x318>)
 8003e0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003e12:	ea33 0308 	bics.w	r3, r3, r8
 8003e16:	d11b      	bne.n	8003e50 <_dtoa_r+0xa0>
 8003e18:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	9b02      	ldr	r3, [sp, #8]
 8003e22:	b923      	cbnz	r3, 8003e2e <_dtoa_r+0x7e>
 8003e24:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f000 8545 	beq.w	80048b8 <_dtoa_r+0xb08>
 8003e2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e30:	b953      	cbnz	r3, 8003e48 <_dtoa_r+0x98>
 8003e32:	4ba6      	ldr	r3, [pc, #664]	; (80040cc <_dtoa_r+0x31c>)
 8003e34:	e021      	b.n	8003e7a <_dtoa_r+0xca>
 8003e36:	4ba6      	ldr	r3, [pc, #664]	; (80040d0 <_dtoa_r+0x320>)
 8003e38:	9306      	str	r3, [sp, #24]
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	9806      	ldr	r0, [sp, #24]
 8003e42:	b015      	add	sp, #84	; 0x54
 8003e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e48:	4ba0      	ldr	r3, [pc, #640]	; (80040cc <_dtoa_r+0x31c>)
 8003e4a:	9306      	str	r3, [sp, #24]
 8003e4c:	3303      	adds	r3, #3
 8003e4e:	e7f5      	b.n	8003e3c <_dtoa_r+0x8c>
 8003e50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003e54:	2200      	movs	r2, #0
 8003e56:	2300      	movs	r3, #0
 8003e58:	4630      	mov	r0, r6
 8003e5a:	4639      	mov	r1, r7
 8003e5c:	f7fc fda4 	bl	80009a8 <__aeabi_dcmpeq>
 8003e60:	4682      	mov	sl, r0
 8003e62:	b160      	cbz	r0, 8003e7e <_dtoa_r+0xce>
 8003e64:	2301      	movs	r3, #1
 8003e66:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8520 	beq.w	80048b2 <_dtoa_r+0xb02>
 8003e72:	4b98      	ldr	r3, [pc, #608]	; (80040d4 <_dtoa_r+0x324>)
 8003e74:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	9306      	str	r3, [sp, #24]
 8003e7c:	e7e0      	b.n	8003e40 <_dtoa_r+0x90>
 8003e7e:	ab12      	add	r3, sp, #72	; 0x48
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	ab13      	add	r3, sp, #76	; 0x4c
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	4632      	mov	r2, r6
 8003e88:	463b      	mov	r3, r7
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f001 f800 	bl	8004e90 <__d2b>
 8003e90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003e94:	4683      	mov	fp, r0
 8003e96:	2d00      	cmp	r5, #0
 8003e98:	d07d      	beq.n	8003f96 <_dtoa_r+0x1e6>
 8003e9a:	46b0      	mov	r8, r6
 8003e9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003ea0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003ea4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003ea8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003eac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	4b89      	ldr	r3, [pc, #548]	; (80040d8 <_dtoa_r+0x328>)
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	f7fc f956 	bl	8000168 <__aeabi_dsub>
 8003ebc:	a37c      	add	r3, pc, #496	; (adr r3, 80040b0 <_dtoa_r+0x300>)
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	f7fc fb09 	bl	80004d8 <__aeabi_dmul>
 8003ec6:	a37c      	add	r3, pc, #496	; (adr r3, 80040b8 <_dtoa_r+0x308>)
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f7fc f94e 	bl	800016c <__adddf3>
 8003ed0:	4606      	mov	r6, r0
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	460f      	mov	r7, r1
 8003ed6:	f7fc fa95 	bl	8000404 <__aeabi_i2d>
 8003eda:	a379      	add	r3, pc, #484	; (adr r3, 80040c0 <_dtoa_r+0x310>)
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f7fc fafa 	bl	80004d8 <__aeabi_dmul>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4630      	mov	r0, r6
 8003eea:	4639      	mov	r1, r7
 8003eec:	f7fc f93e 	bl	800016c <__adddf3>
 8003ef0:	4606      	mov	r6, r0
 8003ef2:	460f      	mov	r7, r1
 8003ef4:	f7fc fda0 	bl	8000a38 <__aeabi_d2iz>
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4682      	mov	sl, r0
 8003efc:	2300      	movs	r3, #0
 8003efe:	4630      	mov	r0, r6
 8003f00:	4639      	mov	r1, r7
 8003f02:	f7fc fd5b 	bl	80009bc <__aeabi_dcmplt>
 8003f06:	b148      	cbz	r0, 8003f1c <_dtoa_r+0x16c>
 8003f08:	4650      	mov	r0, sl
 8003f0a:	f7fc fa7b 	bl	8000404 <__aeabi_i2d>
 8003f0e:	4632      	mov	r2, r6
 8003f10:	463b      	mov	r3, r7
 8003f12:	f7fc fd49 	bl	80009a8 <__aeabi_dcmpeq>
 8003f16:	b908      	cbnz	r0, 8003f1c <_dtoa_r+0x16c>
 8003f18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f1c:	f1ba 0f16 	cmp.w	sl, #22
 8003f20:	d85a      	bhi.n	8003fd8 <_dtoa_r+0x228>
 8003f22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f26:	496d      	ldr	r1, [pc, #436]	; (80040dc <_dtoa_r+0x32c>)
 8003f28:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f30:	f7fc fd62 	bl	80009f8 <__aeabi_dcmpgt>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d051      	beq.n	8003fdc <_dtoa_r+0x22c>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f3e:	930d      	str	r3, [sp, #52]	; 0x34
 8003f40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f42:	1b5d      	subs	r5, r3, r5
 8003f44:	1e6b      	subs	r3, r5, #1
 8003f46:	9307      	str	r3, [sp, #28]
 8003f48:	bf43      	ittte	mi
 8003f4a:	2300      	movmi	r3, #0
 8003f4c:	f1c5 0901 	rsbmi	r9, r5, #1
 8003f50:	9307      	strmi	r3, [sp, #28]
 8003f52:	f04f 0900 	movpl.w	r9, #0
 8003f56:	f1ba 0f00 	cmp.w	sl, #0
 8003f5a:	db41      	blt.n	8003fe0 <_dtoa_r+0x230>
 8003f5c:	9b07      	ldr	r3, [sp, #28]
 8003f5e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003f62:	4453      	add	r3, sl
 8003f64:	9307      	str	r3, [sp, #28]
 8003f66:	2300      	movs	r3, #0
 8003f68:	9308      	str	r3, [sp, #32]
 8003f6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003f6c:	2b09      	cmp	r3, #9
 8003f6e:	f200 808f 	bhi.w	8004090 <_dtoa_r+0x2e0>
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	bfc4      	itt	gt
 8003f76:	3b04      	subgt	r3, #4
 8003f78:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003f7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003f7c:	bfc8      	it	gt
 8003f7e:	2500      	movgt	r5, #0
 8003f80:	f1a3 0302 	sub.w	r3, r3, #2
 8003f84:	bfd8      	it	le
 8003f86:	2501      	movle	r5, #1
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	f200 808d 	bhi.w	80040a8 <_dtoa_r+0x2f8>
 8003f8e:	e8df f003 	tbb	[pc, r3]
 8003f92:	7d7b      	.short	0x7d7b
 8003f94:	6f2f      	.short	0x6f2f
 8003f96:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003f9a:	441d      	add	r5, r3
 8003f9c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003fa0:	2820      	cmp	r0, #32
 8003fa2:	dd13      	ble.n	8003fcc <_dtoa_r+0x21c>
 8003fa4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003fa8:	9b02      	ldr	r3, [sp, #8]
 8003faa:	fa08 f800 	lsl.w	r8, r8, r0
 8003fae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003fb2:	fa23 f000 	lsr.w	r0, r3, r0
 8003fb6:	ea48 0000 	orr.w	r0, r8, r0
 8003fba:	f7fc fa13 	bl	80003e4 <__aeabi_ui2d>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4680      	mov	r8, r0
 8003fc2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003fc6:	3d01      	subs	r5, #1
 8003fc8:	9310      	str	r3, [sp, #64]	; 0x40
 8003fca:	e771      	b.n	8003eb0 <_dtoa_r+0x100>
 8003fcc:	9b02      	ldr	r3, [sp, #8]
 8003fce:	f1c0 0020 	rsb	r0, r0, #32
 8003fd2:	fa03 f000 	lsl.w	r0, r3, r0
 8003fd6:	e7f0      	b.n	8003fba <_dtoa_r+0x20a>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e7b0      	b.n	8003f3e <_dtoa_r+0x18e>
 8003fdc:	900d      	str	r0, [sp, #52]	; 0x34
 8003fde:	e7af      	b.n	8003f40 <_dtoa_r+0x190>
 8003fe0:	f1ca 0300 	rsb	r3, sl, #0
 8003fe4:	9308      	str	r3, [sp, #32]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	eba9 090a 	sub.w	r9, r9, sl
 8003fec:	930c      	str	r3, [sp, #48]	; 0x30
 8003fee:	e7bc      	b.n	8003f6a <_dtoa_r+0x1ba>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	dd74      	ble.n	80040e4 <_dtoa_r+0x334>
 8003ffa:	4698      	mov	r8, r3
 8003ffc:	9304      	str	r3, [sp, #16]
 8003ffe:	2200      	movs	r2, #0
 8004000:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004002:	6072      	str	r2, [r6, #4]
 8004004:	2204      	movs	r2, #4
 8004006:	f102 0014 	add.w	r0, r2, #20
 800400a:	4298      	cmp	r0, r3
 800400c:	6871      	ldr	r1, [r6, #4]
 800400e:	d96e      	bls.n	80040ee <_dtoa_r+0x33e>
 8004010:	4620      	mov	r0, r4
 8004012:	f000 fcb0 	bl	8004976 <_Balloc>
 8004016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004018:	6030      	str	r0, [r6, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f1b8 0f0e 	cmp.w	r8, #14
 8004020:	9306      	str	r3, [sp, #24]
 8004022:	f200 80ed 	bhi.w	8004200 <_dtoa_r+0x450>
 8004026:	2d00      	cmp	r5, #0
 8004028:	f000 80ea 	beq.w	8004200 <_dtoa_r+0x450>
 800402c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004030:	f1ba 0f00 	cmp.w	sl, #0
 8004034:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004038:	dd77      	ble.n	800412a <_dtoa_r+0x37a>
 800403a:	4a28      	ldr	r2, [pc, #160]	; (80040dc <_dtoa_r+0x32c>)
 800403c:	f00a 030f 	and.w	r3, sl, #15
 8004040:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004044:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004048:	06f0      	lsls	r0, r6, #27
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004052:	d568      	bpl.n	8004126 <_dtoa_r+0x376>
 8004054:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004058:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <_dtoa_r+0x330>)
 800405a:	2503      	movs	r5, #3
 800405c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004060:	f7fc fb64 	bl	800072c <__aeabi_ddiv>
 8004064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004068:	f006 060f 	and.w	r6, r6, #15
 800406c:	4f1c      	ldr	r7, [pc, #112]	; (80040e0 <_dtoa_r+0x330>)
 800406e:	e04f      	b.n	8004110 <_dtoa_r+0x360>
 8004070:	2301      	movs	r3, #1
 8004072:	9309      	str	r3, [sp, #36]	; 0x24
 8004074:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004076:	4453      	add	r3, sl
 8004078:	f103 0801 	add.w	r8, r3, #1
 800407c:	9304      	str	r3, [sp, #16]
 800407e:	4643      	mov	r3, r8
 8004080:	2b01      	cmp	r3, #1
 8004082:	bfb8      	it	lt
 8004084:	2301      	movlt	r3, #1
 8004086:	e7ba      	b.n	8003ffe <_dtoa_r+0x24e>
 8004088:	2300      	movs	r3, #0
 800408a:	e7b2      	b.n	8003ff2 <_dtoa_r+0x242>
 800408c:	2300      	movs	r3, #0
 800408e:	e7f0      	b.n	8004072 <_dtoa_r+0x2c2>
 8004090:	2501      	movs	r5, #1
 8004092:	2300      	movs	r3, #0
 8004094:	9509      	str	r5, [sp, #36]	; 0x24
 8004096:	931e      	str	r3, [sp, #120]	; 0x78
 8004098:	f04f 33ff 	mov.w	r3, #4294967295
 800409c:	2200      	movs	r2, #0
 800409e:	9304      	str	r3, [sp, #16]
 80040a0:	4698      	mov	r8, r3
 80040a2:	2312      	movs	r3, #18
 80040a4:	921f      	str	r2, [sp, #124]	; 0x7c
 80040a6:	e7aa      	b.n	8003ffe <_dtoa_r+0x24e>
 80040a8:	2301      	movs	r3, #1
 80040aa:	9309      	str	r3, [sp, #36]	; 0x24
 80040ac:	e7f4      	b.n	8004098 <_dtoa_r+0x2e8>
 80040ae:	bf00      	nop
 80040b0:	636f4361 	.word	0x636f4361
 80040b4:	3fd287a7 	.word	0x3fd287a7
 80040b8:	8b60c8b3 	.word	0x8b60c8b3
 80040bc:	3fc68a28 	.word	0x3fc68a28
 80040c0:	509f79fb 	.word	0x509f79fb
 80040c4:	3fd34413 	.word	0x3fd34413
 80040c8:	7ff00000 	.word	0x7ff00000
 80040cc:	080054ba 	.word	0x080054ba
 80040d0:	080054b1 	.word	0x080054b1
 80040d4:	0800548e 	.word	0x0800548e
 80040d8:	3ff80000 	.word	0x3ff80000
 80040dc:	080054e8 	.word	0x080054e8
 80040e0:	080054c0 	.word	0x080054c0
 80040e4:	2301      	movs	r3, #1
 80040e6:	9304      	str	r3, [sp, #16]
 80040e8:	4698      	mov	r8, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	e7da      	b.n	80040a4 <_dtoa_r+0x2f4>
 80040ee:	3101      	adds	r1, #1
 80040f0:	6071      	str	r1, [r6, #4]
 80040f2:	0052      	lsls	r2, r2, #1
 80040f4:	e787      	b.n	8004006 <_dtoa_r+0x256>
 80040f6:	07f1      	lsls	r1, r6, #31
 80040f8:	d508      	bpl.n	800410c <_dtoa_r+0x35c>
 80040fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80040fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004102:	f7fc f9e9 	bl	80004d8 <__aeabi_dmul>
 8004106:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800410a:	3501      	adds	r5, #1
 800410c:	1076      	asrs	r6, r6, #1
 800410e:	3708      	adds	r7, #8
 8004110:	2e00      	cmp	r6, #0
 8004112:	d1f0      	bne.n	80040f6 <_dtoa_r+0x346>
 8004114:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800411c:	f7fc fb06 	bl	800072c <__aeabi_ddiv>
 8004120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004124:	e01b      	b.n	800415e <_dtoa_r+0x3ae>
 8004126:	2502      	movs	r5, #2
 8004128:	e7a0      	b.n	800406c <_dtoa_r+0x2bc>
 800412a:	f000 80a4 	beq.w	8004276 <_dtoa_r+0x4c6>
 800412e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004132:	f1ca 0600 	rsb	r6, sl, #0
 8004136:	4ba0      	ldr	r3, [pc, #640]	; (80043b8 <_dtoa_r+0x608>)
 8004138:	f006 020f 	and.w	r2, r6, #15
 800413c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f7fc f9c8 	bl	80004d8 <__aeabi_dmul>
 8004148:	2502      	movs	r5, #2
 800414a:	2300      	movs	r3, #0
 800414c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004150:	4f9a      	ldr	r7, [pc, #616]	; (80043bc <_dtoa_r+0x60c>)
 8004152:	1136      	asrs	r6, r6, #4
 8004154:	2e00      	cmp	r6, #0
 8004156:	f040 8083 	bne.w	8004260 <_dtoa_r+0x4b0>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e0      	bne.n	8004120 <_dtoa_r+0x370>
 800415e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 808a 	beq.w	800427a <_dtoa_r+0x4ca>
 8004166:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800416a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800416e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004172:	2200      	movs	r2, #0
 8004174:	4b92      	ldr	r3, [pc, #584]	; (80043c0 <_dtoa_r+0x610>)
 8004176:	f7fc fc21 	bl	80009bc <__aeabi_dcmplt>
 800417a:	2800      	cmp	r0, #0
 800417c:	d07d      	beq.n	800427a <_dtoa_r+0x4ca>
 800417e:	f1b8 0f00 	cmp.w	r8, #0
 8004182:	d07a      	beq.n	800427a <_dtoa_r+0x4ca>
 8004184:	9b04      	ldr	r3, [sp, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	dd36      	ble.n	80041f8 <_dtoa_r+0x448>
 800418a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800418e:	2200      	movs	r2, #0
 8004190:	4b8c      	ldr	r3, [pc, #560]	; (80043c4 <_dtoa_r+0x614>)
 8004192:	f7fc f9a1 	bl	80004d8 <__aeabi_dmul>
 8004196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800419a:	9e04      	ldr	r6, [sp, #16]
 800419c:	f10a 37ff 	add.w	r7, sl, #4294967295
 80041a0:	3501      	adds	r5, #1
 80041a2:	4628      	mov	r0, r5
 80041a4:	f7fc f92e 	bl	8000404 <__aeabi_i2d>
 80041a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041ac:	f7fc f994 	bl	80004d8 <__aeabi_dmul>
 80041b0:	2200      	movs	r2, #0
 80041b2:	4b85      	ldr	r3, [pc, #532]	; (80043c8 <_dtoa_r+0x618>)
 80041b4:	f7fb ffda 	bl	800016c <__adddf3>
 80041b8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80041bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80041c0:	950b      	str	r5, [sp, #44]	; 0x2c
 80041c2:	2e00      	cmp	r6, #0
 80041c4:	d15c      	bne.n	8004280 <_dtoa_r+0x4d0>
 80041c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	4b7f      	ldr	r3, [pc, #508]	; (80043cc <_dtoa_r+0x61c>)
 80041ce:	f7fb ffcb 	bl	8000168 <__aeabi_dsub>
 80041d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041d4:	462b      	mov	r3, r5
 80041d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041da:	f7fc fc0d 	bl	80009f8 <__aeabi_dcmpgt>
 80041de:	2800      	cmp	r0, #0
 80041e0:	f040 8281 	bne.w	80046e6 <_dtoa_r+0x936>
 80041e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041ea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80041ee:	f7fc fbe5 	bl	80009bc <__aeabi_dcmplt>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	f040 8275 	bne.w	80046e2 <_dtoa_r+0x932>
 80041f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80041fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004202:	2b00      	cmp	r3, #0
 8004204:	f2c0 814b 	blt.w	800449e <_dtoa_r+0x6ee>
 8004208:	f1ba 0f0e 	cmp.w	sl, #14
 800420c:	f300 8147 	bgt.w	800449e <_dtoa_r+0x6ee>
 8004210:	4b69      	ldr	r3, [pc, #420]	; (80043b8 <_dtoa_r+0x608>)
 8004212:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800421e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004220:	2b00      	cmp	r3, #0
 8004222:	f280 80d7 	bge.w	80043d4 <_dtoa_r+0x624>
 8004226:	f1b8 0f00 	cmp.w	r8, #0
 800422a:	f300 80d3 	bgt.w	80043d4 <_dtoa_r+0x624>
 800422e:	f040 8257 	bne.w	80046e0 <_dtoa_r+0x930>
 8004232:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004236:	2200      	movs	r2, #0
 8004238:	4b64      	ldr	r3, [pc, #400]	; (80043cc <_dtoa_r+0x61c>)
 800423a:	f7fc f94d 	bl	80004d8 <__aeabi_dmul>
 800423e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004242:	f7fc fbcf 	bl	80009e4 <__aeabi_dcmpge>
 8004246:	4646      	mov	r6, r8
 8004248:	4647      	mov	r7, r8
 800424a:	2800      	cmp	r0, #0
 800424c:	f040 822d 	bne.w	80046aa <_dtoa_r+0x8fa>
 8004250:	9b06      	ldr	r3, [sp, #24]
 8004252:	9a06      	ldr	r2, [sp, #24]
 8004254:	1c5d      	adds	r5, r3, #1
 8004256:	2331      	movs	r3, #49	; 0x31
 8004258:	f10a 0a01 	add.w	sl, sl, #1
 800425c:	7013      	strb	r3, [r2, #0]
 800425e:	e228      	b.n	80046b2 <_dtoa_r+0x902>
 8004260:	07f2      	lsls	r2, r6, #31
 8004262:	d505      	bpl.n	8004270 <_dtoa_r+0x4c0>
 8004264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004268:	f7fc f936 	bl	80004d8 <__aeabi_dmul>
 800426c:	2301      	movs	r3, #1
 800426e:	3501      	adds	r5, #1
 8004270:	1076      	asrs	r6, r6, #1
 8004272:	3708      	adds	r7, #8
 8004274:	e76e      	b.n	8004154 <_dtoa_r+0x3a4>
 8004276:	2502      	movs	r5, #2
 8004278:	e771      	b.n	800415e <_dtoa_r+0x3ae>
 800427a:	4657      	mov	r7, sl
 800427c:	4646      	mov	r6, r8
 800427e:	e790      	b.n	80041a2 <_dtoa_r+0x3f2>
 8004280:	4b4d      	ldr	r3, [pc, #308]	; (80043b8 <_dtoa_r+0x608>)
 8004282:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004286:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800428a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d048      	beq.n	8004322 <_dtoa_r+0x572>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	2000      	movs	r0, #0
 8004296:	494e      	ldr	r1, [pc, #312]	; (80043d0 <_dtoa_r+0x620>)
 8004298:	f7fc fa48 	bl	800072c <__aeabi_ddiv>
 800429c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80042a0:	f7fb ff62 	bl	8000168 <__aeabi_dsub>
 80042a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80042a8:	9d06      	ldr	r5, [sp, #24]
 80042aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042ae:	f7fc fbc3 	bl	8000a38 <__aeabi_d2iz>
 80042b2:	9011      	str	r0, [sp, #68]	; 0x44
 80042b4:	f7fc f8a6 	bl	8000404 <__aeabi_i2d>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042c0:	f7fb ff52 	bl	8000168 <__aeabi_dsub>
 80042c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042ca:	3330      	adds	r3, #48	; 0x30
 80042cc:	f805 3b01 	strb.w	r3, [r5], #1
 80042d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80042d4:	f7fc fb72 	bl	80009bc <__aeabi_dcmplt>
 80042d8:	2800      	cmp	r0, #0
 80042da:	d163      	bne.n	80043a4 <_dtoa_r+0x5f4>
 80042dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042e0:	2000      	movs	r0, #0
 80042e2:	4937      	ldr	r1, [pc, #220]	; (80043c0 <_dtoa_r+0x610>)
 80042e4:	f7fb ff40 	bl	8000168 <__aeabi_dsub>
 80042e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80042ec:	f7fc fb66 	bl	80009bc <__aeabi_dcmplt>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	f040 80b5 	bne.w	8004460 <_dtoa_r+0x6b0>
 80042f6:	9b06      	ldr	r3, [sp, #24]
 80042f8:	1aeb      	subs	r3, r5, r3
 80042fa:	429e      	cmp	r6, r3
 80042fc:	f77f af7c 	ble.w	80041f8 <_dtoa_r+0x448>
 8004300:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004304:	2200      	movs	r2, #0
 8004306:	4b2f      	ldr	r3, [pc, #188]	; (80043c4 <_dtoa_r+0x614>)
 8004308:	f7fc f8e6 	bl	80004d8 <__aeabi_dmul>
 800430c:	2200      	movs	r2, #0
 800430e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004316:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <_dtoa_r+0x614>)
 8004318:	f7fc f8de 	bl	80004d8 <__aeabi_dmul>
 800431c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004320:	e7c3      	b.n	80042aa <_dtoa_r+0x4fa>
 8004322:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004326:	f7fc f8d7 	bl	80004d8 <__aeabi_dmul>
 800432a:	9b06      	ldr	r3, [sp, #24]
 800432c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004330:	199d      	adds	r5, r3, r6
 8004332:	461e      	mov	r6, r3
 8004334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004338:	f7fc fb7e 	bl	8000a38 <__aeabi_d2iz>
 800433c:	9011      	str	r0, [sp, #68]	; 0x44
 800433e:	f7fc f861 	bl	8000404 <__aeabi_i2d>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800434a:	f7fb ff0d 	bl	8000168 <__aeabi_dsub>
 800434e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004354:	3330      	adds	r3, #48	; 0x30
 8004356:	f806 3b01 	strb.w	r3, [r6], #1
 800435a:	42ae      	cmp	r6, r5
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	d124      	bne.n	80043ac <_dtoa_r+0x5fc>
 8004362:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004366:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <_dtoa_r+0x620>)
 8004368:	f7fb ff00 	bl	800016c <__adddf3>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004374:	f7fc fb40 	bl	80009f8 <__aeabi_dcmpgt>
 8004378:	2800      	cmp	r0, #0
 800437a:	d171      	bne.n	8004460 <_dtoa_r+0x6b0>
 800437c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004380:	2000      	movs	r0, #0
 8004382:	4913      	ldr	r1, [pc, #76]	; (80043d0 <_dtoa_r+0x620>)
 8004384:	f7fb fef0 	bl	8000168 <__aeabi_dsub>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004390:	f7fc fb14 	bl	80009bc <__aeabi_dcmplt>
 8004394:	2800      	cmp	r0, #0
 8004396:	f43f af2f 	beq.w	80041f8 <_dtoa_r+0x448>
 800439a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800439e:	1e6a      	subs	r2, r5, #1
 80043a0:	2b30      	cmp	r3, #48	; 0x30
 80043a2:	d001      	beq.n	80043a8 <_dtoa_r+0x5f8>
 80043a4:	46ba      	mov	sl, r7
 80043a6:	e04a      	b.n	800443e <_dtoa_r+0x68e>
 80043a8:	4615      	mov	r5, r2
 80043aa:	e7f6      	b.n	800439a <_dtoa_r+0x5ea>
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <_dtoa_r+0x614>)
 80043ae:	f7fc f893 	bl	80004d8 <__aeabi_dmul>
 80043b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043b6:	e7bd      	b.n	8004334 <_dtoa_r+0x584>
 80043b8:	080054e8 	.word	0x080054e8
 80043bc:	080054c0 	.word	0x080054c0
 80043c0:	3ff00000 	.word	0x3ff00000
 80043c4:	40240000 	.word	0x40240000
 80043c8:	401c0000 	.word	0x401c0000
 80043cc:	40140000 	.word	0x40140000
 80043d0:	3fe00000 	.word	0x3fe00000
 80043d4:	9d06      	ldr	r5, [sp, #24]
 80043d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80043da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043de:	4630      	mov	r0, r6
 80043e0:	4639      	mov	r1, r7
 80043e2:	f7fc f9a3 	bl	800072c <__aeabi_ddiv>
 80043e6:	f7fc fb27 	bl	8000a38 <__aeabi_d2iz>
 80043ea:	4681      	mov	r9, r0
 80043ec:	f7fc f80a 	bl	8000404 <__aeabi_i2d>
 80043f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043f4:	f7fc f870 	bl	80004d8 <__aeabi_dmul>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4630      	mov	r0, r6
 80043fe:	4639      	mov	r1, r7
 8004400:	f7fb feb2 	bl	8000168 <__aeabi_dsub>
 8004404:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004408:	f805 6b01 	strb.w	r6, [r5], #1
 800440c:	9e06      	ldr	r6, [sp, #24]
 800440e:	4602      	mov	r2, r0
 8004410:	1bae      	subs	r6, r5, r6
 8004412:	45b0      	cmp	r8, r6
 8004414:	460b      	mov	r3, r1
 8004416:	d135      	bne.n	8004484 <_dtoa_r+0x6d4>
 8004418:	f7fb fea8 	bl	800016c <__adddf3>
 800441c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004420:	4606      	mov	r6, r0
 8004422:	460f      	mov	r7, r1
 8004424:	f7fc fae8 	bl	80009f8 <__aeabi_dcmpgt>
 8004428:	b9c8      	cbnz	r0, 800445e <_dtoa_r+0x6ae>
 800442a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800442e:	4630      	mov	r0, r6
 8004430:	4639      	mov	r1, r7
 8004432:	f7fc fab9 	bl	80009a8 <__aeabi_dcmpeq>
 8004436:	b110      	cbz	r0, 800443e <_dtoa_r+0x68e>
 8004438:	f019 0f01 	tst.w	r9, #1
 800443c:	d10f      	bne.n	800445e <_dtoa_r+0x6ae>
 800443e:	4659      	mov	r1, fp
 8004440:	4620      	mov	r0, r4
 8004442:	f000 facc 	bl	80049de <_Bfree>
 8004446:	2300      	movs	r3, #0
 8004448:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800444a:	702b      	strb	r3, [r5, #0]
 800444c:	f10a 0301 	add.w	r3, sl, #1
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004454:	2b00      	cmp	r3, #0
 8004456:	f43f acf3 	beq.w	8003e40 <_dtoa_r+0x90>
 800445a:	601d      	str	r5, [r3, #0]
 800445c:	e4f0      	b.n	8003e40 <_dtoa_r+0x90>
 800445e:	4657      	mov	r7, sl
 8004460:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004464:	1e6b      	subs	r3, r5, #1
 8004466:	2a39      	cmp	r2, #57	; 0x39
 8004468:	d106      	bne.n	8004478 <_dtoa_r+0x6c8>
 800446a:	9a06      	ldr	r2, [sp, #24]
 800446c:	429a      	cmp	r2, r3
 800446e:	d107      	bne.n	8004480 <_dtoa_r+0x6d0>
 8004470:	2330      	movs	r3, #48	; 0x30
 8004472:	7013      	strb	r3, [r2, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	3701      	adds	r7, #1
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	3201      	adds	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e791      	b.n	80043a4 <_dtoa_r+0x5f4>
 8004480:	461d      	mov	r5, r3
 8004482:	e7ed      	b.n	8004460 <_dtoa_r+0x6b0>
 8004484:	2200      	movs	r2, #0
 8004486:	4b99      	ldr	r3, [pc, #612]	; (80046ec <_dtoa_r+0x93c>)
 8004488:	f7fc f826 	bl	80004d8 <__aeabi_dmul>
 800448c:	2200      	movs	r2, #0
 800448e:	2300      	movs	r3, #0
 8004490:	4606      	mov	r6, r0
 8004492:	460f      	mov	r7, r1
 8004494:	f7fc fa88 	bl	80009a8 <__aeabi_dcmpeq>
 8004498:	2800      	cmp	r0, #0
 800449a:	d09e      	beq.n	80043da <_dtoa_r+0x62a>
 800449c:	e7cf      	b.n	800443e <_dtoa_r+0x68e>
 800449e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044a0:	2a00      	cmp	r2, #0
 80044a2:	f000 8088 	beq.w	80045b6 <_dtoa_r+0x806>
 80044a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80044a8:	2a01      	cmp	r2, #1
 80044aa:	dc6d      	bgt.n	8004588 <_dtoa_r+0x7d8>
 80044ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044ae:	2a00      	cmp	r2, #0
 80044b0:	d066      	beq.n	8004580 <_dtoa_r+0x7d0>
 80044b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80044b6:	464d      	mov	r5, r9
 80044b8:	9e08      	ldr	r6, [sp, #32]
 80044ba:	9a07      	ldr	r2, [sp, #28]
 80044bc:	2101      	movs	r1, #1
 80044be:	441a      	add	r2, r3
 80044c0:	4620      	mov	r0, r4
 80044c2:	4499      	add	r9, r3
 80044c4:	9207      	str	r2, [sp, #28]
 80044c6:	f000 fb2a 	bl	8004b1e <__i2b>
 80044ca:	4607      	mov	r7, r0
 80044cc:	2d00      	cmp	r5, #0
 80044ce:	dd0b      	ble.n	80044e8 <_dtoa_r+0x738>
 80044d0:	9b07      	ldr	r3, [sp, #28]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	dd08      	ble.n	80044e8 <_dtoa_r+0x738>
 80044d6:	42ab      	cmp	r3, r5
 80044d8:	bfa8      	it	ge
 80044da:	462b      	movge	r3, r5
 80044dc:	9a07      	ldr	r2, [sp, #28]
 80044de:	eba9 0903 	sub.w	r9, r9, r3
 80044e2:	1aed      	subs	r5, r5, r3
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	9307      	str	r3, [sp, #28]
 80044e8:	9b08      	ldr	r3, [sp, #32]
 80044ea:	b1eb      	cbz	r3, 8004528 <_dtoa_r+0x778>
 80044ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d065      	beq.n	80045be <_dtoa_r+0x80e>
 80044f2:	b18e      	cbz	r6, 8004518 <_dtoa_r+0x768>
 80044f4:	4639      	mov	r1, r7
 80044f6:	4632      	mov	r2, r6
 80044f8:	4620      	mov	r0, r4
 80044fa:	f000 fbaf 	bl	8004c5c <__pow5mult>
 80044fe:	465a      	mov	r2, fp
 8004500:	4601      	mov	r1, r0
 8004502:	4607      	mov	r7, r0
 8004504:	4620      	mov	r0, r4
 8004506:	f000 fb13 	bl	8004b30 <__multiply>
 800450a:	4659      	mov	r1, fp
 800450c:	900a      	str	r0, [sp, #40]	; 0x28
 800450e:	4620      	mov	r0, r4
 8004510:	f000 fa65 	bl	80049de <_Bfree>
 8004514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004516:	469b      	mov	fp, r3
 8004518:	9b08      	ldr	r3, [sp, #32]
 800451a:	1b9a      	subs	r2, r3, r6
 800451c:	d004      	beq.n	8004528 <_dtoa_r+0x778>
 800451e:	4659      	mov	r1, fp
 8004520:	4620      	mov	r0, r4
 8004522:	f000 fb9b 	bl	8004c5c <__pow5mult>
 8004526:	4683      	mov	fp, r0
 8004528:	2101      	movs	r1, #1
 800452a:	4620      	mov	r0, r4
 800452c:	f000 faf7 	bl	8004b1e <__i2b>
 8004530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004532:	4606      	mov	r6, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 81c6 	beq.w	80048c6 <_dtoa_r+0xb16>
 800453a:	461a      	mov	r2, r3
 800453c:	4601      	mov	r1, r0
 800453e:	4620      	mov	r0, r4
 8004540:	f000 fb8c 	bl	8004c5c <__pow5mult>
 8004544:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004546:	4606      	mov	r6, r0
 8004548:	2b01      	cmp	r3, #1
 800454a:	dc3e      	bgt.n	80045ca <_dtoa_r+0x81a>
 800454c:	9b02      	ldr	r3, [sp, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d137      	bne.n	80045c2 <_dtoa_r+0x812>
 8004552:	9b03      	ldr	r3, [sp, #12]
 8004554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004558:	2b00      	cmp	r3, #0
 800455a:	d134      	bne.n	80045c6 <_dtoa_r+0x816>
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004562:	0d1b      	lsrs	r3, r3, #20
 8004564:	051b      	lsls	r3, r3, #20
 8004566:	b12b      	cbz	r3, 8004574 <_dtoa_r+0x7c4>
 8004568:	9b07      	ldr	r3, [sp, #28]
 800456a:	f109 0901 	add.w	r9, r9, #1
 800456e:	3301      	adds	r3, #1
 8004570:	9307      	str	r3, [sp, #28]
 8004572:	2301      	movs	r3, #1
 8004574:	9308      	str	r3, [sp, #32]
 8004576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004578:	2b00      	cmp	r3, #0
 800457a:	d128      	bne.n	80045ce <_dtoa_r+0x81e>
 800457c:	2001      	movs	r0, #1
 800457e:	e02e      	b.n	80045de <_dtoa_r+0x82e>
 8004580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004582:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004586:	e796      	b.n	80044b6 <_dtoa_r+0x706>
 8004588:	9b08      	ldr	r3, [sp, #32]
 800458a:	f108 36ff 	add.w	r6, r8, #4294967295
 800458e:	42b3      	cmp	r3, r6
 8004590:	bfb7      	itett	lt
 8004592:	9b08      	ldrlt	r3, [sp, #32]
 8004594:	1b9e      	subge	r6, r3, r6
 8004596:	1af2      	sublt	r2, r6, r3
 8004598:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800459a:	bfbf      	itttt	lt
 800459c:	9608      	strlt	r6, [sp, #32]
 800459e:	189b      	addlt	r3, r3, r2
 80045a0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80045a2:	2600      	movlt	r6, #0
 80045a4:	f1b8 0f00 	cmp.w	r8, #0
 80045a8:	bfb9      	ittee	lt
 80045aa:	eba9 0508 	sublt.w	r5, r9, r8
 80045ae:	2300      	movlt	r3, #0
 80045b0:	464d      	movge	r5, r9
 80045b2:	4643      	movge	r3, r8
 80045b4:	e781      	b.n	80044ba <_dtoa_r+0x70a>
 80045b6:	9e08      	ldr	r6, [sp, #32]
 80045b8:	464d      	mov	r5, r9
 80045ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80045bc:	e786      	b.n	80044cc <_dtoa_r+0x71c>
 80045be:	9a08      	ldr	r2, [sp, #32]
 80045c0:	e7ad      	b.n	800451e <_dtoa_r+0x76e>
 80045c2:	2300      	movs	r3, #0
 80045c4:	e7d6      	b.n	8004574 <_dtoa_r+0x7c4>
 80045c6:	9b02      	ldr	r3, [sp, #8]
 80045c8:	e7d4      	b.n	8004574 <_dtoa_r+0x7c4>
 80045ca:	2300      	movs	r3, #0
 80045cc:	9308      	str	r3, [sp, #32]
 80045ce:	6933      	ldr	r3, [r6, #16]
 80045d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80045d4:	6918      	ldr	r0, [r3, #16]
 80045d6:	f000 fa54 	bl	8004a82 <__hi0bits>
 80045da:	f1c0 0020 	rsb	r0, r0, #32
 80045de:	9b07      	ldr	r3, [sp, #28]
 80045e0:	4418      	add	r0, r3
 80045e2:	f010 001f 	ands.w	r0, r0, #31
 80045e6:	d047      	beq.n	8004678 <_dtoa_r+0x8c8>
 80045e8:	f1c0 0320 	rsb	r3, r0, #32
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	dd3b      	ble.n	8004668 <_dtoa_r+0x8b8>
 80045f0:	9b07      	ldr	r3, [sp, #28]
 80045f2:	f1c0 001c 	rsb	r0, r0, #28
 80045f6:	4481      	add	r9, r0
 80045f8:	4405      	add	r5, r0
 80045fa:	4403      	add	r3, r0
 80045fc:	9307      	str	r3, [sp, #28]
 80045fe:	f1b9 0f00 	cmp.w	r9, #0
 8004602:	dd05      	ble.n	8004610 <_dtoa_r+0x860>
 8004604:	4659      	mov	r1, fp
 8004606:	464a      	mov	r2, r9
 8004608:	4620      	mov	r0, r4
 800460a:	f000 fb75 	bl	8004cf8 <__lshift>
 800460e:	4683      	mov	fp, r0
 8004610:	9b07      	ldr	r3, [sp, #28]
 8004612:	2b00      	cmp	r3, #0
 8004614:	dd05      	ble.n	8004622 <_dtoa_r+0x872>
 8004616:	4631      	mov	r1, r6
 8004618:	461a      	mov	r2, r3
 800461a:	4620      	mov	r0, r4
 800461c:	f000 fb6c 	bl	8004cf8 <__lshift>
 8004620:	4606      	mov	r6, r0
 8004622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004624:	b353      	cbz	r3, 800467c <_dtoa_r+0x8cc>
 8004626:	4631      	mov	r1, r6
 8004628:	4658      	mov	r0, fp
 800462a:	f000 fbb9 	bl	8004da0 <__mcmp>
 800462e:	2800      	cmp	r0, #0
 8004630:	da24      	bge.n	800467c <_dtoa_r+0x8cc>
 8004632:	2300      	movs	r3, #0
 8004634:	4659      	mov	r1, fp
 8004636:	220a      	movs	r2, #10
 8004638:	4620      	mov	r0, r4
 800463a:	f000 f9e7 	bl	8004a0c <__multadd>
 800463e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004640:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004644:	4683      	mov	fp, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8144 	beq.w	80048d4 <_dtoa_r+0xb24>
 800464c:	2300      	movs	r3, #0
 800464e:	4639      	mov	r1, r7
 8004650:	220a      	movs	r2, #10
 8004652:	4620      	mov	r0, r4
 8004654:	f000 f9da 	bl	8004a0c <__multadd>
 8004658:	9b04      	ldr	r3, [sp, #16]
 800465a:	4607      	mov	r7, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	dc4d      	bgt.n	80046fc <_dtoa_r+0x94c>
 8004660:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004662:	2b02      	cmp	r3, #2
 8004664:	dd4a      	ble.n	80046fc <_dtoa_r+0x94c>
 8004666:	e011      	b.n	800468c <_dtoa_r+0x8dc>
 8004668:	d0c9      	beq.n	80045fe <_dtoa_r+0x84e>
 800466a:	9a07      	ldr	r2, [sp, #28]
 800466c:	331c      	adds	r3, #28
 800466e:	441a      	add	r2, r3
 8004670:	4499      	add	r9, r3
 8004672:	441d      	add	r5, r3
 8004674:	4613      	mov	r3, r2
 8004676:	e7c1      	b.n	80045fc <_dtoa_r+0x84c>
 8004678:	4603      	mov	r3, r0
 800467a:	e7f6      	b.n	800466a <_dtoa_r+0x8ba>
 800467c:	f1b8 0f00 	cmp.w	r8, #0
 8004680:	dc36      	bgt.n	80046f0 <_dtoa_r+0x940>
 8004682:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004684:	2b02      	cmp	r3, #2
 8004686:	dd33      	ble.n	80046f0 <_dtoa_r+0x940>
 8004688:	f8cd 8010 	str.w	r8, [sp, #16]
 800468c:	9b04      	ldr	r3, [sp, #16]
 800468e:	b963      	cbnz	r3, 80046aa <_dtoa_r+0x8fa>
 8004690:	4631      	mov	r1, r6
 8004692:	2205      	movs	r2, #5
 8004694:	4620      	mov	r0, r4
 8004696:	f000 f9b9 	bl	8004a0c <__multadd>
 800469a:	4601      	mov	r1, r0
 800469c:	4606      	mov	r6, r0
 800469e:	4658      	mov	r0, fp
 80046a0:	f000 fb7e 	bl	8004da0 <__mcmp>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	f73f add3 	bgt.w	8004250 <_dtoa_r+0x4a0>
 80046aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80046ac:	9d06      	ldr	r5, [sp, #24]
 80046ae:	ea6f 0a03 	mvn.w	sl, r3
 80046b2:	f04f 0900 	mov.w	r9, #0
 80046b6:	4631      	mov	r1, r6
 80046b8:	4620      	mov	r0, r4
 80046ba:	f000 f990 	bl	80049de <_Bfree>
 80046be:	2f00      	cmp	r7, #0
 80046c0:	f43f aebd 	beq.w	800443e <_dtoa_r+0x68e>
 80046c4:	f1b9 0f00 	cmp.w	r9, #0
 80046c8:	d005      	beq.n	80046d6 <_dtoa_r+0x926>
 80046ca:	45b9      	cmp	r9, r7
 80046cc:	d003      	beq.n	80046d6 <_dtoa_r+0x926>
 80046ce:	4649      	mov	r1, r9
 80046d0:	4620      	mov	r0, r4
 80046d2:	f000 f984 	bl	80049de <_Bfree>
 80046d6:	4639      	mov	r1, r7
 80046d8:	4620      	mov	r0, r4
 80046da:	f000 f980 	bl	80049de <_Bfree>
 80046de:	e6ae      	b.n	800443e <_dtoa_r+0x68e>
 80046e0:	2600      	movs	r6, #0
 80046e2:	4637      	mov	r7, r6
 80046e4:	e7e1      	b.n	80046aa <_dtoa_r+0x8fa>
 80046e6:	46ba      	mov	sl, r7
 80046e8:	4637      	mov	r7, r6
 80046ea:	e5b1      	b.n	8004250 <_dtoa_r+0x4a0>
 80046ec:	40240000 	.word	0x40240000
 80046f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f2:	f8cd 8010 	str.w	r8, [sp, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80f3 	beq.w	80048e2 <_dtoa_r+0xb32>
 80046fc:	2d00      	cmp	r5, #0
 80046fe:	dd05      	ble.n	800470c <_dtoa_r+0x95c>
 8004700:	4639      	mov	r1, r7
 8004702:	462a      	mov	r2, r5
 8004704:	4620      	mov	r0, r4
 8004706:	f000 faf7 	bl	8004cf8 <__lshift>
 800470a:	4607      	mov	r7, r0
 800470c:	9b08      	ldr	r3, [sp, #32]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d04c      	beq.n	80047ac <_dtoa_r+0x9fc>
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4620      	mov	r0, r4
 8004716:	f000 f92e 	bl	8004976 <_Balloc>
 800471a:	4605      	mov	r5, r0
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	f107 010c 	add.w	r1, r7, #12
 8004722:	3202      	adds	r2, #2
 8004724:	0092      	lsls	r2, r2, #2
 8004726:	300c      	adds	r0, #12
 8004728:	f000 f91a 	bl	8004960 <memcpy>
 800472c:	2201      	movs	r2, #1
 800472e:	4629      	mov	r1, r5
 8004730:	4620      	mov	r0, r4
 8004732:	f000 fae1 	bl	8004cf8 <__lshift>
 8004736:	46b9      	mov	r9, r7
 8004738:	4607      	mov	r7, r0
 800473a:	9b06      	ldr	r3, [sp, #24]
 800473c:	9307      	str	r3, [sp, #28]
 800473e:	9b02      	ldr	r3, [sp, #8]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	9308      	str	r3, [sp, #32]
 8004746:	4631      	mov	r1, r6
 8004748:	4658      	mov	r0, fp
 800474a:	f7ff faa3 	bl	8003c94 <quorem>
 800474e:	4649      	mov	r1, r9
 8004750:	4605      	mov	r5, r0
 8004752:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004756:	4658      	mov	r0, fp
 8004758:	f000 fb22 	bl	8004da0 <__mcmp>
 800475c:	463a      	mov	r2, r7
 800475e:	9002      	str	r0, [sp, #8]
 8004760:	4631      	mov	r1, r6
 8004762:	4620      	mov	r0, r4
 8004764:	f000 fb36 	bl	8004dd4 <__mdiff>
 8004768:	68c3      	ldr	r3, [r0, #12]
 800476a:	4602      	mov	r2, r0
 800476c:	bb03      	cbnz	r3, 80047b0 <_dtoa_r+0xa00>
 800476e:	4601      	mov	r1, r0
 8004770:	9009      	str	r0, [sp, #36]	; 0x24
 8004772:	4658      	mov	r0, fp
 8004774:	f000 fb14 	bl	8004da0 <__mcmp>
 8004778:	4603      	mov	r3, r0
 800477a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800477c:	4611      	mov	r1, r2
 800477e:	4620      	mov	r0, r4
 8004780:	9309      	str	r3, [sp, #36]	; 0x24
 8004782:	f000 f92c 	bl	80049de <_Bfree>
 8004786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004788:	b9a3      	cbnz	r3, 80047b4 <_dtoa_r+0xa04>
 800478a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800478c:	b992      	cbnz	r2, 80047b4 <_dtoa_r+0xa04>
 800478e:	9a08      	ldr	r2, [sp, #32]
 8004790:	b982      	cbnz	r2, 80047b4 <_dtoa_r+0xa04>
 8004792:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004796:	d029      	beq.n	80047ec <_dtoa_r+0xa3c>
 8004798:	9b02      	ldr	r3, [sp, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	dd01      	ble.n	80047a2 <_dtoa_r+0x9f2>
 800479e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80047a2:	9b07      	ldr	r3, [sp, #28]
 80047a4:	1c5d      	adds	r5, r3, #1
 80047a6:	f883 8000 	strb.w	r8, [r3]
 80047aa:	e784      	b.n	80046b6 <_dtoa_r+0x906>
 80047ac:	4638      	mov	r0, r7
 80047ae:	e7c2      	b.n	8004736 <_dtoa_r+0x986>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e7e3      	b.n	800477c <_dtoa_r+0x9cc>
 80047b4:	9a02      	ldr	r2, [sp, #8]
 80047b6:	2a00      	cmp	r2, #0
 80047b8:	db04      	blt.n	80047c4 <_dtoa_r+0xa14>
 80047ba:	d123      	bne.n	8004804 <_dtoa_r+0xa54>
 80047bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80047be:	bb0a      	cbnz	r2, 8004804 <_dtoa_r+0xa54>
 80047c0:	9a08      	ldr	r2, [sp, #32]
 80047c2:	b9fa      	cbnz	r2, 8004804 <_dtoa_r+0xa54>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	ddec      	ble.n	80047a2 <_dtoa_r+0x9f2>
 80047c8:	4659      	mov	r1, fp
 80047ca:	2201      	movs	r2, #1
 80047cc:	4620      	mov	r0, r4
 80047ce:	f000 fa93 	bl	8004cf8 <__lshift>
 80047d2:	4631      	mov	r1, r6
 80047d4:	4683      	mov	fp, r0
 80047d6:	f000 fae3 	bl	8004da0 <__mcmp>
 80047da:	2800      	cmp	r0, #0
 80047dc:	dc03      	bgt.n	80047e6 <_dtoa_r+0xa36>
 80047de:	d1e0      	bne.n	80047a2 <_dtoa_r+0x9f2>
 80047e0:	f018 0f01 	tst.w	r8, #1
 80047e4:	d0dd      	beq.n	80047a2 <_dtoa_r+0x9f2>
 80047e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80047ea:	d1d8      	bne.n	800479e <_dtoa_r+0x9ee>
 80047ec:	9b07      	ldr	r3, [sp, #28]
 80047ee:	9a07      	ldr	r2, [sp, #28]
 80047f0:	1c5d      	adds	r5, r3, #1
 80047f2:	2339      	movs	r3, #57	; 0x39
 80047f4:	7013      	strb	r3, [r2, #0]
 80047f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047fa:	1e6a      	subs	r2, r5, #1
 80047fc:	2b39      	cmp	r3, #57	; 0x39
 80047fe:	d04d      	beq.n	800489c <_dtoa_r+0xaec>
 8004800:	3301      	adds	r3, #1
 8004802:	e052      	b.n	80048aa <_dtoa_r+0xafa>
 8004804:	9a07      	ldr	r2, [sp, #28]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f102 0501 	add.w	r5, r2, #1
 800480c:	dd06      	ble.n	800481c <_dtoa_r+0xa6c>
 800480e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004812:	d0eb      	beq.n	80047ec <_dtoa_r+0xa3c>
 8004814:	f108 0801 	add.w	r8, r8, #1
 8004818:	9b07      	ldr	r3, [sp, #28]
 800481a:	e7c4      	b.n	80047a6 <_dtoa_r+0x9f6>
 800481c:	9b06      	ldr	r3, [sp, #24]
 800481e:	9a04      	ldr	r2, [sp, #16]
 8004820:	1aeb      	subs	r3, r5, r3
 8004822:	4293      	cmp	r3, r2
 8004824:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004828:	d021      	beq.n	800486e <_dtoa_r+0xabe>
 800482a:	4659      	mov	r1, fp
 800482c:	2300      	movs	r3, #0
 800482e:	220a      	movs	r2, #10
 8004830:	4620      	mov	r0, r4
 8004832:	f000 f8eb 	bl	8004a0c <__multadd>
 8004836:	45b9      	cmp	r9, r7
 8004838:	4683      	mov	fp, r0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	f04f 020a 	mov.w	r2, #10
 8004842:	4649      	mov	r1, r9
 8004844:	4620      	mov	r0, r4
 8004846:	d105      	bne.n	8004854 <_dtoa_r+0xaa4>
 8004848:	f000 f8e0 	bl	8004a0c <__multadd>
 800484c:	4681      	mov	r9, r0
 800484e:	4607      	mov	r7, r0
 8004850:	9507      	str	r5, [sp, #28]
 8004852:	e778      	b.n	8004746 <_dtoa_r+0x996>
 8004854:	f000 f8da 	bl	8004a0c <__multadd>
 8004858:	4639      	mov	r1, r7
 800485a:	4681      	mov	r9, r0
 800485c:	2300      	movs	r3, #0
 800485e:	220a      	movs	r2, #10
 8004860:	4620      	mov	r0, r4
 8004862:	f000 f8d3 	bl	8004a0c <__multadd>
 8004866:	4607      	mov	r7, r0
 8004868:	e7f2      	b.n	8004850 <_dtoa_r+0xaa0>
 800486a:	f04f 0900 	mov.w	r9, #0
 800486e:	4659      	mov	r1, fp
 8004870:	2201      	movs	r2, #1
 8004872:	4620      	mov	r0, r4
 8004874:	f000 fa40 	bl	8004cf8 <__lshift>
 8004878:	4631      	mov	r1, r6
 800487a:	4683      	mov	fp, r0
 800487c:	f000 fa90 	bl	8004da0 <__mcmp>
 8004880:	2800      	cmp	r0, #0
 8004882:	dcb8      	bgt.n	80047f6 <_dtoa_r+0xa46>
 8004884:	d102      	bne.n	800488c <_dtoa_r+0xadc>
 8004886:	f018 0f01 	tst.w	r8, #1
 800488a:	d1b4      	bne.n	80047f6 <_dtoa_r+0xa46>
 800488c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004890:	1e6a      	subs	r2, r5, #1
 8004892:	2b30      	cmp	r3, #48	; 0x30
 8004894:	f47f af0f 	bne.w	80046b6 <_dtoa_r+0x906>
 8004898:	4615      	mov	r5, r2
 800489a:	e7f7      	b.n	800488c <_dtoa_r+0xadc>
 800489c:	9b06      	ldr	r3, [sp, #24]
 800489e:	4293      	cmp	r3, r2
 80048a0:	d105      	bne.n	80048ae <_dtoa_r+0xafe>
 80048a2:	2331      	movs	r3, #49	; 0x31
 80048a4:	9a06      	ldr	r2, [sp, #24]
 80048a6:	f10a 0a01 	add.w	sl, sl, #1
 80048aa:	7013      	strb	r3, [r2, #0]
 80048ac:	e703      	b.n	80046b6 <_dtoa_r+0x906>
 80048ae:	4615      	mov	r5, r2
 80048b0:	e7a1      	b.n	80047f6 <_dtoa_r+0xa46>
 80048b2:	4b17      	ldr	r3, [pc, #92]	; (8004910 <_dtoa_r+0xb60>)
 80048b4:	f7ff bae1 	b.w	8003e7a <_dtoa_r+0xca>
 80048b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f47f aabb 	bne.w	8003e36 <_dtoa_r+0x86>
 80048c0:	4b14      	ldr	r3, [pc, #80]	; (8004914 <_dtoa_r+0xb64>)
 80048c2:	f7ff bada 	b.w	8003e7a <_dtoa_r+0xca>
 80048c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	f77f ae3f 	ble.w	800454c <_dtoa_r+0x79c>
 80048ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048d0:	9308      	str	r3, [sp, #32]
 80048d2:	e653      	b.n	800457c <_dtoa_r+0x7cc>
 80048d4:	9b04      	ldr	r3, [sp, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	dc03      	bgt.n	80048e2 <_dtoa_r+0xb32>
 80048da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80048dc:	2b02      	cmp	r3, #2
 80048de:	f73f aed5 	bgt.w	800468c <_dtoa_r+0x8dc>
 80048e2:	9d06      	ldr	r5, [sp, #24]
 80048e4:	4631      	mov	r1, r6
 80048e6:	4658      	mov	r0, fp
 80048e8:	f7ff f9d4 	bl	8003c94 <quorem>
 80048ec:	9b06      	ldr	r3, [sp, #24]
 80048ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80048f2:	f805 8b01 	strb.w	r8, [r5], #1
 80048f6:	9a04      	ldr	r2, [sp, #16]
 80048f8:	1aeb      	subs	r3, r5, r3
 80048fa:	429a      	cmp	r2, r3
 80048fc:	ddb5      	ble.n	800486a <_dtoa_r+0xaba>
 80048fe:	4659      	mov	r1, fp
 8004900:	2300      	movs	r3, #0
 8004902:	220a      	movs	r2, #10
 8004904:	4620      	mov	r0, r4
 8004906:	f000 f881 	bl	8004a0c <__multadd>
 800490a:	4683      	mov	fp, r0
 800490c:	e7ea      	b.n	80048e4 <_dtoa_r+0xb34>
 800490e:	bf00      	nop
 8004910:	0800548d 	.word	0x0800548d
 8004914:	080054b1 	.word	0x080054b1

08004918 <_localeconv_r>:
 8004918:	4b04      	ldr	r3, [pc, #16]	; (800492c <_localeconv_r+0x14>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a18      	ldr	r0, [r3, #32]
 800491e:	4b04      	ldr	r3, [pc, #16]	; (8004930 <_localeconv_r+0x18>)
 8004920:	2800      	cmp	r0, #0
 8004922:	bf08      	it	eq
 8004924:	4618      	moveq	r0, r3
 8004926:	30f0      	adds	r0, #240	; 0xf0
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	2000000c 	.word	0x2000000c
 8004930:	20000070 	.word	0x20000070

08004934 <malloc>:
 8004934:	4b02      	ldr	r3, [pc, #8]	; (8004940 <malloc+0xc>)
 8004936:	4601      	mov	r1, r0
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	f000 bb53 	b.w	8004fe4 <_malloc_r>
 800493e:	bf00      	nop
 8004940:	2000000c 	.word	0x2000000c

08004944 <memchr>:
 8004944:	b510      	push	{r4, lr}
 8004946:	b2c9      	uxtb	r1, r1
 8004948:	4402      	add	r2, r0
 800494a:	4290      	cmp	r0, r2
 800494c:	4603      	mov	r3, r0
 800494e:	d101      	bne.n	8004954 <memchr+0x10>
 8004950:	2300      	movs	r3, #0
 8004952:	e003      	b.n	800495c <memchr+0x18>
 8004954:	781c      	ldrb	r4, [r3, #0]
 8004956:	3001      	adds	r0, #1
 8004958:	428c      	cmp	r4, r1
 800495a:	d1f6      	bne.n	800494a <memchr+0x6>
 800495c:	4618      	mov	r0, r3
 800495e:	bd10      	pop	{r4, pc}

08004960 <memcpy>:
 8004960:	b510      	push	{r4, lr}
 8004962:	1e43      	subs	r3, r0, #1
 8004964:	440a      	add	r2, r1
 8004966:	4291      	cmp	r1, r2
 8004968:	d100      	bne.n	800496c <memcpy+0xc>
 800496a:	bd10      	pop	{r4, pc}
 800496c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004970:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004974:	e7f7      	b.n	8004966 <memcpy+0x6>

08004976 <_Balloc>:
 8004976:	b570      	push	{r4, r5, r6, lr}
 8004978:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800497a:	4604      	mov	r4, r0
 800497c:	460e      	mov	r6, r1
 800497e:	b93d      	cbnz	r5, 8004990 <_Balloc+0x1a>
 8004980:	2010      	movs	r0, #16
 8004982:	f7ff ffd7 	bl	8004934 <malloc>
 8004986:	6260      	str	r0, [r4, #36]	; 0x24
 8004988:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800498c:	6005      	str	r5, [r0, #0]
 800498e:	60c5      	str	r5, [r0, #12]
 8004990:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004992:	68eb      	ldr	r3, [r5, #12]
 8004994:	b183      	cbz	r3, 80049b8 <_Balloc+0x42>
 8004996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800499e:	b9b8      	cbnz	r0, 80049d0 <_Balloc+0x5a>
 80049a0:	2101      	movs	r1, #1
 80049a2:	fa01 f506 	lsl.w	r5, r1, r6
 80049a6:	1d6a      	adds	r2, r5, #5
 80049a8:	0092      	lsls	r2, r2, #2
 80049aa:	4620      	mov	r0, r4
 80049ac:	f000 fabf 	bl	8004f2e <_calloc_r>
 80049b0:	b160      	cbz	r0, 80049cc <_Balloc+0x56>
 80049b2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80049b6:	e00e      	b.n	80049d6 <_Balloc+0x60>
 80049b8:	2221      	movs	r2, #33	; 0x21
 80049ba:	2104      	movs	r1, #4
 80049bc:	4620      	mov	r0, r4
 80049be:	f000 fab6 	bl	8004f2e <_calloc_r>
 80049c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049c4:	60e8      	str	r0, [r5, #12]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e4      	bne.n	8004996 <_Balloc+0x20>
 80049cc:	2000      	movs	r0, #0
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	6802      	ldr	r2, [r0, #0]
 80049d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80049d6:	2300      	movs	r3, #0
 80049d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80049dc:	e7f7      	b.n	80049ce <_Balloc+0x58>

080049de <_Bfree>:
 80049de:	b570      	push	{r4, r5, r6, lr}
 80049e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80049e2:	4606      	mov	r6, r0
 80049e4:	460d      	mov	r5, r1
 80049e6:	b93c      	cbnz	r4, 80049f8 <_Bfree+0x1a>
 80049e8:	2010      	movs	r0, #16
 80049ea:	f7ff ffa3 	bl	8004934 <malloc>
 80049ee:	6270      	str	r0, [r6, #36]	; 0x24
 80049f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80049f4:	6004      	str	r4, [r0, #0]
 80049f6:	60c4      	str	r4, [r0, #12]
 80049f8:	b13d      	cbz	r5, 8004a0a <_Bfree+0x2c>
 80049fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80049fc:	686a      	ldr	r2, [r5, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a04:	6029      	str	r1, [r5, #0]
 8004a06:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}

08004a0c <__multadd>:
 8004a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a10:	461f      	mov	r7, r3
 8004a12:	4606      	mov	r6, r0
 8004a14:	460c      	mov	r4, r1
 8004a16:	2300      	movs	r3, #0
 8004a18:	690d      	ldr	r5, [r1, #16]
 8004a1a:	f101 0c14 	add.w	ip, r1, #20
 8004a1e:	f8dc 0000 	ldr.w	r0, [ip]
 8004a22:	3301      	adds	r3, #1
 8004a24:	b281      	uxth	r1, r0
 8004a26:	fb02 7101 	mla	r1, r2, r1, r7
 8004a2a:	0c00      	lsrs	r0, r0, #16
 8004a2c:	0c0f      	lsrs	r7, r1, #16
 8004a2e:	fb02 7000 	mla	r0, r2, r0, r7
 8004a32:	b289      	uxth	r1, r1
 8004a34:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004a38:	429d      	cmp	r5, r3
 8004a3a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004a3e:	f84c 1b04 	str.w	r1, [ip], #4
 8004a42:	dcec      	bgt.n	8004a1e <__multadd+0x12>
 8004a44:	b1d7      	cbz	r7, 8004a7c <__multadd+0x70>
 8004a46:	68a3      	ldr	r3, [r4, #8]
 8004a48:	42ab      	cmp	r3, r5
 8004a4a:	dc12      	bgt.n	8004a72 <__multadd+0x66>
 8004a4c:	6861      	ldr	r1, [r4, #4]
 8004a4e:	4630      	mov	r0, r6
 8004a50:	3101      	adds	r1, #1
 8004a52:	f7ff ff90 	bl	8004976 <_Balloc>
 8004a56:	4680      	mov	r8, r0
 8004a58:	6922      	ldr	r2, [r4, #16]
 8004a5a:	f104 010c 	add.w	r1, r4, #12
 8004a5e:	3202      	adds	r2, #2
 8004a60:	0092      	lsls	r2, r2, #2
 8004a62:	300c      	adds	r0, #12
 8004a64:	f7ff ff7c 	bl	8004960 <memcpy>
 8004a68:	4621      	mov	r1, r4
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f7ff ffb7 	bl	80049de <_Bfree>
 8004a70:	4644      	mov	r4, r8
 8004a72:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004a76:	3501      	adds	r5, #1
 8004a78:	615f      	str	r7, [r3, #20]
 8004a7a:	6125      	str	r5, [r4, #16]
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004a82 <__hi0bits>:
 8004a82:	0c02      	lsrs	r2, r0, #16
 8004a84:	0412      	lsls	r2, r2, #16
 8004a86:	4603      	mov	r3, r0
 8004a88:	b9b2      	cbnz	r2, 8004ab8 <__hi0bits+0x36>
 8004a8a:	0403      	lsls	r3, r0, #16
 8004a8c:	2010      	movs	r0, #16
 8004a8e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004a92:	bf04      	itt	eq
 8004a94:	021b      	lsleq	r3, r3, #8
 8004a96:	3008      	addeq	r0, #8
 8004a98:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004a9c:	bf04      	itt	eq
 8004a9e:	011b      	lsleq	r3, r3, #4
 8004aa0:	3004      	addeq	r0, #4
 8004aa2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004aa6:	bf04      	itt	eq
 8004aa8:	009b      	lsleq	r3, r3, #2
 8004aaa:	3002      	addeq	r0, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	db06      	blt.n	8004abe <__hi0bits+0x3c>
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	d503      	bpl.n	8004abc <__hi0bits+0x3a>
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	4770      	bx	lr
 8004ab8:	2000      	movs	r0, #0
 8004aba:	e7e8      	b.n	8004a8e <__hi0bits+0xc>
 8004abc:	2020      	movs	r0, #32
 8004abe:	4770      	bx	lr

08004ac0 <__lo0bits>:
 8004ac0:	6803      	ldr	r3, [r0, #0]
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	f013 0207 	ands.w	r2, r3, #7
 8004ac8:	d00b      	beq.n	8004ae2 <__lo0bits+0x22>
 8004aca:	07da      	lsls	r2, r3, #31
 8004acc:	d423      	bmi.n	8004b16 <__lo0bits+0x56>
 8004ace:	0798      	lsls	r0, r3, #30
 8004ad0:	bf49      	itett	mi
 8004ad2:	085b      	lsrmi	r3, r3, #1
 8004ad4:	089b      	lsrpl	r3, r3, #2
 8004ad6:	2001      	movmi	r0, #1
 8004ad8:	600b      	strmi	r3, [r1, #0]
 8004ada:	bf5c      	itt	pl
 8004adc:	600b      	strpl	r3, [r1, #0]
 8004ade:	2002      	movpl	r0, #2
 8004ae0:	4770      	bx	lr
 8004ae2:	b298      	uxth	r0, r3
 8004ae4:	b9a8      	cbnz	r0, 8004b12 <__lo0bits+0x52>
 8004ae6:	2010      	movs	r0, #16
 8004ae8:	0c1b      	lsrs	r3, r3, #16
 8004aea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004aee:	bf04      	itt	eq
 8004af0:	0a1b      	lsreq	r3, r3, #8
 8004af2:	3008      	addeq	r0, #8
 8004af4:	071a      	lsls	r2, r3, #28
 8004af6:	bf04      	itt	eq
 8004af8:	091b      	lsreq	r3, r3, #4
 8004afa:	3004      	addeq	r0, #4
 8004afc:	079a      	lsls	r2, r3, #30
 8004afe:	bf04      	itt	eq
 8004b00:	089b      	lsreq	r3, r3, #2
 8004b02:	3002      	addeq	r0, #2
 8004b04:	07da      	lsls	r2, r3, #31
 8004b06:	d402      	bmi.n	8004b0e <__lo0bits+0x4e>
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	d006      	beq.n	8004b1a <__lo0bits+0x5a>
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	600b      	str	r3, [r1, #0]
 8004b10:	4770      	bx	lr
 8004b12:	4610      	mov	r0, r2
 8004b14:	e7e9      	b.n	8004aea <__lo0bits+0x2a>
 8004b16:	2000      	movs	r0, #0
 8004b18:	4770      	bx	lr
 8004b1a:	2020      	movs	r0, #32
 8004b1c:	4770      	bx	lr

08004b1e <__i2b>:
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	460c      	mov	r4, r1
 8004b22:	2101      	movs	r1, #1
 8004b24:	f7ff ff27 	bl	8004976 <_Balloc>
 8004b28:	2201      	movs	r2, #1
 8004b2a:	6144      	str	r4, [r0, #20]
 8004b2c:	6102      	str	r2, [r0, #16]
 8004b2e:	bd10      	pop	{r4, pc}

08004b30 <__multiply>:
 8004b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b34:	4614      	mov	r4, r2
 8004b36:	690a      	ldr	r2, [r1, #16]
 8004b38:	6923      	ldr	r3, [r4, #16]
 8004b3a:	4688      	mov	r8, r1
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	bfbe      	ittt	lt
 8004b40:	460b      	movlt	r3, r1
 8004b42:	46a0      	movlt	r8, r4
 8004b44:	461c      	movlt	r4, r3
 8004b46:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004b4a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004b4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004b52:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004b56:	eb07 0609 	add.w	r6, r7, r9
 8004b5a:	42b3      	cmp	r3, r6
 8004b5c:	bfb8      	it	lt
 8004b5e:	3101      	addlt	r1, #1
 8004b60:	f7ff ff09 	bl	8004976 <_Balloc>
 8004b64:	f100 0514 	add.w	r5, r0, #20
 8004b68:	462b      	mov	r3, r5
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004b70:	4573      	cmp	r3, lr
 8004b72:	d316      	bcc.n	8004ba2 <__multiply+0x72>
 8004b74:	f104 0214 	add.w	r2, r4, #20
 8004b78:	f108 0114 	add.w	r1, r8, #20
 8004b7c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004b80:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	9b00      	ldr	r3, [sp, #0]
 8004b88:	9201      	str	r2, [sp, #4]
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d80c      	bhi.n	8004ba8 <__multiply+0x78>
 8004b8e:	2e00      	cmp	r6, #0
 8004b90:	dd03      	ble.n	8004b9a <__multiply+0x6a>
 8004b92:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d05d      	beq.n	8004c56 <__multiply+0x126>
 8004b9a:	6106      	str	r6, [r0, #16]
 8004b9c:	b003      	add	sp, #12
 8004b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba2:	f843 2b04 	str.w	r2, [r3], #4
 8004ba6:	e7e3      	b.n	8004b70 <__multiply+0x40>
 8004ba8:	f8b2 b000 	ldrh.w	fp, [r2]
 8004bac:	f1bb 0f00 	cmp.w	fp, #0
 8004bb0:	d023      	beq.n	8004bfa <__multiply+0xca>
 8004bb2:	4689      	mov	r9, r1
 8004bb4:	46ac      	mov	ip, r5
 8004bb6:	f04f 0800 	mov.w	r8, #0
 8004bba:	f859 4b04 	ldr.w	r4, [r9], #4
 8004bbe:	f8dc a000 	ldr.w	sl, [ip]
 8004bc2:	b2a3      	uxth	r3, r4
 8004bc4:	fa1f fa8a 	uxth.w	sl, sl
 8004bc8:	fb0b a303 	mla	r3, fp, r3, sl
 8004bcc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004bd0:	f8dc 4000 	ldr.w	r4, [ip]
 8004bd4:	4443      	add	r3, r8
 8004bd6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004bda:	fb0b 840a 	mla	r4, fp, sl, r8
 8004bde:	46e2      	mov	sl, ip
 8004be0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004bea:	454f      	cmp	r7, r9
 8004bec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004bf0:	f84a 3b04 	str.w	r3, [sl], #4
 8004bf4:	d82b      	bhi.n	8004c4e <__multiply+0x11e>
 8004bf6:	f8cc 8004 	str.w	r8, [ip, #4]
 8004bfa:	9b01      	ldr	r3, [sp, #4]
 8004bfc:	3204      	adds	r2, #4
 8004bfe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004c02:	f1ba 0f00 	cmp.w	sl, #0
 8004c06:	d020      	beq.n	8004c4a <__multiply+0x11a>
 8004c08:	4689      	mov	r9, r1
 8004c0a:	46a8      	mov	r8, r5
 8004c0c:	f04f 0b00 	mov.w	fp, #0
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	f8b9 c000 	ldrh.w	ip, [r9]
 8004c16:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	fb0a 440c 	mla	r4, sl, ip, r4
 8004c20:	46c4      	mov	ip, r8
 8004c22:	445c      	add	r4, fp
 8004c24:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004c28:	f84c 3b04 	str.w	r3, [ip], #4
 8004c2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c30:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	fb0a b303 	mla	r3, sl, r3, fp
 8004c3a:	454f      	cmp	r7, r9
 8004c3c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004c40:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004c44:	d805      	bhi.n	8004c52 <__multiply+0x122>
 8004c46:	f8c8 3004 	str.w	r3, [r8, #4]
 8004c4a:	3504      	adds	r5, #4
 8004c4c:	e79b      	b.n	8004b86 <__multiply+0x56>
 8004c4e:	46d4      	mov	ip, sl
 8004c50:	e7b3      	b.n	8004bba <__multiply+0x8a>
 8004c52:	46e0      	mov	r8, ip
 8004c54:	e7dd      	b.n	8004c12 <__multiply+0xe2>
 8004c56:	3e01      	subs	r6, #1
 8004c58:	e799      	b.n	8004b8e <__multiply+0x5e>
	...

08004c5c <__pow5mult>:
 8004c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c60:	4615      	mov	r5, r2
 8004c62:	f012 0203 	ands.w	r2, r2, #3
 8004c66:	4606      	mov	r6, r0
 8004c68:	460f      	mov	r7, r1
 8004c6a:	d007      	beq.n	8004c7c <__pow5mult+0x20>
 8004c6c:	4c21      	ldr	r4, [pc, #132]	; (8004cf4 <__pow5mult+0x98>)
 8004c6e:	3a01      	subs	r2, #1
 8004c70:	2300      	movs	r3, #0
 8004c72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c76:	f7ff fec9 	bl	8004a0c <__multadd>
 8004c7a:	4607      	mov	r7, r0
 8004c7c:	10ad      	asrs	r5, r5, #2
 8004c7e:	d035      	beq.n	8004cec <__pow5mult+0x90>
 8004c80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004c82:	b93c      	cbnz	r4, 8004c94 <__pow5mult+0x38>
 8004c84:	2010      	movs	r0, #16
 8004c86:	f7ff fe55 	bl	8004934 <malloc>
 8004c8a:	6270      	str	r0, [r6, #36]	; 0x24
 8004c8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c90:	6004      	str	r4, [r0, #0]
 8004c92:	60c4      	str	r4, [r0, #12]
 8004c94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004c98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c9c:	b94c      	cbnz	r4, 8004cb2 <__pow5mult+0x56>
 8004c9e:	f240 2171 	movw	r1, #625	; 0x271
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f7ff ff3b 	bl	8004b1e <__i2b>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	4604      	mov	r4, r0
 8004cac:	f8c8 0008 	str.w	r0, [r8, #8]
 8004cb0:	6003      	str	r3, [r0, #0]
 8004cb2:	f04f 0800 	mov.w	r8, #0
 8004cb6:	07eb      	lsls	r3, r5, #31
 8004cb8:	d50a      	bpl.n	8004cd0 <__pow5mult+0x74>
 8004cba:	4639      	mov	r1, r7
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f7ff ff36 	bl	8004b30 <__multiply>
 8004cc4:	4681      	mov	r9, r0
 8004cc6:	4639      	mov	r1, r7
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f7ff fe88 	bl	80049de <_Bfree>
 8004cce:	464f      	mov	r7, r9
 8004cd0:	106d      	asrs	r5, r5, #1
 8004cd2:	d00b      	beq.n	8004cec <__pow5mult+0x90>
 8004cd4:	6820      	ldr	r0, [r4, #0]
 8004cd6:	b938      	cbnz	r0, 8004ce8 <__pow5mult+0x8c>
 8004cd8:	4622      	mov	r2, r4
 8004cda:	4621      	mov	r1, r4
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f7ff ff27 	bl	8004b30 <__multiply>
 8004ce2:	6020      	str	r0, [r4, #0]
 8004ce4:	f8c0 8000 	str.w	r8, [r0]
 8004ce8:	4604      	mov	r4, r0
 8004cea:	e7e4      	b.n	8004cb6 <__pow5mult+0x5a>
 8004cec:	4638      	mov	r0, r7
 8004cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cf2:	bf00      	nop
 8004cf4:	080055b0 	.word	0x080055b0

08004cf8 <__lshift>:
 8004cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	4607      	mov	r7, r0
 8004d00:	4616      	mov	r6, r2
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d08:	eb0a 0903 	add.w	r9, sl, r3
 8004d0c:	6849      	ldr	r1, [r1, #4]
 8004d0e:	68a3      	ldr	r3, [r4, #8]
 8004d10:	f109 0501 	add.w	r5, r9, #1
 8004d14:	42ab      	cmp	r3, r5
 8004d16:	db32      	blt.n	8004d7e <__lshift+0x86>
 8004d18:	4638      	mov	r0, r7
 8004d1a:	f7ff fe2c 	bl	8004976 <_Balloc>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	4680      	mov	r8, r0
 8004d22:	461a      	mov	r2, r3
 8004d24:	f100 0114 	add.w	r1, r0, #20
 8004d28:	4553      	cmp	r3, sl
 8004d2a:	db2b      	blt.n	8004d84 <__lshift+0x8c>
 8004d2c:	6920      	ldr	r0, [r4, #16]
 8004d2e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d32:	f104 0314 	add.w	r3, r4, #20
 8004d36:	f016 021f 	ands.w	r2, r6, #31
 8004d3a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d3e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d42:	d025      	beq.n	8004d90 <__lshift+0x98>
 8004d44:	2000      	movs	r0, #0
 8004d46:	f1c2 0e20 	rsb	lr, r2, #32
 8004d4a:	468a      	mov	sl, r1
 8004d4c:	681e      	ldr	r6, [r3, #0]
 8004d4e:	4096      	lsls	r6, r2
 8004d50:	4330      	orrs	r0, r6
 8004d52:	f84a 0b04 	str.w	r0, [sl], #4
 8004d56:	f853 0b04 	ldr.w	r0, [r3], #4
 8004d5a:	459c      	cmp	ip, r3
 8004d5c:	fa20 f00e 	lsr.w	r0, r0, lr
 8004d60:	d814      	bhi.n	8004d8c <__lshift+0x94>
 8004d62:	6048      	str	r0, [r1, #4]
 8004d64:	b108      	cbz	r0, 8004d6a <__lshift+0x72>
 8004d66:	f109 0502 	add.w	r5, r9, #2
 8004d6a:	3d01      	subs	r5, #1
 8004d6c:	4638      	mov	r0, r7
 8004d6e:	f8c8 5010 	str.w	r5, [r8, #16]
 8004d72:	4621      	mov	r1, r4
 8004d74:	f7ff fe33 	bl	80049de <_Bfree>
 8004d78:	4640      	mov	r0, r8
 8004d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d7e:	3101      	adds	r1, #1
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	e7c7      	b.n	8004d14 <__lshift+0x1c>
 8004d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	e7cd      	b.n	8004d28 <__lshift+0x30>
 8004d8c:	4651      	mov	r1, sl
 8004d8e:	e7dc      	b.n	8004d4a <__lshift+0x52>
 8004d90:	3904      	subs	r1, #4
 8004d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d96:	459c      	cmp	ip, r3
 8004d98:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d9c:	d8f9      	bhi.n	8004d92 <__lshift+0x9a>
 8004d9e:	e7e4      	b.n	8004d6a <__lshift+0x72>

08004da0 <__mcmp>:
 8004da0:	6903      	ldr	r3, [r0, #16]
 8004da2:	690a      	ldr	r2, [r1, #16]
 8004da4:	b530      	push	{r4, r5, lr}
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	d10c      	bne.n	8004dc4 <__mcmp+0x24>
 8004daa:	0092      	lsls	r2, r2, #2
 8004dac:	3014      	adds	r0, #20
 8004dae:	3114      	adds	r1, #20
 8004db0:	1884      	adds	r4, r0, r2
 8004db2:	4411      	add	r1, r2
 8004db4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004db8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004dbc:	4295      	cmp	r5, r2
 8004dbe:	d003      	beq.n	8004dc8 <__mcmp+0x28>
 8004dc0:	d305      	bcc.n	8004dce <__mcmp+0x2e>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	bd30      	pop	{r4, r5, pc}
 8004dc8:	42a0      	cmp	r0, r4
 8004dca:	d3f3      	bcc.n	8004db4 <__mcmp+0x14>
 8004dcc:	e7fa      	b.n	8004dc4 <__mcmp+0x24>
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd2:	e7f7      	b.n	8004dc4 <__mcmp+0x24>

08004dd4 <__mdiff>:
 8004dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd8:	460d      	mov	r5, r1
 8004dda:	4607      	mov	r7, r0
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4628      	mov	r0, r5
 8004de0:	4614      	mov	r4, r2
 8004de2:	f7ff ffdd 	bl	8004da0 <__mcmp>
 8004de6:	1e06      	subs	r6, r0, #0
 8004de8:	d108      	bne.n	8004dfc <__mdiff+0x28>
 8004dea:	4631      	mov	r1, r6
 8004dec:	4638      	mov	r0, r7
 8004dee:	f7ff fdc2 	bl	8004976 <_Balloc>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	bfa4      	itt	ge
 8004dfe:	4623      	movge	r3, r4
 8004e00:	462c      	movge	r4, r5
 8004e02:	4638      	mov	r0, r7
 8004e04:	6861      	ldr	r1, [r4, #4]
 8004e06:	bfa6      	itte	ge
 8004e08:	461d      	movge	r5, r3
 8004e0a:	2600      	movge	r6, #0
 8004e0c:	2601      	movlt	r6, #1
 8004e0e:	f7ff fdb2 	bl	8004976 <_Balloc>
 8004e12:	f04f 0e00 	mov.w	lr, #0
 8004e16:	60c6      	str	r6, [r0, #12]
 8004e18:	692b      	ldr	r3, [r5, #16]
 8004e1a:	6926      	ldr	r6, [r4, #16]
 8004e1c:	f104 0214 	add.w	r2, r4, #20
 8004e20:	f105 0914 	add.w	r9, r5, #20
 8004e24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004e28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004e2c:	f100 0114 	add.w	r1, r0, #20
 8004e30:	f852 ab04 	ldr.w	sl, [r2], #4
 8004e34:	f859 5b04 	ldr.w	r5, [r9], #4
 8004e38:	fa1f f38a 	uxth.w	r3, sl
 8004e3c:	4473      	add	r3, lr
 8004e3e:	b2ac      	uxth	r4, r5
 8004e40:	1b1b      	subs	r3, r3, r4
 8004e42:	0c2c      	lsrs	r4, r5, #16
 8004e44:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004e48:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004e52:	45c8      	cmp	r8, r9
 8004e54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004e58:	4694      	mov	ip, r2
 8004e5a:	f841 4b04 	str.w	r4, [r1], #4
 8004e5e:	d8e7      	bhi.n	8004e30 <__mdiff+0x5c>
 8004e60:	45bc      	cmp	ip, r7
 8004e62:	d304      	bcc.n	8004e6e <__mdiff+0x9a>
 8004e64:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004e68:	b183      	cbz	r3, 8004e8c <__mdiff+0xb8>
 8004e6a:	6106      	str	r6, [r0, #16]
 8004e6c:	e7c4      	b.n	8004df8 <__mdiff+0x24>
 8004e6e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004e72:	b2a2      	uxth	r2, r4
 8004e74:	4472      	add	r2, lr
 8004e76:	1413      	asrs	r3, r2, #16
 8004e78:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004e7c:	b292      	uxth	r2, r2
 8004e7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004e82:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004e86:	f841 2b04 	str.w	r2, [r1], #4
 8004e8a:	e7e9      	b.n	8004e60 <__mdiff+0x8c>
 8004e8c:	3e01      	subs	r6, #1
 8004e8e:	e7e9      	b.n	8004e64 <__mdiff+0x90>

08004e90 <__d2b>:
 8004e90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004e94:	461c      	mov	r4, r3
 8004e96:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4690      	mov	r8, r2
 8004e9e:	f7ff fd6a 	bl	8004976 <_Balloc>
 8004ea2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004ea6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004eaa:	4607      	mov	r7, r0
 8004eac:	bb34      	cbnz	r4, 8004efc <__d2b+0x6c>
 8004eae:	9201      	str	r2, [sp, #4]
 8004eb0:	f1b8 0200 	subs.w	r2, r8, #0
 8004eb4:	d027      	beq.n	8004f06 <__d2b+0x76>
 8004eb6:	a802      	add	r0, sp, #8
 8004eb8:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004ebc:	f7ff fe00 	bl	8004ac0 <__lo0bits>
 8004ec0:	9900      	ldr	r1, [sp, #0]
 8004ec2:	b1f0      	cbz	r0, 8004f02 <__d2b+0x72>
 8004ec4:	9a01      	ldr	r2, [sp, #4]
 8004ec6:	f1c0 0320 	rsb	r3, r0, #32
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	40c2      	lsrs	r2, r0
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	9201      	str	r2, [sp, #4]
 8004ed6:	9b01      	ldr	r3, [sp, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bf14      	ite	ne
 8004edc:	2102      	movne	r1, #2
 8004ede:	2101      	moveq	r1, #1
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	6139      	str	r1, [r7, #16]
 8004ee4:	b1c4      	cbz	r4, 8004f18 <__d2b+0x88>
 8004ee6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004eea:	4404      	add	r4, r0
 8004eec:	6034      	str	r4, [r6, #0]
 8004eee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004ef2:	6028      	str	r0, [r5, #0]
 8004ef4:	4638      	mov	r0, r7
 8004ef6:	b002      	add	sp, #8
 8004ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004efc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f00:	e7d5      	b.n	8004eae <__d2b+0x1e>
 8004f02:	6179      	str	r1, [r7, #20]
 8004f04:	e7e7      	b.n	8004ed6 <__d2b+0x46>
 8004f06:	a801      	add	r0, sp, #4
 8004f08:	f7ff fdda 	bl	8004ac0 <__lo0bits>
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	6139      	str	r1, [r7, #16]
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	3020      	adds	r0, #32
 8004f16:	e7e5      	b.n	8004ee4 <__d2b+0x54>
 8004f18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004f1c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004f20:	6030      	str	r0, [r6, #0]
 8004f22:	6918      	ldr	r0, [r3, #16]
 8004f24:	f7ff fdad 	bl	8004a82 <__hi0bits>
 8004f28:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004f2c:	e7e1      	b.n	8004ef2 <__d2b+0x62>

08004f2e <_calloc_r>:
 8004f2e:	b538      	push	{r3, r4, r5, lr}
 8004f30:	fb02 f401 	mul.w	r4, r2, r1
 8004f34:	4621      	mov	r1, r4
 8004f36:	f000 f855 	bl	8004fe4 <_malloc_r>
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	b118      	cbz	r0, 8004f46 <_calloc_r+0x18>
 8004f3e:	4622      	mov	r2, r4
 8004f40:	2100      	movs	r1, #0
 8004f42:	f7fe fa2f 	bl	80033a4 <memset>
 8004f46:	4628      	mov	r0, r5
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
	...

08004f4c <_free_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4605      	mov	r5, r0
 8004f50:	2900      	cmp	r1, #0
 8004f52:	d043      	beq.n	8004fdc <_free_r+0x90>
 8004f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f58:	1f0c      	subs	r4, r1, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	bfb8      	it	lt
 8004f5e:	18e4      	addlt	r4, r4, r3
 8004f60:	f000 fa27 	bl	80053b2 <__malloc_lock>
 8004f64:	4a1e      	ldr	r2, [pc, #120]	; (8004fe0 <_free_r+0x94>)
 8004f66:	6813      	ldr	r3, [r2, #0]
 8004f68:	4610      	mov	r0, r2
 8004f6a:	b933      	cbnz	r3, 8004f7a <_free_r+0x2e>
 8004f6c:	6063      	str	r3, [r4, #4]
 8004f6e:	6014      	str	r4, [r2, #0]
 8004f70:	4628      	mov	r0, r5
 8004f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f76:	f000 ba1d 	b.w	80053b4 <__malloc_unlock>
 8004f7a:	42a3      	cmp	r3, r4
 8004f7c:	d90b      	bls.n	8004f96 <_free_r+0x4a>
 8004f7e:	6821      	ldr	r1, [r4, #0]
 8004f80:	1862      	adds	r2, r4, r1
 8004f82:	4293      	cmp	r3, r2
 8004f84:	bf01      	itttt	eq
 8004f86:	681a      	ldreq	r2, [r3, #0]
 8004f88:	685b      	ldreq	r3, [r3, #4]
 8004f8a:	1852      	addeq	r2, r2, r1
 8004f8c:	6022      	streq	r2, [r4, #0]
 8004f8e:	6063      	str	r3, [r4, #4]
 8004f90:	6004      	str	r4, [r0, #0]
 8004f92:	e7ed      	b.n	8004f70 <_free_r+0x24>
 8004f94:	4613      	mov	r3, r2
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	b10a      	cbz	r2, 8004f9e <_free_r+0x52>
 8004f9a:	42a2      	cmp	r2, r4
 8004f9c:	d9fa      	bls.n	8004f94 <_free_r+0x48>
 8004f9e:	6819      	ldr	r1, [r3, #0]
 8004fa0:	1858      	adds	r0, r3, r1
 8004fa2:	42a0      	cmp	r0, r4
 8004fa4:	d10b      	bne.n	8004fbe <_free_r+0x72>
 8004fa6:	6820      	ldr	r0, [r4, #0]
 8004fa8:	4401      	add	r1, r0
 8004faa:	1858      	adds	r0, r3, r1
 8004fac:	4282      	cmp	r2, r0
 8004fae:	6019      	str	r1, [r3, #0]
 8004fb0:	d1de      	bne.n	8004f70 <_free_r+0x24>
 8004fb2:	6810      	ldr	r0, [r2, #0]
 8004fb4:	6852      	ldr	r2, [r2, #4]
 8004fb6:	4401      	add	r1, r0
 8004fb8:	6019      	str	r1, [r3, #0]
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	e7d8      	b.n	8004f70 <_free_r+0x24>
 8004fbe:	d902      	bls.n	8004fc6 <_free_r+0x7a>
 8004fc0:	230c      	movs	r3, #12
 8004fc2:	602b      	str	r3, [r5, #0]
 8004fc4:	e7d4      	b.n	8004f70 <_free_r+0x24>
 8004fc6:	6820      	ldr	r0, [r4, #0]
 8004fc8:	1821      	adds	r1, r4, r0
 8004fca:	428a      	cmp	r2, r1
 8004fcc:	bf01      	itttt	eq
 8004fce:	6811      	ldreq	r1, [r2, #0]
 8004fd0:	6852      	ldreq	r2, [r2, #4]
 8004fd2:	1809      	addeq	r1, r1, r0
 8004fd4:	6021      	streq	r1, [r4, #0]
 8004fd6:	6062      	str	r2, [r4, #4]
 8004fd8:	605c      	str	r4, [r3, #4]
 8004fda:	e7c9      	b.n	8004f70 <_free_r+0x24>
 8004fdc:	bd38      	pop	{r3, r4, r5, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000204 	.word	0x20000204

08004fe4 <_malloc_r>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	1ccd      	adds	r5, r1, #3
 8004fe8:	f025 0503 	bic.w	r5, r5, #3
 8004fec:	3508      	adds	r5, #8
 8004fee:	2d0c      	cmp	r5, #12
 8004ff0:	bf38      	it	cc
 8004ff2:	250c      	movcc	r5, #12
 8004ff4:	2d00      	cmp	r5, #0
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	db01      	blt.n	8004ffe <_malloc_r+0x1a>
 8004ffa:	42a9      	cmp	r1, r5
 8004ffc:	d903      	bls.n	8005006 <_malloc_r+0x22>
 8004ffe:	230c      	movs	r3, #12
 8005000:	6033      	str	r3, [r6, #0]
 8005002:	2000      	movs	r0, #0
 8005004:	bd70      	pop	{r4, r5, r6, pc}
 8005006:	f000 f9d4 	bl	80053b2 <__malloc_lock>
 800500a:	4a21      	ldr	r2, [pc, #132]	; (8005090 <_malloc_r+0xac>)
 800500c:	6814      	ldr	r4, [r2, #0]
 800500e:	4621      	mov	r1, r4
 8005010:	b991      	cbnz	r1, 8005038 <_malloc_r+0x54>
 8005012:	4c20      	ldr	r4, [pc, #128]	; (8005094 <_malloc_r+0xb0>)
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	b91b      	cbnz	r3, 8005020 <_malloc_r+0x3c>
 8005018:	4630      	mov	r0, r6
 800501a:	f000 f98f 	bl	800533c <_sbrk_r>
 800501e:	6020      	str	r0, [r4, #0]
 8005020:	4629      	mov	r1, r5
 8005022:	4630      	mov	r0, r6
 8005024:	f000 f98a 	bl	800533c <_sbrk_r>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	d124      	bne.n	8005076 <_malloc_r+0x92>
 800502c:	230c      	movs	r3, #12
 800502e:	4630      	mov	r0, r6
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	f000 f9bf 	bl	80053b4 <__malloc_unlock>
 8005036:	e7e4      	b.n	8005002 <_malloc_r+0x1e>
 8005038:	680b      	ldr	r3, [r1, #0]
 800503a:	1b5b      	subs	r3, r3, r5
 800503c:	d418      	bmi.n	8005070 <_malloc_r+0x8c>
 800503e:	2b0b      	cmp	r3, #11
 8005040:	d90f      	bls.n	8005062 <_malloc_r+0x7e>
 8005042:	600b      	str	r3, [r1, #0]
 8005044:	18cc      	adds	r4, r1, r3
 8005046:	50cd      	str	r5, [r1, r3]
 8005048:	4630      	mov	r0, r6
 800504a:	f000 f9b3 	bl	80053b4 <__malloc_unlock>
 800504e:	f104 000b 	add.w	r0, r4, #11
 8005052:	1d23      	adds	r3, r4, #4
 8005054:	f020 0007 	bic.w	r0, r0, #7
 8005058:	1ac3      	subs	r3, r0, r3
 800505a:	d0d3      	beq.n	8005004 <_malloc_r+0x20>
 800505c:	425a      	negs	r2, r3
 800505e:	50e2      	str	r2, [r4, r3]
 8005060:	e7d0      	b.n	8005004 <_malloc_r+0x20>
 8005062:	684b      	ldr	r3, [r1, #4]
 8005064:	428c      	cmp	r4, r1
 8005066:	bf16      	itet	ne
 8005068:	6063      	strne	r3, [r4, #4]
 800506a:	6013      	streq	r3, [r2, #0]
 800506c:	460c      	movne	r4, r1
 800506e:	e7eb      	b.n	8005048 <_malloc_r+0x64>
 8005070:	460c      	mov	r4, r1
 8005072:	6849      	ldr	r1, [r1, #4]
 8005074:	e7cc      	b.n	8005010 <_malloc_r+0x2c>
 8005076:	1cc4      	adds	r4, r0, #3
 8005078:	f024 0403 	bic.w	r4, r4, #3
 800507c:	42a0      	cmp	r0, r4
 800507e:	d005      	beq.n	800508c <_malloc_r+0xa8>
 8005080:	1a21      	subs	r1, r4, r0
 8005082:	4630      	mov	r0, r6
 8005084:	f000 f95a 	bl	800533c <_sbrk_r>
 8005088:	3001      	adds	r0, #1
 800508a:	d0cf      	beq.n	800502c <_malloc_r+0x48>
 800508c:	6025      	str	r5, [r4, #0]
 800508e:	e7db      	b.n	8005048 <_malloc_r+0x64>
 8005090:	20000204 	.word	0x20000204
 8005094:	20000208 	.word	0x20000208

08005098 <__ssputs_r>:
 8005098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800509c:	688e      	ldr	r6, [r1, #8]
 800509e:	4682      	mov	sl, r0
 80050a0:	429e      	cmp	r6, r3
 80050a2:	460c      	mov	r4, r1
 80050a4:	4690      	mov	r8, r2
 80050a6:	4699      	mov	r9, r3
 80050a8:	d837      	bhi.n	800511a <__ssputs_r+0x82>
 80050aa:	898a      	ldrh	r2, [r1, #12]
 80050ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050b0:	d031      	beq.n	8005116 <__ssputs_r+0x7e>
 80050b2:	2302      	movs	r3, #2
 80050b4:	6825      	ldr	r5, [r4, #0]
 80050b6:	6909      	ldr	r1, [r1, #16]
 80050b8:	1a6f      	subs	r7, r5, r1
 80050ba:	6965      	ldr	r5, [r4, #20]
 80050bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80050c4:	f109 0301 	add.w	r3, r9, #1
 80050c8:	443b      	add	r3, r7
 80050ca:	429d      	cmp	r5, r3
 80050cc:	bf38      	it	cc
 80050ce:	461d      	movcc	r5, r3
 80050d0:	0553      	lsls	r3, r2, #21
 80050d2:	d530      	bpl.n	8005136 <__ssputs_r+0x9e>
 80050d4:	4629      	mov	r1, r5
 80050d6:	f7ff ff85 	bl	8004fe4 <_malloc_r>
 80050da:	4606      	mov	r6, r0
 80050dc:	b950      	cbnz	r0, 80050f4 <__ssputs_r+0x5c>
 80050de:	230c      	movs	r3, #12
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
 80050e4:	f8ca 3000 	str.w	r3, [sl]
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ee:	81a3      	strh	r3, [r4, #12]
 80050f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f4:	463a      	mov	r2, r7
 80050f6:	6921      	ldr	r1, [r4, #16]
 80050f8:	f7ff fc32 	bl	8004960 <memcpy>
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005106:	81a3      	strh	r3, [r4, #12]
 8005108:	6126      	str	r6, [r4, #16]
 800510a:	443e      	add	r6, r7
 800510c:	6026      	str	r6, [r4, #0]
 800510e:	464e      	mov	r6, r9
 8005110:	6165      	str	r5, [r4, #20]
 8005112:	1bed      	subs	r5, r5, r7
 8005114:	60a5      	str	r5, [r4, #8]
 8005116:	454e      	cmp	r6, r9
 8005118:	d900      	bls.n	800511c <__ssputs_r+0x84>
 800511a:	464e      	mov	r6, r9
 800511c:	4632      	mov	r2, r6
 800511e:	4641      	mov	r1, r8
 8005120:	6820      	ldr	r0, [r4, #0]
 8005122:	f000 f92d 	bl	8005380 <memmove>
 8005126:	68a3      	ldr	r3, [r4, #8]
 8005128:	2000      	movs	r0, #0
 800512a:	1b9b      	subs	r3, r3, r6
 800512c:	60a3      	str	r3, [r4, #8]
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	441e      	add	r6, r3
 8005132:	6026      	str	r6, [r4, #0]
 8005134:	e7dc      	b.n	80050f0 <__ssputs_r+0x58>
 8005136:	462a      	mov	r2, r5
 8005138:	f000 f93d 	bl	80053b6 <_realloc_r>
 800513c:	4606      	mov	r6, r0
 800513e:	2800      	cmp	r0, #0
 8005140:	d1e2      	bne.n	8005108 <__ssputs_r+0x70>
 8005142:	6921      	ldr	r1, [r4, #16]
 8005144:	4650      	mov	r0, sl
 8005146:	f7ff ff01 	bl	8004f4c <_free_r>
 800514a:	e7c8      	b.n	80050de <__ssputs_r+0x46>

0800514c <_svfiprintf_r>:
 800514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005150:	461d      	mov	r5, r3
 8005152:	898b      	ldrh	r3, [r1, #12]
 8005154:	b09d      	sub	sp, #116	; 0x74
 8005156:	061f      	lsls	r7, r3, #24
 8005158:	4680      	mov	r8, r0
 800515a:	460c      	mov	r4, r1
 800515c:	4616      	mov	r6, r2
 800515e:	d50f      	bpl.n	8005180 <_svfiprintf_r+0x34>
 8005160:	690b      	ldr	r3, [r1, #16]
 8005162:	b96b      	cbnz	r3, 8005180 <_svfiprintf_r+0x34>
 8005164:	2140      	movs	r1, #64	; 0x40
 8005166:	f7ff ff3d 	bl	8004fe4 <_malloc_r>
 800516a:	6020      	str	r0, [r4, #0]
 800516c:	6120      	str	r0, [r4, #16]
 800516e:	b928      	cbnz	r0, 800517c <_svfiprintf_r+0x30>
 8005170:	230c      	movs	r3, #12
 8005172:	f8c8 3000 	str.w	r3, [r8]
 8005176:	f04f 30ff 	mov.w	r0, #4294967295
 800517a:	e0c8      	b.n	800530e <_svfiprintf_r+0x1c2>
 800517c:	2340      	movs	r3, #64	; 0x40
 800517e:	6163      	str	r3, [r4, #20]
 8005180:	2300      	movs	r3, #0
 8005182:	9309      	str	r3, [sp, #36]	; 0x24
 8005184:	2320      	movs	r3, #32
 8005186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800518a:	2330      	movs	r3, #48	; 0x30
 800518c:	f04f 0b01 	mov.w	fp, #1
 8005190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005194:	9503      	str	r5, [sp, #12]
 8005196:	4637      	mov	r7, r6
 8005198:	463d      	mov	r5, r7
 800519a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800519e:	b10b      	cbz	r3, 80051a4 <_svfiprintf_r+0x58>
 80051a0:	2b25      	cmp	r3, #37	; 0x25
 80051a2:	d13e      	bne.n	8005222 <_svfiprintf_r+0xd6>
 80051a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80051a8:	d00b      	beq.n	80051c2 <_svfiprintf_r+0x76>
 80051aa:	4653      	mov	r3, sl
 80051ac:	4632      	mov	r2, r6
 80051ae:	4621      	mov	r1, r4
 80051b0:	4640      	mov	r0, r8
 80051b2:	f7ff ff71 	bl	8005098 <__ssputs_r>
 80051b6:	3001      	adds	r0, #1
 80051b8:	f000 80a4 	beq.w	8005304 <_svfiprintf_r+0x1b8>
 80051bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051be:	4453      	add	r3, sl
 80051c0:	9309      	str	r3, [sp, #36]	; 0x24
 80051c2:	783b      	ldrb	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 809d 	beq.w	8005304 <_svfiprintf_r+0x1b8>
 80051ca:	2300      	movs	r3, #0
 80051cc:	f04f 32ff 	mov.w	r2, #4294967295
 80051d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051d4:	9304      	str	r3, [sp, #16]
 80051d6:	9307      	str	r3, [sp, #28]
 80051d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051dc:	931a      	str	r3, [sp, #104]	; 0x68
 80051de:	462f      	mov	r7, r5
 80051e0:	2205      	movs	r2, #5
 80051e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80051e6:	4850      	ldr	r0, [pc, #320]	; (8005328 <_svfiprintf_r+0x1dc>)
 80051e8:	f7ff fbac 	bl	8004944 <memchr>
 80051ec:	9b04      	ldr	r3, [sp, #16]
 80051ee:	b9d0      	cbnz	r0, 8005226 <_svfiprintf_r+0xda>
 80051f0:	06d9      	lsls	r1, r3, #27
 80051f2:	bf44      	itt	mi
 80051f4:	2220      	movmi	r2, #32
 80051f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051fa:	071a      	lsls	r2, r3, #28
 80051fc:	bf44      	itt	mi
 80051fe:	222b      	movmi	r2, #43	; 0x2b
 8005200:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005204:	782a      	ldrb	r2, [r5, #0]
 8005206:	2a2a      	cmp	r2, #42	; 0x2a
 8005208:	d015      	beq.n	8005236 <_svfiprintf_r+0xea>
 800520a:	462f      	mov	r7, r5
 800520c:	2000      	movs	r0, #0
 800520e:	250a      	movs	r5, #10
 8005210:	9a07      	ldr	r2, [sp, #28]
 8005212:	4639      	mov	r1, r7
 8005214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005218:	3b30      	subs	r3, #48	; 0x30
 800521a:	2b09      	cmp	r3, #9
 800521c:	d94d      	bls.n	80052ba <_svfiprintf_r+0x16e>
 800521e:	b1b8      	cbz	r0, 8005250 <_svfiprintf_r+0x104>
 8005220:	e00f      	b.n	8005242 <_svfiprintf_r+0xf6>
 8005222:	462f      	mov	r7, r5
 8005224:	e7b8      	b.n	8005198 <_svfiprintf_r+0x4c>
 8005226:	4a40      	ldr	r2, [pc, #256]	; (8005328 <_svfiprintf_r+0x1dc>)
 8005228:	463d      	mov	r5, r7
 800522a:	1a80      	subs	r0, r0, r2
 800522c:	fa0b f000 	lsl.w	r0, fp, r0
 8005230:	4318      	orrs	r0, r3
 8005232:	9004      	str	r0, [sp, #16]
 8005234:	e7d3      	b.n	80051de <_svfiprintf_r+0x92>
 8005236:	9a03      	ldr	r2, [sp, #12]
 8005238:	1d11      	adds	r1, r2, #4
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	9103      	str	r1, [sp, #12]
 800523e:	2a00      	cmp	r2, #0
 8005240:	db01      	blt.n	8005246 <_svfiprintf_r+0xfa>
 8005242:	9207      	str	r2, [sp, #28]
 8005244:	e004      	b.n	8005250 <_svfiprintf_r+0x104>
 8005246:	4252      	negs	r2, r2
 8005248:	f043 0302 	orr.w	r3, r3, #2
 800524c:	9207      	str	r2, [sp, #28]
 800524e:	9304      	str	r3, [sp, #16]
 8005250:	783b      	ldrb	r3, [r7, #0]
 8005252:	2b2e      	cmp	r3, #46	; 0x2e
 8005254:	d10c      	bne.n	8005270 <_svfiprintf_r+0x124>
 8005256:	787b      	ldrb	r3, [r7, #1]
 8005258:	2b2a      	cmp	r3, #42	; 0x2a
 800525a:	d133      	bne.n	80052c4 <_svfiprintf_r+0x178>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	3702      	adds	r7, #2
 8005260:	1d1a      	adds	r2, r3, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	9203      	str	r2, [sp, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	bfb8      	it	lt
 800526a:	f04f 33ff 	movlt.w	r3, #4294967295
 800526e:	9305      	str	r3, [sp, #20]
 8005270:	4d2e      	ldr	r5, [pc, #184]	; (800532c <_svfiprintf_r+0x1e0>)
 8005272:	2203      	movs	r2, #3
 8005274:	7839      	ldrb	r1, [r7, #0]
 8005276:	4628      	mov	r0, r5
 8005278:	f7ff fb64 	bl	8004944 <memchr>
 800527c:	b138      	cbz	r0, 800528e <_svfiprintf_r+0x142>
 800527e:	2340      	movs	r3, #64	; 0x40
 8005280:	1b40      	subs	r0, r0, r5
 8005282:	fa03 f000 	lsl.w	r0, r3, r0
 8005286:	9b04      	ldr	r3, [sp, #16]
 8005288:	3701      	adds	r7, #1
 800528a:	4303      	orrs	r3, r0
 800528c:	9304      	str	r3, [sp, #16]
 800528e:	7839      	ldrb	r1, [r7, #0]
 8005290:	2206      	movs	r2, #6
 8005292:	4827      	ldr	r0, [pc, #156]	; (8005330 <_svfiprintf_r+0x1e4>)
 8005294:	1c7e      	adds	r6, r7, #1
 8005296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800529a:	f7ff fb53 	bl	8004944 <memchr>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d038      	beq.n	8005314 <_svfiprintf_r+0x1c8>
 80052a2:	4b24      	ldr	r3, [pc, #144]	; (8005334 <_svfiprintf_r+0x1e8>)
 80052a4:	bb13      	cbnz	r3, 80052ec <_svfiprintf_r+0x1a0>
 80052a6:	9b03      	ldr	r3, [sp, #12]
 80052a8:	3307      	adds	r3, #7
 80052aa:	f023 0307 	bic.w	r3, r3, #7
 80052ae:	3308      	adds	r3, #8
 80052b0:	9303      	str	r3, [sp, #12]
 80052b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b4:	444b      	add	r3, r9
 80052b6:	9309      	str	r3, [sp, #36]	; 0x24
 80052b8:	e76d      	b.n	8005196 <_svfiprintf_r+0x4a>
 80052ba:	fb05 3202 	mla	r2, r5, r2, r3
 80052be:	2001      	movs	r0, #1
 80052c0:	460f      	mov	r7, r1
 80052c2:	e7a6      	b.n	8005212 <_svfiprintf_r+0xc6>
 80052c4:	2300      	movs	r3, #0
 80052c6:	250a      	movs	r5, #10
 80052c8:	4619      	mov	r1, r3
 80052ca:	3701      	adds	r7, #1
 80052cc:	9305      	str	r3, [sp, #20]
 80052ce:	4638      	mov	r0, r7
 80052d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052d4:	3a30      	subs	r2, #48	; 0x30
 80052d6:	2a09      	cmp	r2, #9
 80052d8:	d903      	bls.n	80052e2 <_svfiprintf_r+0x196>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0c8      	beq.n	8005270 <_svfiprintf_r+0x124>
 80052de:	9105      	str	r1, [sp, #20]
 80052e0:	e7c6      	b.n	8005270 <_svfiprintf_r+0x124>
 80052e2:	fb05 2101 	mla	r1, r5, r1, r2
 80052e6:	2301      	movs	r3, #1
 80052e8:	4607      	mov	r7, r0
 80052ea:	e7f0      	b.n	80052ce <_svfiprintf_r+0x182>
 80052ec:	ab03      	add	r3, sp, #12
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4622      	mov	r2, r4
 80052f2:	4b11      	ldr	r3, [pc, #68]	; (8005338 <_svfiprintf_r+0x1ec>)
 80052f4:	a904      	add	r1, sp, #16
 80052f6:	4640      	mov	r0, r8
 80052f8:	f7fe f8ee 	bl	80034d8 <_printf_float>
 80052fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005300:	4681      	mov	r9, r0
 8005302:	d1d6      	bne.n	80052b2 <_svfiprintf_r+0x166>
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	065b      	lsls	r3, r3, #25
 8005308:	f53f af35 	bmi.w	8005176 <_svfiprintf_r+0x2a>
 800530c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800530e:	b01d      	add	sp, #116	; 0x74
 8005310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005314:	ab03      	add	r3, sp, #12
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	4622      	mov	r2, r4
 800531a:	4b07      	ldr	r3, [pc, #28]	; (8005338 <_svfiprintf_r+0x1ec>)
 800531c:	a904      	add	r1, sp, #16
 800531e:	4640      	mov	r0, r8
 8005320:	f7fe fb86 	bl	8003a30 <_printf_i>
 8005324:	e7ea      	b.n	80052fc <_svfiprintf_r+0x1b0>
 8005326:	bf00      	nop
 8005328:	080055bc 	.word	0x080055bc
 800532c:	080055c2 	.word	0x080055c2
 8005330:	080055c6 	.word	0x080055c6
 8005334:	080034d9 	.word	0x080034d9
 8005338:	08005099 	.word	0x08005099

0800533c <_sbrk_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	2300      	movs	r3, #0
 8005340:	4c05      	ldr	r4, [pc, #20]	; (8005358 <_sbrk_r+0x1c>)
 8005342:	4605      	mov	r5, r0
 8005344:	4608      	mov	r0, r1
 8005346:	6023      	str	r3, [r4, #0]
 8005348:	f7fd ff9c 	bl	8003284 <_sbrk>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d102      	bne.n	8005356 <_sbrk_r+0x1a>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	b103      	cbz	r3, 8005356 <_sbrk_r+0x1a>
 8005354:	602b      	str	r3, [r5, #0]
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	200003d0 	.word	0x200003d0

0800535c <__ascii_mbtowc>:
 800535c:	b082      	sub	sp, #8
 800535e:	b901      	cbnz	r1, 8005362 <__ascii_mbtowc+0x6>
 8005360:	a901      	add	r1, sp, #4
 8005362:	b142      	cbz	r2, 8005376 <__ascii_mbtowc+0x1a>
 8005364:	b14b      	cbz	r3, 800537a <__ascii_mbtowc+0x1e>
 8005366:	7813      	ldrb	r3, [r2, #0]
 8005368:	600b      	str	r3, [r1, #0]
 800536a:	7812      	ldrb	r2, [r2, #0]
 800536c:	1c10      	adds	r0, r2, #0
 800536e:	bf18      	it	ne
 8005370:	2001      	movne	r0, #1
 8005372:	b002      	add	sp, #8
 8005374:	4770      	bx	lr
 8005376:	4610      	mov	r0, r2
 8005378:	e7fb      	b.n	8005372 <__ascii_mbtowc+0x16>
 800537a:	f06f 0001 	mvn.w	r0, #1
 800537e:	e7f8      	b.n	8005372 <__ascii_mbtowc+0x16>

08005380 <memmove>:
 8005380:	4288      	cmp	r0, r1
 8005382:	b510      	push	{r4, lr}
 8005384:	eb01 0302 	add.w	r3, r1, r2
 8005388:	d807      	bhi.n	800539a <memmove+0x1a>
 800538a:	1e42      	subs	r2, r0, #1
 800538c:	4299      	cmp	r1, r3
 800538e:	d00a      	beq.n	80053a6 <memmove+0x26>
 8005390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005394:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005398:	e7f8      	b.n	800538c <memmove+0xc>
 800539a:	4283      	cmp	r3, r0
 800539c:	d9f5      	bls.n	800538a <memmove+0xa>
 800539e:	1881      	adds	r1, r0, r2
 80053a0:	1ad2      	subs	r2, r2, r3
 80053a2:	42d3      	cmn	r3, r2
 80053a4:	d100      	bne.n	80053a8 <memmove+0x28>
 80053a6:	bd10      	pop	{r4, pc}
 80053a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80053b0:	e7f7      	b.n	80053a2 <memmove+0x22>

080053b2 <__malloc_lock>:
 80053b2:	4770      	bx	lr

080053b4 <__malloc_unlock>:
 80053b4:	4770      	bx	lr

080053b6 <_realloc_r>:
 80053b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b8:	4607      	mov	r7, r0
 80053ba:	4614      	mov	r4, r2
 80053bc:	460e      	mov	r6, r1
 80053be:	b921      	cbnz	r1, 80053ca <_realloc_r+0x14>
 80053c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053c4:	4611      	mov	r1, r2
 80053c6:	f7ff be0d 	b.w	8004fe4 <_malloc_r>
 80053ca:	b922      	cbnz	r2, 80053d6 <_realloc_r+0x20>
 80053cc:	f7ff fdbe 	bl	8004f4c <_free_r>
 80053d0:	4625      	mov	r5, r4
 80053d2:	4628      	mov	r0, r5
 80053d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d6:	f000 f821 	bl	800541c <_malloc_usable_size_r>
 80053da:	42a0      	cmp	r0, r4
 80053dc:	d20f      	bcs.n	80053fe <_realloc_r+0x48>
 80053de:	4621      	mov	r1, r4
 80053e0:	4638      	mov	r0, r7
 80053e2:	f7ff fdff 	bl	8004fe4 <_malloc_r>
 80053e6:	4605      	mov	r5, r0
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d0f2      	beq.n	80053d2 <_realloc_r+0x1c>
 80053ec:	4631      	mov	r1, r6
 80053ee:	4622      	mov	r2, r4
 80053f0:	f7ff fab6 	bl	8004960 <memcpy>
 80053f4:	4631      	mov	r1, r6
 80053f6:	4638      	mov	r0, r7
 80053f8:	f7ff fda8 	bl	8004f4c <_free_r>
 80053fc:	e7e9      	b.n	80053d2 <_realloc_r+0x1c>
 80053fe:	4635      	mov	r5, r6
 8005400:	e7e7      	b.n	80053d2 <_realloc_r+0x1c>

08005402 <__ascii_wctomb>:
 8005402:	b149      	cbz	r1, 8005418 <__ascii_wctomb+0x16>
 8005404:	2aff      	cmp	r2, #255	; 0xff
 8005406:	bf8b      	itete	hi
 8005408:	238a      	movhi	r3, #138	; 0x8a
 800540a:	700a      	strbls	r2, [r1, #0]
 800540c:	6003      	strhi	r3, [r0, #0]
 800540e:	2001      	movls	r0, #1
 8005410:	bf88      	it	hi
 8005412:	f04f 30ff 	movhi.w	r0, #4294967295
 8005416:	4770      	bx	lr
 8005418:	4608      	mov	r0, r1
 800541a:	4770      	bx	lr

0800541c <_malloc_usable_size_r>:
 800541c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005420:	1f18      	subs	r0, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	bfbc      	itt	lt
 8005426:	580b      	ldrlt	r3, [r1, r0]
 8005428:	18c0      	addlt	r0, r0, r3
 800542a:	4770      	bx	lr

0800542c <_init>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr

08005438 <_fini>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	bf00      	nop
 800543c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543e:	bc08      	pop	{r3}
 8005440:	469e      	mov	lr, r3
 8005442:	4770      	bx	lr
